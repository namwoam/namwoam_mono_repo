
maze.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000008a6  0000093a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800106  00800106  00000940  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000940  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000970  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015ae  00000000  00000000  00000a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c9  00000000  00000000  00001fee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000085a  00000000  00000000  000028b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000170  00000000  00000000  00003114  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000049d  00000000  00000000  00003284  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b25  00000000  00000000  00003721  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00004246  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ea       	ldi	r30, 0xA6	; 166
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 30       	cpi	r26, 0x08	; 8
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 db 02 	call	0x5b6	; 0x5b6 <main>
  9e:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <digitalWrite>:
		digitalWrite(pinBlink , LOW);
		_delay_ms(50);
		digitalWrite(pinBlink , HIGH);
		_delay_ms(50);
	}
}
  a6:	61 15       	cp	r22, r1
  a8:	71 05       	cpc	r23, r1
  aa:	e1 f5       	brne	.+120    	; 0x124 <digitalWrite+0x7e>
  ac:	88 30       	cpi	r24, 0x08	; 8
  ae:	91 05       	cpc	r25, r1
  b0:	70 f4       	brcc	.+28     	; 0xce <digitalWrite+0x28>
  b2:	4b b1       	in	r20, 0x0b	; 11
  b4:	21 e0       	ldi	r18, 0x01	; 1
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	b9 01       	movw	r22, r18
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <digitalWrite+0x1a>
  bc:	66 0f       	add	r22, r22
  be:	77 1f       	adc	r23, r23
  c0:	8a 95       	dec	r24
  c2:	e2 f7       	brpl	.-8      	; 0xbc <digitalWrite+0x16>
  c4:	cb 01       	movw	r24, r22
  c6:	80 95       	com	r24
  c8:	84 23       	and	r24, r20
  ca:	8b b9       	out	0x0b, r24	; 11
  cc:	08 95       	ret
  ce:	9c 01       	movw	r18, r24
  d0:	28 50       	subi	r18, 0x08	; 8
  d2:	31 09       	sbc	r19, r1
  d4:	27 30       	cpi	r18, 0x07	; 7
  d6:	31 05       	cpc	r19, r1
  d8:	78 f4       	brcc	.+30     	; 0xf8 <digitalWrite+0x52>
  da:	48 b1       	in	r20, 0x08	; 8
  dc:	c9 01       	movw	r24, r18
  de:	21 e0       	ldi	r18, 0x01	; 1
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	b9 01       	movw	r22, r18
  e4:	02 c0       	rjmp	.+4      	; 0xea <digitalWrite+0x44>
  e6:	66 0f       	add	r22, r22
  e8:	77 1f       	adc	r23, r23
  ea:	8a 95       	dec	r24
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <digitalWrite+0x40>
  ee:	cb 01       	movw	r24, r22
  f0:	80 95       	com	r24
  f2:	84 23       	and	r24, r20
  f4:	88 b9       	out	0x08, r24	; 8
  f6:	08 95       	ret
  f8:	9c 01       	movw	r18, r24
  fa:	2f 50       	subi	r18, 0x0F	; 15
  fc:	31 09       	sbc	r19, r1
  fe:	28 30       	cpi	r18, 0x08	; 8
 100:	31 05       	cpc	r19, r1
 102:	08 f0       	brcs	.+2      	; 0x106 <digitalWrite+0x60>
 104:	49 c0       	rjmp	.+146    	; 0x198 <digitalWrite+0xf2>
 106:	45 b1       	in	r20, 0x05	; 5
 108:	c9 01       	movw	r24, r18
 10a:	21 e0       	ldi	r18, 0x01	; 1
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	b9 01       	movw	r22, r18
 110:	02 c0       	rjmp	.+4      	; 0x116 <digitalWrite+0x70>
 112:	66 0f       	add	r22, r22
 114:	77 1f       	adc	r23, r23
 116:	8a 95       	dec	r24
 118:	e2 f7       	brpl	.-8      	; 0x112 <digitalWrite+0x6c>
 11a:	cb 01       	movw	r24, r22
 11c:	80 95       	com	r24
 11e:	84 23       	and	r24, r20
 120:	85 b9       	out	0x05, r24	; 5
 122:	08 95       	ret
 124:	61 30       	cpi	r22, 0x01	; 1
 126:	71 05       	cpc	r23, r1
 128:	b9 f5       	brne	.+110    	; 0x198 <digitalWrite+0xf2>
 12a:	88 30       	cpi	r24, 0x08	; 8
 12c:	91 05       	cpc	r25, r1
 12e:	68 f4       	brcc	.+26     	; 0x14a <digitalWrite+0xa4>
 130:	4b b1       	in	r20, 0x0b	; 11
 132:	21 e0       	ldi	r18, 0x01	; 1
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	b9 01       	movw	r22, r18
 138:	02 c0       	rjmp	.+4      	; 0x13e <digitalWrite+0x98>
 13a:	66 0f       	add	r22, r22
 13c:	77 1f       	adc	r23, r23
 13e:	8a 95       	dec	r24
 140:	e2 f7       	brpl	.-8      	; 0x13a <digitalWrite+0x94>
 142:	cb 01       	movw	r24, r22
 144:	84 2b       	or	r24, r20
 146:	8b b9       	out	0x0b, r24	; 11
 148:	08 95       	ret
 14a:	9c 01       	movw	r18, r24
 14c:	28 50       	subi	r18, 0x08	; 8
 14e:	31 09       	sbc	r19, r1
 150:	27 30       	cpi	r18, 0x07	; 7
 152:	31 05       	cpc	r19, r1
 154:	70 f4       	brcc	.+28     	; 0x172 <digitalWrite+0xcc>
 156:	48 b1       	in	r20, 0x08	; 8
 158:	c9 01       	movw	r24, r18
 15a:	21 e0       	ldi	r18, 0x01	; 1
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	b9 01       	movw	r22, r18
 160:	02 c0       	rjmp	.+4      	; 0x166 <digitalWrite+0xc0>
 162:	66 0f       	add	r22, r22
 164:	77 1f       	adc	r23, r23
 166:	8a 95       	dec	r24
 168:	e2 f7       	brpl	.-8      	; 0x162 <digitalWrite+0xbc>
 16a:	cb 01       	movw	r24, r22
 16c:	84 2b       	or	r24, r20
 16e:	88 b9       	out	0x08, r24	; 8
 170:	08 95       	ret
 172:	9c 01       	movw	r18, r24
 174:	2f 50       	subi	r18, 0x0F	; 15
 176:	31 09       	sbc	r19, r1
 178:	28 30       	cpi	r18, 0x08	; 8
 17a:	31 05       	cpc	r19, r1
 17c:	68 f4       	brcc	.+26     	; 0x198 <digitalWrite+0xf2>
 17e:	45 b1       	in	r20, 0x05	; 5
 180:	c9 01       	movw	r24, r18
 182:	21 e0       	ldi	r18, 0x01	; 1
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	b9 01       	movw	r22, r18
 188:	02 c0       	rjmp	.+4      	; 0x18e <digitalWrite+0xe8>
 18a:	66 0f       	add	r22, r22
 18c:	77 1f       	adc	r23, r23
 18e:	8a 95       	dec	r24
 190:	e2 f7       	brpl	.-8      	; 0x18a <digitalWrite+0xe4>
 192:	cb 01       	movw	r24, r22
 194:	84 2b       	or	r24, r20
 196:	85 b9       	out	0x05, r24	; 5
 198:	08 95       	ret

0000019a <pinMode>:
 19a:	61 15       	cp	r22, r1
 19c:	71 05       	cpc	r23, r1
 19e:	09 f0       	breq	.+2      	; 0x1a2 <pinMode+0x8>
 1a0:	48 c0       	rjmp	.+144    	; 0x232 <pinMode+0x98>
 1a2:	88 30       	cpi	r24, 0x08	; 8
 1a4:	91 05       	cpc	r25, r1
 1a6:	90 f4       	brcc	.+36     	; 0x1cc <pinMode+0x32>
 1a8:	4a b1       	in	r20, 0x0a	; 10
 1aa:	21 e0       	ldi	r18, 0x01	; 1
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	b9 01       	movw	r22, r18
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <pinMode+0x1c>
 1b2:	66 0f       	add	r22, r22
 1b4:	77 1f       	adc	r23, r23
 1b6:	8a 95       	dec	r24
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <pinMode+0x18>
 1ba:	cb 01       	movw	r24, r22
 1bc:	96 2f       	mov	r25, r22
 1be:	90 95       	com	r25
 1c0:	94 23       	and	r25, r20
 1c2:	9a b9       	out	0x0a, r25	; 10
 1c4:	9b b1       	in	r25, 0x0b	; 11
 1c6:	89 2b       	or	r24, r25
 1c8:	8b b9       	out	0x0b, r24	; 11
 1ca:	08 95       	ret
 1cc:	9c 01       	movw	r18, r24
 1ce:	28 50       	subi	r18, 0x08	; 8
 1d0:	31 09       	sbc	r19, r1
 1d2:	27 30       	cpi	r18, 0x07	; 7
 1d4:	31 05       	cpc	r19, r1
 1d6:	98 f4       	brcc	.+38     	; 0x1fe <pinMode+0x64>
 1d8:	47 b1       	in	r20, 0x07	; 7
 1da:	c9 01       	movw	r24, r18
 1dc:	21 e0       	ldi	r18, 0x01	; 1
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	b9 01       	movw	r22, r18
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <pinMode+0x4e>
 1e4:	66 0f       	add	r22, r22
 1e6:	77 1f       	adc	r23, r23
 1e8:	8a 95       	dec	r24
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <pinMode+0x4a>
 1ec:	cb 01       	movw	r24, r22
 1ee:	96 2f       	mov	r25, r22
 1f0:	90 95       	com	r25
 1f2:	94 23       	and	r25, r20
 1f4:	97 b9       	out	0x07, r25	; 7
 1f6:	98 b1       	in	r25, 0x08	; 8
 1f8:	89 2b       	or	r24, r25
 1fa:	88 b9       	out	0x08, r24	; 8
 1fc:	08 95       	ret
 1fe:	9c 01       	movw	r18, r24
 200:	2f 50       	subi	r18, 0x0F	; 15
 202:	31 09       	sbc	r19, r1
 204:	28 30       	cpi	r18, 0x08	; 8
 206:	31 05       	cpc	r19, r1
 208:	08 f0       	brcs	.+2      	; 0x20c <pinMode+0x72>
 20a:	4d c0       	rjmp	.+154    	; 0x2a6 <pinMode+0x10c>
 20c:	44 b1       	in	r20, 0x04	; 4
 20e:	c9 01       	movw	r24, r18
 210:	21 e0       	ldi	r18, 0x01	; 1
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	b9 01       	movw	r22, r18
 216:	02 c0       	rjmp	.+4      	; 0x21c <pinMode+0x82>
 218:	66 0f       	add	r22, r22
 21a:	77 1f       	adc	r23, r23
 21c:	8a 95       	dec	r24
 21e:	e2 f7       	brpl	.-8      	; 0x218 <pinMode+0x7e>
 220:	cb 01       	movw	r24, r22
 222:	96 2f       	mov	r25, r22
 224:	90 95       	com	r25
 226:	94 23       	and	r25, r20
 228:	94 b9       	out	0x04, r25	; 4
 22a:	95 b1       	in	r25, 0x05	; 5
 22c:	89 2b       	or	r24, r25
 22e:	85 b9       	out	0x05, r24	; 5
 230:	08 95       	ret
 232:	61 30       	cpi	r22, 0x01	; 1
 234:	71 05       	cpc	r23, r1
 236:	b9 f5       	brne	.+110    	; 0x2a6 <pinMode+0x10c>
 238:	88 30       	cpi	r24, 0x08	; 8
 23a:	91 05       	cpc	r25, r1
 23c:	68 f4       	brcc	.+26     	; 0x258 <pinMode+0xbe>
 23e:	4a b1       	in	r20, 0x0a	; 10
 240:	21 e0       	ldi	r18, 0x01	; 1
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	b9 01       	movw	r22, r18
 246:	02 c0       	rjmp	.+4      	; 0x24c <pinMode+0xb2>
 248:	66 0f       	add	r22, r22
 24a:	77 1f       	adc	r23, r23
 24c:	8a 95       	dec	r24
 24e:	e2 f7       	brpl	.-8      	; 0x248 <pinMode+0xae>
 250:	cb 01       	movw	r24, r22
 252:	84 2b       	or	r24, r20
 254:	8a b9       	out	0x0a, r24	; 10
 256:	08 95       	ret
 258:	9c 01       	movw	r18, r24
 25a:	28 50       	subi	r18, 0x08	; 8
 25c:	31 09       	sbc	r19, r1
 25e:	27 30       	cpi	r18, 0x07	; 7
 260:	31 05       	cpc	r19, r1
 262:	70 f4       	brcc	.+28     	; 0x280 <pinMode+0xe6>
 264:	47 b1       	in	r20, 0x07	; 7
 266:	c9 01       	movw	r24, r18
 268:	21 e0       	ldi	r18, 0x01	; 1
 26a:	30 e0       	ldi	r19, 0x00	; 0
 26c:	b9 01       	movw	r22, r18
 26e:	02 c0       	rjmp	.+4      	; 0x274 <pinMode+0xda>
 270:	66 0f       	add	r22, r22
 272:	77 1f       	adc	r23, r23
 274:	8a 95       	dec	r24
 276:	e2 f7       	brpl	.-8      	; 0x270 <pinMode+0xd6>
 278:	cb 01       	movw	r24, r22
 27a:	84 2b       	or	r24, r20
 27c:	87 b9       	out	0x07, r24	; 7
 27e:	08 95       	ret
 280:	9c 01       	movw	r18, r24
 282:	2f 50       	subi	r18, 0x0F	; 15
 284:	31 09       	sbc	r19, r1
 286:	28 30       	cpi	r18, 0x08	; 8
 288:	31 05       	cpc	r19, r1
 28a:	68 f4       	brcc	.+26     	; 0x2a6 <pinMode+0x10c>
 28c:	44 b1       	in	r20, 0x04	; 4
 28e:	c9 01       	movw	r24, r18
 290:	21 e0       	ldi	r18, 0x01	; 1
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	b9 01       	movw	r22, r18
 296:	02 c0       	rjmp	.+4      	; 0x29c <pinMode+0x102>
 298:	66 0f       	add	r22, r22
 29a:	77 1f       	adc	r23, r23
 29c:	8a 95       	dec	r24
 29e:	e2 f7       	brpl	.-8      	; 0x298 <pinMode+0xfe>
 2a0:	cb 01       	movw	r24, r22
 2a2:	84 2b       	or	r24, r20
 2a4:	84 b9       	out	0x04, r24	; 4
 2a6:	08 95       	ret

000002a8 <analogWrite>:
 2a8:	70 78       	andi	r23, 0x80	; 128
 2aa:	77 23       	and	r23, r23
 2ac:	2c f4       	brge	.+10     	; 0x2b8 <analogWrite+0x10>
 2ae:	61 50       	subi	r22, 0x01	; 1
 2b0:	71 09       	sbc	r23, r1
 2b2:	7f 6f       	ori	r23, 0xFF	; 255
 2b4:	6f 5f       	subi	r22, 0xFF	; 255
 2b6:	7f 4f       	sbci	r23, 0xFF	; 255
 2b8:	9c 01       	movw	r18, r24
 2ba:	25 50       	subi	r18, 0x05	; 5
 2bc:	31 09       	sbc	r19, r1
 2be:	22 30       	cpi	r18, 0x02	; 2
 2c0:	31 05       	cpc	r19, r1
 2c2:	68 f4       	brcc	.+26     	; 0x2de <analogWrite+0x36>
 2c4:	23 ea       	ldi	r18, 0xA3	; 163
 2c6:	24 bd       	out	0x24, r18	; 36
 2c8:	21 e0       	ldi	r18, 0x01	; 1
 2ca:	25 bd       	out	0x25, r18	; 37
 2cc:	85 30       	cpi	r24, 0x05	; 5
 2ce:	91 05       	cpc	r25, r1
 2d0:	11 f4       	brne	.+4      	; 0x2d6 <analogWrite+0x2e>
 2d2:	68 bd       	out	0x28, r22	; 40
 2d4:	08 95       	ret
 2d6:	06 97       	sbiw	r24, 0x06	; 6
 2d8:	c1 f4       	brne	.+48     	; 0x30a <analogWrite+0x62>
 2da:	67 bd       	out	0x27, r22	; 39
 2dc:	08 95       	ret
 2de:	83 30       	cpi	r24, 0x03	; 3
 2e0:	91 05       	cpc	r25, r1
 2e2:	19 f0       	breq	.+6      	; 0x2ea <analogWrite+0x42>
 2e4:	82 31       	cpi	r24, 0x12	; 18
 2e6:	91 05       	cpc	r25, r1
 2e8:	81 f4       	brne	.+32     	; 0x30a <analogWrite+0x62>
 2ea:	23 ea       	ldi	r18, 0xA3	; 163
 2ec:	20 93 b0 00 	sts	0x00B0, r18	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
 2f0:	21 e0       	ldi	r18, 0x01	; 1
 2f2:	20 93 b1 00 	sts	0x00B1, r18	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
 2f6:	83 30       	cpi	r24, 0x03	; 3
 2f8:	91 05       	cpc	r25, r1
 2fa:	19 f4       	brne	.+6      	; 0x302 <analogWrite+0x5a>
 2fc:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 300:	08 95       	ret
 302:	42 97       	sbiw	r24, 0x12	; 18
 304:	11 f4       	brne	.+4      	; 0x30a <analogWrite+0x62>
 306:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 30a:	08 95       	ret

0000030c <analogRead>:
 30c:	9c 01       	movw	r18, r24
 30e:	28 50       	subi	r18, 0x08	; 8
 310:	31 09       	sbc	r19, r1
 312:	26 30       	cpi	r18, 0x06	; 6
 314:	31 05       	cpc	r19, r1
 316:	f0 f4       	brcc	.+60     	; 0x354 <analogRead+0x48>
 318:	88 54       	subi	r24, 0x48	; 72
 31a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 31e:	ea e7       	ldi	r30, 0x7A	; 122
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	87 e8       	ldi	r24, 0x87	; 135
 324:	80 83       	st	Z, r24
 326:	80 81       	ld	r24, Z
 328:	80 68       	ori	r24, 0x80	; 128
 32a:	80 83       	st	Z, r24
 32c:	80 81       	ld	r24, Z
 32e:	80 61       	ori	r24, 0x10	; 16
 330:	80 83       	st	Z, r24
 332:	80 81       	ld	r24, Z
 334:	80 64       	ori	r24, 0x40	; 64
 336:	80 83       	st	Z, r24
 338:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 33c:	84 ff       	sbrs	r24, 4
 33e:	fc cf       	rjmp	.-8      	; 0x338 <analogRead+0x2c>
 340:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 344:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	98 2f       	mov	r25, r24
 34c:	88 27       	eor	r24, r24
 34e:	82 0f       	add	r24, r18
 350:	91 1d       	adc	r25, r1
 352:	08 95       	ret
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	08 95       	ret

0000035a <setupSerial>:
 35a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 35e:	83 e3       	ldi	r24, 0x33	; 51
 360:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 364:	88 e0       	ldi	r24, 0x08	; 8
 366:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 36a:	86 e0       	ldi	r24, 0x06	; 6
 36c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 370:	08 95       	ret

00000372 <printString>:
 372:	fc 01       	movw	r30, r24
 374:	07 c0       	rjmp	.+14     	; 0x384 <printString+0x12>
 376:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 37a:	95 ff       	sbrs	r25, 5
 37c:	fc cf       	rjmp	.-8      	; 0x376 <printString+0x4>
 37e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 382:	31 96       	adiw	r30, 0x01	; 1
 384:	80 81       	ld	r24, Z
 386:	81 11       	cpse	r24, r1
 388:	f6 cf       	rjmp	.-20     	; 0x376 <printString+0x4>
 38a:	08 95       	ret

0000038c <__vector_13>:
 38c:	1f 92       	push	r1
 38e:	0f 92       	push	r0
 390:	0f b6       	in	r0, 0x3f	; 63
 392:	0f 92       	push	r0
 394:	11 24       	eor	r1, r1
 396:	8f 93       	push	r24
 398:	9f 93       	push	r25
 39a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 39e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 3a2:	01 96       	adiw	r24, 0x01	; 1
 3a4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
 3a8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 3ac:	9f 91       	pop	r25
 3ae:	8f 91       	pop	r24
 3b0:	0f 90       	pop	r0
 3b2:	0f be       	out	0x3f, r0	; 63
 3b4:	0f 90       	pop	r0
 3b6:	1f 90       	pop	r1
 3b8:	18 95       	reti

000003ba <setup>:
 3ba:	0f 93       	push	r16
 3bc:	1f 93       	push	r17
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
 3c2:	61 e0       	ldi	r22, 0x01	; 1
 3c4:	70 e0       	ldi	r23, 0x00	; 0
 3c6:	86 e0       	ldi	r24, 0x06	; 6
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	0e 94 cd 00 	call	0x19a	; 0x19a <pinMode>
 3ce:	61 e0       	ldi	r22, 0x01	; 1
 3d0:	70 e0       	ldi	r23, 0x00	; 0
 3d2:	85 e0       	ldi	r24, 0x05	; 5
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	0e 94 cd 00 	call	0x19a	; 0x19a <pinMode>
 3da:	61 e0       	ldi	r22, 0x01	; 1
 3dc:	70 e0       	ldi	r23, 0x00	; 0
 3de:	82 e1       	ldi	r24, 0x12	; 18
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	0e 94 cd 00 	call	0x19a	; 0x19a <pinMode>
 3e6:	61 e0       	ldi	r22, 0x01	; 1
 3e8:	70 e0       	ldi	r23, 0x00	; 0
 3ea:	83 e0       	ldi	r24, 0x03	; 3
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	0e 94 cd 00 	call	0x19a	; 0x19a <pinMode>
 3f2:	60 e0       	ldi	r22, 0x00	; 0
 3f4:	70 e0       	ldi	r23, 0x00	; 0
 3f6:	88 e0       	ldi	r24, 0x08	; 8
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	0e 94 cd 00 	call	0x19a	; 0x19a <pinMode>
 3fe:	60 e0       	ldi	r22, 0x00	; 0
 400:	70 e0       	ldi	r23, 0x00	; 0
 402:	8c e0       	ldi	r24, 0x0C	; 12
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	0e 94 cd 00 	call	0x19a	; 0x19a <pinMode>
 40a:	60 e0       	ldi	r22, 0x00	; 0
 40c:	70 e0       	ldi	r23, 0x00	; 0
 40e:	8d e0       	ldi	r24, 0x0D	; 13
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	0e 94 cd 00 	call	0x19a	; 0x19a <pinMode>
 416:	00 e0       	ldi	r16, 0x00	; 0
 418:	10 e0       	ldi	r17, 0x00	; 0
 41a:	13 c0       	rjmp	.+38     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 41c:	e8 01       	movw	r28, r16
 41e:	cc 0f       	add	r28, r28
 420:	dd 1f       	adc	r29, r29
 422:	c0 50       	subi	r28, 0x00	; 0
 424:	df 4f       	sbci	r29, 0xFF	; 255
 426:	61 e0       	ldi	r22, 0x01	; 1
 428:	70 e0       	ldi	r23, 0x00	; 0
 42a:	88 81       	ld	r24, Y
 42c:	99 81       	ldd	r25, Y+1	; 0x01
 42e:	0e 94 cd 00 	call	0x19a	; 0x19a <pinMode>
 432:	61 e0       	ldi	r22, 0x01	; 1
 434:	70 e0       	ldi	r23, 0x00	; 0
 436:	88 81       	ld	r24, Y
 438:	99 81       	ldd	r25, Y+1	; 0x01
 43a:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWrite>
 43e:	0f 5f       	subi	r16, 0xFF	; 255
 440:	1f 4f       	sbci	r17, 0xFF	; 255
 442:	03 30       	cpi	r16, 0x03	; 3
 444:	11 05       	cpc	r17, r1
 446:	54 f3       	brlt	.-44     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 448:	61 e0       	ldi	r22, 0x01	; 1
 44a:	70 e0       	ldi	r23, 0x00	; 0
 44c:	80 e1       	ldi	r24, 0x10	; 16
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	0e 94 cd 00 	call	0x19a	; 0x19a <pinMode>
 454:	61 e0       	ldi	r22, 0x01	; 1
 456:	70 e0       	ldi	r23, 0x00	; 0
 458:	80 e1       	ldi	r24, 0x10	; 16
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWrite>
 460:	61 e0       	ldi	r22, 0x01	; 1
 462:	70 e0       	ldi	r23, 0x00	; 0
 464:	85 e1       	ldi	r24, 0x15	; 21
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	0e 94 cd 00 	call	0x19a	; 0x19a <pinMode>
 46c:	61 e0       	ldi	r22, 0x01	; 1
 46e:	70 e0       	ldi	r23, 0x00	; 0
 470:	85 e1       	ldi	r24, 0x15	; 21
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWrite>
 478:	0e 94 ad 01 	call	0x35a	; 0x35a <setupSerial>
 47c:	78 94       	sei
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
 484:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 488:	ea e7       	ldi	r30, 0x7A	; 122
 48a:	f0 e0       	ldi	r31, 0x00	; 0
 48c:	87 e8       	ldi	r24, 0x87	; 135
 48e:	80 83       	st	Z, r24
 490:	80 ec       	ldi	r24, 0xC0	; 192
 492:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 496:	80 81       	ld	r24, Z
 498:	80 68       	ori	r24, 0x80	; 128
 49a:	80 83       	st	Z, r24
 49c:	df 91       	pop	r29
 49e:	cf 91       	pop	r28
 4a0:	1f 91       	pop	r17
 4a2:	0f 91       	pop	r16
 4a4:	08 95       	ret

000004a6 <stop>:
 4a6:	60 e0       	ldi	r22, 0x00	; 0
 4a8:	70 e0       	ldi	r23, 0x00	; 0
 4aa:	82 e1       	ldi	r24, 0x12	; 18
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	0e 94 54 01 	call	0x2a8	; 0x2a8 <analogWrite>
 4b2:	60 e0       	ldi	r22, 0x00	; 0
 4b4:	70 e0       	ldi	r23, 0x00	; 0
 4b6:	83 e0       	ldi	r24, 0x03	; 3
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	0e 94 54 01 	call	0x2a8	; 0x2a8 <analogWrite>
 4be:	60 e0       	ldi	r22, 0x00	; 0
 4c0:	70 e0       	ldi	r23, 0x00	; 0
 4c2:	86 e0       	ldi	r24, 0x06	; 6
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	0e 94 54 01 	call	0x2a8	; 0x2a8 <analogWrite>
 4ca:	60 e0       	ldi	r22, 0x00	; 0
 4cc:	70 e0       	ldi	r23, 0x00	; 0
 4ce:	85 e0       	ldi	r24, 0x05	; 5
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	0e 94 54 01 	call	0x2a8	; 0x2a8 <analogWrite>
 4d6:	08 95       	ret

000004d8 <turnRight>:
 4d8:	60 e0       	ldi	r22, 0x00	; 0
 4da:	70 e0       	ldi	r23, 0x00	; 0
 4dc:	82 e1       	ldi	r24, 0x12	; 18
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	0e 94 54 01 	call	0x2a8	; 0x2a8 <analogWrite>
 4e4:	62 ed       	ldi	r22, 0xD2	; 210
 4e6:	70 e0       	ldi	r23, 0x00	; 0
 4e8:	83 e0       	ldi	r24, 0x03	; 3
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	0e 94 54 01 	call	0x2a8	; 0x2a8 <analogWrite>
 4f0:	68 ec       	ldi	r22, 0xC8	; 200
 4f2:	70 e0       	ldi	r23, 0x00	; 0
 4f4:	86 e0       	ldi	r24, 0x06	; 6
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	0e 94 54 01 	call	0x2a8	; 0x2a8 <analogWrite>
 4fc:	60 e0       	ldi	r22, 0x00	; 0
 4fe:	70 e0       	ldi	r23, 0x00	; 0
 500:	85 e0       	ldi	r24, 0x05	; 5
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	0e 94 54 01 	call	0x2a8	; 0x2a8 <analogWrite>
 508:	2f ef       	ldi	r18, 0xFF	; 255
 50a:	82 e5       	ldi	r24, 0x52	; 82
 50c:	97 e0       	ldi	r25, 0x07	; 7
 50e:	21 50       	subi	r18, 0x01	; 1
 510:	80 40       	sbci	r24, 0x00	; 0
 512:	90 40       	sbci	r25, 0x00	; 0
 514:	e1 f7       	brne	.-8      	; 0x50e <turnRight+0x36>
 516:	00 c0       	rjmp	.+0      	; 0x518 <turnRight+0x40>
 518:	00 00       	nop
 51a:	0e 94 53 02 	call	0x4a6	; 0x4a6 <stop>
 51e:	08 95       	ret

00000520 <turnLeft>:
 520:	62 ed       	ldi	r22, 0xD2	; 210
 522:	70 e0       	ldi	r23, 0x00	; 0
 524:	82 e1       	ldi	r24, 0x12	; 18
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	0e 94 54 01 	call	0x2a8	; 0x2a8 <analogWrite>
 52c:	60 e0       	ldi	r22, 0x00	; 0
 52e:	70 e0       	ldi	r23, 0x00	; 0
 530:	83 e0       	ldi	r24, 0x03	; 3
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	0e 94 54 01 	call	0x2a8	; 0x2a8 <analogWrite>
 538:	60 e0       	ldi	r22, 0x00	; 0
 53a:	70 e0       	ldi	r23, 0x00	; 0
 53c:	86 e0       	ldi	r24, 0x06	; 6
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	0e 94 54 01 	call	0x2a8	; 0x2a8 <analogWrite>
 544:	68 ec       	ldi	r22, 0xC8	; 200
 546:	70 e0       	ldi	r23, 0x00	; 0
 548:	85 e0       	ldi	r24, 0x05	; 5
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	0e 94 54 01 	call	0x2a8	; 0x2a8 <analogWrite>
 550:	2f e7       	ldi	r18, 0x7F	; 127
 552:	8a e1       	ldi	r24, 0x1A	; 26
 554:	96 e0       	ldi	r25, 0x06	; 6
 556:	21 50       	subi	r18, 0x01	; 1
 558:	80 40       	sbci	r24, 0x00	; 0
 55a:	90 40       	sbci	r25, 0x00	; 0
 55c:	e1 f7       	brne	.-8      	; 0x556 <turnLeft+0x36>
 55e:	00 c0       	rjmp	.+0      	; 0x560 <turnLeft+0x40>
 560:	00 00       	nop
 562:	0e 94 53 02 	call	0x4a6	; 0x4a6 <stop>
 566:	08 95       	ret

00000568 <blockingIR>:

int blockingIR(int pin){
 568:	ef 92       	push	r14
 56a:	ff 92       	push	r15
 56c:	0f 93       	push	r16
 56e:	1f 93       	push	r17
 570:	cf 93       	push	r28
 572:	df 93       	push	r29
 574:	7c 01       	movw	r14, r24
	int limit = 10 ;
	int diff = 2;
	int cnt = 0;
	for (int i=0;i<limit;i++){
 576:	c0 e0       	ldi	r28, 0x00	; 0
 578:	d0 e0       	ldi	r29, 0x00	; 0
}

int blockingIR(int pin){
	int limit = 10 ;
	int diff = 2;
	int cnt = 0;
 57a:	00 e0       	ldi	r16, 0x00	; 0
 57c:	10 e0       	ldi	r17, 0x00	; 0
	for (int i=0;i<limit;i++){
 57e:	09 c0       	rjmp	.+18     	; 0x592 <blockingIR+0x2a>
		int val = analogRead(pin);
 580:	c7 01       	movw	r24, r14
 582:	0e 94 86 01 	call	0x30c	; 0x30c <analogRead>
		if (val < 500){
 586:	84 3f       	cpi	r24, 0xF4	; 244
 588:	91 40       	sbci	r25, 0x01	; 1
 58a:	14 f4       	brge	.+4      	; 0x590 <blockingIR+0x28>
			cnt ++;
 58c:	0f 5f       	subi	r16, 0xFF	; 255
 58e:	1f 4f       	sbci	r17, 0xFF	; 255

int blockingIR(int pin){
	int limit = 10 ;
	int diff = 2;
	int cnt = 0;
	for (int i=0;i<limit;i++){
 590:	21 96       	adiw	r28, 0x01	; 1
 592:	ca 30       	cpi	r28, 0x0A	; 10
 594:	d1 05       	cpc	r29, r1
 596:	a4 f3       	brlt	.-24     	; 0x580 <blockingIR+0x18>
		int val = analogRead(pin);
		if (val < 500){
			cnt ++;
		}
	}
	if (cnt >= limit - diff){
 598:	08 30       	cpi	r16, 0x08	; 8
 59a:	11 05       	cpc	r17, r1
 59c:	1c f0       	brlt	.+6      	; 0x5a4 <blockingIR+0x3c>
		return blocking;
 59e:	81 e0       	ldi	r24, 0x01	; 1
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <blockingIR+0x40>
	}
	else{
		return clear;
 5a4:	80 e0       	ldi	r24, 0x00	; 0
 5a6:	90 e0       	ldi	r25, 0x00	; 0
	}
	
}
 5a8:	df 91       	pop	r29
 5aa:	cf 91       	pop	r28
 5ac:	1f 91       	pop	r17
 5ae:	0f 91       	pop	r16
 5b0:	ff 90       	pop	r15
 5b2:	ef 90       	pop	r14
 5b4:	08 95       	ret

000005b6 <main>:

int main(void)
{
 5b6:	cf 93       	push	r28
 5b8:	df 93       	push	r29
 5ba:	cd b7       	in	r28, 0x3d	; 61
 5bc:	de b7       	in	r29, 0x3e	; 62
 5be:	64 97       	sbiw	r28, 0x14	; 20
 5c0:	0f b6       	in	r0, 0x3f	; 63
 5c2:	f8 94       	cli
 5c4:	de bf       	out	0x3e, r29	; 62
 5c6:	0f be       	out	0x3f, r0	; 63
 5c8:	cd bf       	out	0x3d, r28	; 61
	setup();
 5ca:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setup>
	/* Replace with your application code */
	
	while (1)
	{
		digitalWrite(pinReady , LOW);
 5ce:	60 e0       	ldi	r22, 0x00	; 0
 5d0:	70 e0       	ldi	r23, 0x00	; 0
 5d2:	85 e1       	ldi	r24, 0x15	; 21
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5da:	2f e7       	ldi	r18, 0x7F	; 127
 5dc:	88 e3       	ldi	r24, 0x38	; 56
 5de:	91 e0       	ldi	r25, 0x01	; 1
 5e0:	21 50       	subi	r18, 0x01	; 1
 5e2:	80 40       	sbci	r24, 0x00	; 0
 5e4:	90 40       	sbci	r25, 0x00	; 0
 5e6:	e1 f7       	brne	.-8      	; 0x5e0 <main+0x2a>
 5e8:	00 c0       	rjmp	.+0      	; 0x5ea <main+0x34>
 5ea:	00 00       	nop
		_delay_ms(50);
		digitalWrite(pinReady , HIGH);
 5ec:	61 e0       	ldi	r22, 0x01	; 1
 5ee:	70 e0       	ldi	r23, 0x00	; 0
 5f0:	85 e1       	ldi	r24, 0x15	; 21
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWrite>
 5f8:	2f e7       	ldi	r18, 0x7F	; 127
 5fa:	88 e3       	ldi	r24, 0x38	; 56
 5fc:	91 e0       	ldi	r25, 0x01	; 1
 5fe:	21 50       	subi	r18, 0x01	; 1
 600:	80 40       	sbci	r24, 0x00	; 0
 602:	90 40       	sbci	r25, 0x00	; 0
 604:	e1 f7       	brne	.-8      	; 0x5fe <main+0x48>
 606:	00 c0       	rjmp	.+0      	; 0x608 <main+0x52>
 608:	00 00       	nop
		_delay_ms(50);
		char str[20];
		int tmp = analogRead(frontIR);
 60a:	8d e0       	ldi	r24, 0x0D	; 13
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	0e 94 86 01 	call	0x30c	; 0x30c <analogRead>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 612:	4a e0       	ldi	r20, 0x0A	; 10
 614:	8e 01       	movw	r16, r28
 616:	0f 5f       	subi	r16, 0xFF	; 255
 618:	1f 4f       	sbci	r17, 0xFF	; 255
 61a:	b8 01       	movw	r22, r16
 61c:	0e 94 1c 04 	call	0x838	; 0x838 <__itoa_ncheck>
		itoa(tmp , str , 10);
		strcat(str , "\n");
 620:	f8 01       	movw	r30, r16
 622:	01 90       	ld	r0, Z+
 624:	00 20       	and	r0, r0
 626:	e9 f7       	brne	.-6      	; 0x622 <main+0x6c>
 628:	31 97       	sbiw	r30, 0x01	; 1
 62a:	8a e0       	ldi	r24, 0x0A	; 10
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	91 83       	std	Z+1, r25	; 0x01
 630:	80 83       	st	Z, r24
		printString(str);
 632:	c8 01       	movw	r24, r16
 634:	0e 94 b9 01 	call	0x372	; 0x372 <printString>
		int blocked = 0;
		if (blockingIR(rightIR) == blocking){
 638:	8c e0       	ldi	r24, 0x0C	; 12
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	0e 94 b4 02 	call	0x568	; 0x568 <blockingIR>
 640:	01 97       	sbiw	r24, 0x01	; 1
 642:	49 f4       	brne	.+18     	; 0x656 <main+0xa0>
			digitalWrite(pinLED[2] , LOW);
 644:	60 e0       	ldi	r22, 0x00	; 0
 646:	70 e0       	ldi	r23, 0x00	; 0
 648:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
 64c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
 650:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWrite>
 654:	08 c0       	rjmp	.+16     	; 0x666 <main+0xb0>
		}
		else{
			digitalWrite(pinLED[2] , HIGH);
 656:	61 e0       	ldi	r22, 0x01	; 1
 658:	70 e0       	ldi	r23, 0x00	; 0
 65a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
 65e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
 662:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWrite>
		}
		if (blockingIR(frontIR) == blocking){
 666:	8d e0       	ldi	r24, 0x0D	; 13
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	0e 94 b4 02 	call	0x568	; 0x568 <blockingIR>
 66e:	01 97       	sbiw	r24, 0x01	; 1
 670:	49 f4       	brne	.+18     	; 0x684 <main+0xce>
			digitalWrite(pinLED[1] , LOW);
 672:	60 e0       	ldi	r22, 0x00	; 0
 674:	70 e0       	ldi	r23, 0x00	; 0
 676:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 67a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 67e:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWrite>
 682:	08 c0       	rjmp	.+16     	; 0x694 <main+0xde>
		}
		else{
			digitalWrite(pinLED[1] , HIGH);
 684:	61 e0       	ldi	r22, 0x01	; 1
 686:	70 e0       	ldi	r23, 0x00	; 0
 688:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 68c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 690:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWrite>
		}
		
		if (blockingIR(frontIR) == blocking && blockingIR(rightIR) == blocking){
 694:	8d e0       	ldi	r24, 0x0D	; 13
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	0e 94 b4 02 	call	0x568	; 0x568 <blockingIR>
 69c:	01 97       	sbiw	r24, 0x01	; 1
 69e:	f1 f4       	brne	.+60     	; 0x6dc <main+0x126>
 6a0:	8c e0       	ldi	r24, 0x0C	; 12
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	0e 94 b4 02 	call	0x568	; 0x568 <blockingIR>
 6a8:	01 97       	sbiw	r24, 0x01	; 1
 6aa:	c1 f4       	brne	.+48     	; 0x6dc <main+0x126>
			blocked = 0;
			analogWrite(motorLeftA ,  0);
 6ac:	60 e0       	ldi	r22, 0x00	; 0
 6ae:	70 e0       	ldi	r23, 0x00	; 0
 6b0:	86 e0       	ldi	r24, 0x06	; 6
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	0e 94 54 01 	call	0x2a8	; 0x2a8 <analogWrite>
			analogWrite(motorLeftB ,  motorLeftSpeed);
 6b8:	68 ec       	ldi	r22, 0xC8	; 200
 6ba:	70 e0       	ldi	r23, 0x00	; 0
 6bc:	85 e0       	ldi	r24, 0x05	; 5
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	0e 94 54 01 	call	0x2a8	; 0x2a8 <analogWrite>
			analogWrite(motorRightA , motorRightSpeed);
 6c4:	62 ed       	ldi	r22, 0xD2	; 210
 6c6:	70 e0       	ldi	r23, 0x00	; 0
 6c8:	82 e1       	ldi	r24, 0x12	; 18
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	0e 94 54 01 	call	0x2a8	; 0x2a8 <analogWrite>
			analogWrite(motorRightB , 0);
 6d0:	60 e0       	ldi	r22, 0x00	; 0
 6d2:	70 e0       	ldi	r23, 0x00	; 0
 6d4:	83 e0       	ldi	r24, 0x03	; 3
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	0e 94 54 01 	call	0x2a8	; 0x2a8 <analogWrite>
		}
		if (blockingIR(frontIR) == blocking && blockingIR(rightIR) == clear ){
 6dc:	8d e0       	ldi	r24, 0x0D	; 13
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	0e 94 b4 02 	call	0x568	; 0x568 <blockingIR>
 6e4:	01 97       	sbiw	r24, 0x01	; 1
 6e6:	69 f5       	brne	.+90     	; 0x742 <main+0x18c>
 6e8:	8c e0       	ldi	r24, 0x0C	; 12
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	0e 94 b4 02 	call	0x568	; 0x568 <blockingIR>
 6f0:	89 2b       	or	r24, r25
 6f2:	39 f5       	brne	.+78     	; 0x742 <main+0x18c>
			
			turnLeft();
 6f4:	0e 94 90 02 	call	0x520	; 0x520 <turnLeft>
			turnLeft();
 6f8:	0e 94 90 02 	call	0x520	; 0x520 <turnLeft>
			analogWrite(motorLeftA , motorLeftSpeed);
 6fc:	68 ec       	ldi	r22, 0xC8	; 200
 6fe:	70 e0       	ldi	r23, 0x00	; 0
 700:	86 e0       	ldi	r24, 0x06	; 6
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	0e 94 54 01 	call	0x2a8	; 0x2a8 <analogWrite>
			analogWrite(motorLeftB , 0);
 708:	60 e0       	ldi	r22, 0x00	; 0
 70a:	70 e0       	ldi	r23, 0x00	; 0
 70c:	85 e0       	ldi	r24, 0x05	; 5
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	0e 94 54 01 	call	0x2a8	; 0x2a8 <analogWrite>
			analogWrite(motorRightA , motorRightSpeed);
 714:	62 ed       	ldi	r22, 0xD2	; 210
 716:	70 e0       	ldi	r23, 0x00	; 0
 718:	82 e1       	ldi	r24, 0x12	; 18
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	0e 94 54 01 	call	0x2a8	; 0x2a8 <analogWrite>
			analogWrite(motorRightB , 0);
 720:	60 e0       	ldi	r22, 0x00	; 0
 722:	70 e0       	ldi	r23, 0x00	; 0
 724:	83 e0       	ldi	r24, 0x03	; 3
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	0e 94 54 01 	call	0x2a8	; 0x2a8 <analogWrite>
 72c:	2f ef       	ldi	r18, 0xFF	; 255
 72e:	81 ee       	ldi	r24, 0xE1	; 225
 730:	94 e0       	ldi	r25, 0x04	; 4
 732:	21 50       	subi	r18, 0x01	; 1
 734:	80 40       	sbci	r24, 0x00	; 0
 736:	90 40       	sbci	r25, 0x00	; 0
 738:	e1 f7       	brne	.-8      	; 0x732 <main+0x17c>
 73a:	00 c0       	rjmp	.+0      	; 0x73c <main+0x186>
 73c:	00 00       	nop
			_delay_ms(200);
			stop();
 73e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <stop>
		}
		if (blockingIR(frontIR) == clear && blockingIR(rightIR) == blocking ){
 742:	8d e0       	ldi	r24, 0x0D	; 13
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	0e 94 b4 02 	call	0x568	; 0x568 <blockingIR>
 74a:	89 2b       	or	r24, r25
 74c:	f1 f4       	brne	.+60     	; 0x78a <main+0x1d4>
 74e:	8c e0       	ldi	r24, 0x0C	; 12
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	0e 94 b4 02 	call	0x568	; 0x568 <blockingIR>
 756:	01 97       	sbiw	r24, 0x01	; 1
 758:	c1 f4       	brne	.+48     	; 0x78a <main+0x1d4>
			blocked = 0;
			analogWrite(motorLeftA , motorLeftSpeed);
 75a:	68 ec       	ldi	r22, 0xC8	; 200
 75c:	70 e0       	ldi	r23, 0x00	; 0
 75e:	86 e0       	ldi	r24, 0x06	; 6
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	0e 94 54 01 	call	0x2a8	; 0x2a8 <analogWrite>
			analogWrite(motorLeftB , 0);
 766:	60 e0       	ldi	r22, 0x00	; 0
 768:	70 e0       	ldi	r23, 0x00	; 0
 76a:	85 e0       	ldi	r24, 0x05	; 5
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <analogWrite>
			analogWrite(motorRightA , motorRightSpeed);
 772:	62 ed       	ldi	r22, 0xD2	; 210
 774:	70 e0       	ldi	r23, 0x00	; 0
 776:	82 e1       	ldi	r24, 0x12	; 18
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <analogWrite>
			analogWrite(motorRightB , 0);
 77e:	60 e0       	ldi	r22, 0x00	; 0
 780:	70 e0       	ldi	r23, 0x00	; 0
 782:	83 e0       	ldi	r24, 0x03	; 3
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	0e 94 54 01 	call	0x2a8	; 0x2a8 <analogWrite>
		}
		if (blockingIR(frontIR) == clear && blockingIR(rightIR) == clear){
 78a:	8d e0       	ldi	r24, 0x0D	; 13
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	0e 94 b4 02 	call	0x568	; 0x568 <blockingIR>
 792:	89 2b       	or	r24, r25
 794:	09 f0       	breq	.+2      	; 0x798 <main+0x1e2>
 796:	1b cf       	rjmp	.-458    	; 0x5ce <main+0x18>
 798:	8c e0       	ldi	r24, 0x0C	; 12
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	0e 94 b4 02 	call	0x568	; 0x568 <blockingIR>
 7a0:	89 2b       	or	r24, r25
 7a2:	09 f0       	breq	.+2      	; 0x7a6 <main+0x1f0>
 7a4:	14 cf       	rjmp	.-472    	; 0x5ce <main+0x18>
			blocked +=1;
			analogWrite(motorLeftA , motorLeftSpeed);
 7a6:	68 ec       	ldi	r22, 0xC8	; 200
 7a8:	70 e0       	ldi	r23, 0x00	; 0
 7aa:	86 e0       	ldi	r24, 0x06	; 6
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	0e 94 54 01 	call	0x2a8	; 0x2a8 <analogWrite>
			analogWrite(motorLeftB , 0);
 7b2:	60 e0       	ldi	r22, 0x00	; 0
 7b4:	70 e0       	ldi	r23, 0x00	; 0
 7b6:	85 e0       	ldi	r24, 0x05	; 5
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	0e 94 54 01 	call	0x2a8	; 0x2a8 <analogWrite>
			analogWrite(motorRightA , motorRightSpeed);
 7be:	62 ed       	ldi	r22, 0xD2	; 210
 7c0:	70 e0       	ldi	r23, 0x00	; 0
 7c2:	82 e1       	ldi	r24, 0x12	; 18
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	0e 94 54 01 	call	0x2a8	; 0x2a8 <analogWrite>
			analogWrite(motorRightB , 0);
 7ca:	60 e0       	ldi	r22, 0x00	; 0
 7cc:	70 e0       	ldi	r23, 0x00	; 0
 7ce:	83 e0       	ldi	r24, 0x03	; 3
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	0e 94 54 01 	call	0x2a8	; 0x2a8 <analogWrite>
 7d6:	2f ef       	ldi	r18, 0xFF	; 255
 7d8:	80 e7       	ldi	r24, 0x70	; 112
 7da:	92 e0       	ldi	r25, 0x02	; 2
 7dc:	21 50       	subi	r18, 0x01	; 1
 7de:	80 40       	sbci	r24, 0x00	; 0
 7e0:	90 40       	sbci	r25, 0x00	; 0
 7e2:	e1 f7       	brne	.-8      	; 0x7dc <main+0x226>
 7e4:	00 c0       	rjmp	.+0      	; 0x7e6 <main+0x230>
 7e6:	00 00       	nop
			_delay_ms(100);
			stop();
 7e8:	0e 94 53 02 	call	0x4a6	; 0x4a6 <stop>
			turnRight();
 7ec:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <turnRight>
			analogWrite(motorLeftA , motorLeftSpeed);
 7f0:	68 ec       	ldi	r22, 0xC8	; 200
 7f2:	70 e0       	ldi	r23, 0x00	; 0
 7f4:	86 e0       	ldi	r24, 0x06	; 6
 7f6:	90 e0       	ldi	r25, 0x00	; 0
 7f8:	0e 94 54 01 	call	0x2a8	; 0x2a8 <analogWrite>
			analogWrite(motorLeftB , 0);
 7fc:	60 e0       	ldi	r22, 0x00	; 0
 7fe:	70 e0       	ldi	r23, 0x00	; 0
 800:	85 e0       	ldi	r24, 0x05	; 5
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	0e 94 54 01 	call	0x2a8	; 0x2a8 <analogWrite>
			analogWrite(motorRightA , motorRightSpeed);
 808:	62 ed       	ldi	r22, 0xD2	; 210
 80a:	70 e0       	ldi	r23, 0x00	; 0
 80c:	82 e1       	ldi	r24, 0x12	; 18
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	0e 94 54 01 	call	0x2a8	; 0x2a8 <analogWrite>
			analogWrite(motorRightB , 0);
 814:	60 e0       	ldi	r22, 0x00	; 0
 816:	70 e0       	ldi	r23, 0x00	; 0
 818:	83 e0       	ldi	r24, 0x03	; 3
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	0e 94 54 01 	call	0x2a8	; 0x2a8 <analogWrite>
 820:	2f ef       	ldi	r18, 0xFF	; 255
 822:	86 e1       	ldi	r24, 0x16	; 22
 824:	91 e1       	ldi	r25, 0x11	; 17
 826:	21 50       	subi	r18, 0x01	; 1
 828:	80 40       	sbci	r24, 0x00	; 0
 82a:	90 40       	sbci	r25, 0x00	; 0
 82c:	e1 f7       	brne	.-8      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 82e:	00 c0       	rjmp	.+0      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 830:	00 00       	nop
			_delay_ms(700);
			stop();
 832:	0e 94 53 02 	call	0x4a6	; 0x4a6 <stop>
		}
	}
 836:	cb ce       	rjmp	.-618    	; 0x5ce <main+0x18>

00000838 <__itoa_ncheck>:
 838:	bb 27       	eor	r27, r27
 83a:	4a 30       	cpi	r20, 0x0A	; 10
 83c:	31 f4       	brne	.+12     	; 0x84a <__itoa_ncheck+0x12>
 83e:	99 23       	and	r25, r25
 840:	22 f4       	brpl	.+8      	; 0x84a <__itoa_ncheck+0x12>
 842:	bd e2       	ldi	r27, 0x2D	; 45
 844:	90 95       	com	r25
 846:	81 95       	neg	r24
 848:	9f 4f       	sbci	r25, 0xFF	; 255
 84a:	0c 94 28 04 	jmp	0x850	; 0x850 <__utoa_common>

0000084e <__utoa_ncheck>:
 84e:	bb 27       	eor	r27, r27

00000850 <__utoa_common>:
 850:	fb 01       	movw	r30, r22
 852:	55 27       	eor	r21, r21
 854:	aa 27       	eor	r26, r26
 856:	88 0f       	add	r24, r24
 858:	99 1f       	adc	r25, r25
 85a:	aa 1f       	adc	r26, r26
 85c:	a4 17       	cp	r26, r20
 85e:	10 f0       	brcs	.+4      	; 0x864 <__utoa_common+0x14>
 860:	a4 1b       	sub	r26, r20
 862:	83 95       	inc	r24
 864:	50 51       	subi	r21, 0x10	; 16
 866:	b9 f7       	brne	.-18     	; 0x856 <__utoa_common+0x6>
 868:	a0 5d       	subi	r26, 0xD0	; 208
 86a:	aa 33       	cpi	r26, 0x3A	; 58
 86c:	08 f0       	brcs	.+2      	; 0x870 <__utoa_common+0x20>
 86e:	a9 5d       	subi	r26, 0xD9	; 217
 870:	a1 93       	st	Z+, r26
 872:	00 97       	sbiw	r24, 0x00	; 0
 874:	79 f7       	brne	.-34     	; 0x854 <__utoa_common+0x4>
 876:	b1 11       	cpse	r27, r1
 878:	b1 93       	st	Z+, r27
 87a:	11 92       	st	Z+, r1
 87c:	cb 01       	movw	r24, r22
 87e:	0c 94 41 04 	jmp	0x882	; 0x882 <strrev>

00000882 <strrev>:
 882:	dc 01       	movw	r26, r24
 884:	fc 01       	movw	r30, r24
 886:	67 2f       	mov	r22, r23
 888:	71 91       	ld	r23, Z+
 88a:	77 23       	and	r23, r23
 88c:	e1 f7       	brne	.-8      	; 0x886 <strrev+0x4>
 88e:	32 97       	sbiw	r30, 0x02	; 2
 890:	04 c0       	rjmp	.+8      	; 0x89a <strrev+0x18>
 892:	7c 91       	ld	r23, X
 894:	6d 93       	st	X+, r22
 896:	70 83       	st	Z, r23
 898:	62 91       	ld	r22, -Z
 89a:	ae 17       	cp	r26, r30
 89c:	bf 07       	cpc	r27, r31
 89e:	c8 f3       	brcs	.-14     	; 0x892 <strrev+0x10>
 8a0:	08 95       	ret

000008a2 <_exit>:
 8a2:	f8 94       	cli

000008a4 <__stop_program>:
 8a4:	ff cf       	rjmp	.-2      	; 0x8a4 <__stop_program>
