
testDMS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000ebc  00000f30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ebc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000f3e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f70  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001ba1  00000000  00000000  00001010  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000083d  00000000  00000000  00002bb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000088b  00000000  00000000  000033ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d4  00000000  00000000  00003c7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000484  00000000  00000000  00003d50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008dc  00000000  00000000  000041d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00004ab0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec eb       	ldi	r30, 0xBC	; 188
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 c1 04 	call	0x982	; 0x982 <main>
  8e:	0c 94 5c 07 	jmp	0xeb8	; 0xeb8 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <digitalWrite>:
		return 1;
	}
	else {
		return 0;
	}
}
  96:	61 15       	cp	r22, r1
  98:	71 05       	cpc	r23, r1
  9a:	e1 f5       	brne	.+120    	; 0x114 <digitalWrite+0x7e>
  9c:	88 30       	cpi	r24, 0x08	; 8
  9e:	91 05       	cpc	r25, r1
  a0:	70 f4       	brcc	.+28     	; 0xbe <digitalWrite+0x28>
  a2:	4b b1       	in	r20, 0x0b	; 11
  a4:	21 e0       	ldi	r18, 0x01	; 1
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	b9 01       	movw	r22, r18
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <digitalWrite+0x1a>
  ac:	66 0f       	add	r22, r22
  ae:	77 1f       	adc	r23, r23
  b0:	8a 95       	dec	r24
  b2:	e2 f7       	brpl	.-8      	; 0xac <digitalWrite+0x16>
  b4:	cb 01       	movw	r24, r22
  b6:	80 95       	com	r24
  b8:	84 23       	and	r24, r20
  ba:	8b b9       	out	0x0b, r24	; 11
  bc:	08 95       	ret
  be:	9c 01       	movw	r18, r24
  c0:	28 50       	subi	r18, 0x08	; 8
  c2:	31 09       	sbc	r19, r1
  c4:	27 30       	cpi	r18, 0x07	; 7
  c6:	31 05       	cpc	r19, r1
  c8:	78 f4       	brcc	.+30     	; 0xe8 <digitalWrite+0x52>
  ca:	48 b1       	in	r20, 0x08	; 8
  cc:	c9 01       	movw	r24, r18
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	b9 01       	movw	r22, r18
  d4:	02 c0       	rjmp	.+4      	; 0xda <digitalWrite+0x44>
  d6:	66 0f       	add	r22, r22
  d8:	77 1f       	adc	r23, r23
  da:	8a 95       	dec	r24
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <digitalWrite+0x40>
  de:	cb 01       	movw	r24, r22
  e0:	80 95       	com	r24
  e2:	84 23       	and	r24, r20
  e4:	88 b9       	out	0x08, r24	; 8
  e6:	08 95       	ret
  e8:	9c 01       	movw	r18, r24
  ea:	2f 50       	subi	r18, 0x0F	; 15
  ec:	31 09       	sbc	r19, r1
  ee:	28 30       	cpi	r18, 0x08	; 8
  f0:	31 05       	cpc	r19, r1
  f2:	08 f0       	brcs	.+2      	; 0xf6 <digitalWrite+0x60>
  f4:	49 c0       	rjmp	.+146    	; 0x188 <digitalWrite+0xf2>
  f6:	45 b1       	in	r20, 0x05	; 5
  f8:	c9 01       	movw	r24, r18
  fa:	21 e0       	ldi	r18, 0x01	; 1
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	b9 01       	movw	r22, r18
 100:	02 c0       	rjmp	.+4      	; 0x106 <digitalWrite+0x70>
 102:	66 0f       	add	r22, r22
 104:	77 1f       	adc	r23, r23
 106:	8a 95       	dec	r24
 108:	e2 f7       	brpl	.-8      	; 0x102 <digitalWrite+0x6c>
 10a:	cb 01       	movw	r24, r22
 10c:	80 95       	com	r24
 10e:	84 23       	and	r24, r20
 110:	85 b9       	out	0x05, r24	; 5
 112:	08 95       	ret
 114:	61 30       	cpi	r22, 0x01	; 1
 116:	71 05       	cpc	r23, r1
 118:	b9 f5       	brne	.+110    	; 0x188 <digitalWrite+0xf2>
 11a:	88 30       	cpi	r24, 0x08	; 8
 11c:	91 05       	cpc	r25, r1
 11e:	68 f4       	brcc	.+26     	; 0x13a <digitalWrite+0xa4>
 120:	4b b1       	in	r20, 0x0b	; 11
 122:	21 e0       	ldi	r18, 0x01	; 1
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	b9 01       	movw	r22, r18
 128:	02 c0       	rjmp	.+4      	; 0x12e <digitalWrite+0x98>
 12a:	66 0f       	add	r22, r22
 12c:	77 1f       	adc	r23, r23
 12e:	8a 95       	dec	r24
 130:	e2 f7       	brpl	.-8      	; 0x12a <digitalWrite+0x94>
 132:	cb 01       	movw	r24, r22
 134:	84 2b       	or	r24, r20
 136:	8b b9       	out	0x0b, r24	; 11
 138:	08 95       	ret
 13a:	9c 01       	movw	r18, r24
 13c:	28 50       	subi	r18, 0x08	; 8
 13e:	31 09       	sbc	r19, r1
 140:	27 30       	cpi	r18, 0x07	; 7
 142:	31 05       	cpc	r19, r1
 144:	70 f4       	brcc	.+28     	; 0x162 <digitalWrite+0xcc>
 146:	48 b1       	in	r20, 0x08	; 8
 148:	c9 01       	movw	r24, r18
 14a:	21 e0       	ldi	r18, 0x01	; 1
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	b9 01       	movw	r22, r18
 150:	02 c0       	rjmp	.+4      	; 0x156 <digitalWrite+0xc0>
 152:	66 0f       	add	r22, r22
 154:	77 1f       	adc	r23, r23
 156:	8a 95       	dec	r24
 158:	e2 f7       	brpl	.-8      	; 0x152 <digitalWrite+0xbc>
 15a:	cb 01       	movw	r24, r22
 15c:	84 2b       	or	r24, r20
 15e:	88 b9       	out	0x08, r24	; 8
 160:	08 95       	ret
 162:	9c 01       	movw	r18, r24
 164:	2f 50       	subi	r18, 0x0F	; 15
 166:	31 09       	sbc	r19, r1
 168:	28 30       	cpi	r18, 0x08	; 8
 16a:	31 05       	cpc	r19, r1
 16c:	68 f4       	brcc	.+26     	; 0x188 <digitalWrite+0xf2>
 16e:	45 b1       	in	r20, 0x05	; 5
 170:	c9 01       	movw	r24, r18
 172:	21 e0       	ldi	r18, 0x01	; 1
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	b9 01       	movw	r22, r18
 178:	02 c0       	rjmp	.+4      	; 0x17e <digitalWrite+0xe8>
 17a:	66 0f       	add	r22, r22
 17c:	77 1f       	adc	r23, r23
 17e:	8a 95       	dec	r24
 180:	e2 f7       	brpl	.-8      	; 0x17a <digitalWrite+0xe4>
 182:	cb 01       	movw	r24, r22
 184:	84 2b       	or	r24, r20
 186:	85 b9       	out	0x05, r24	; 5
 188:	08 95       	ret

0000018a <pinMode>:
 18a:	61 15       	cp	r22, r1
 18c:	71 05       	cpc	r23, r1
 18e:	09 f0       	breq	.+2      	; 0x192 <pinMode+0x8>
 190:	48 c0       	rjmp	.+144    	; 0x222 <pinMode+0x98>
 192:	88 30       	cpi	r24, 0x08	; 8
 194:	91 05       	cpc	r25, r1
 196:	90 f4       	brcc	.+36     	; 0x1bc <pinMode+0x32>
 198:	4a b1       	in	r20, 0x0a	; 10
 19a:	21 e0       	ldi	r18, 0x01	; 1
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	b9 01       	movw	r22, r18
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <pinMode+0x1c>
 1a2:	66 0f       	add	r22, r22
 1a4:	77 1f       	adc	r23, r23
 1a6:	8a 95       	dec	r24
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <pinMode+0x18>
 1aa:	cb 01       	movw	r24, r22
 1ac:	96 2f       	mov	r25, r22
 1ae:	90 95       	com	r25
 1b0:	94 23       	and	r25, r20
 1b2:	9a b9       	out	0x0a, r25	; 10
 1b4:	9b b1       	in	r25, 0x0b	; 11
 1b6:	89 2b       	or	r24, r25
 1b8:	8b b9       	out	0x0b, r24	; 11
 1ba:	08 95       	ret
 1bc:	9c 01       	movw	r18, r24
 1be:	28 50       	subi	r18, 0x08	; 8
 1c0:	31 09       	sbc	r19, r1
 1c2:	27 30       	cpi	r18, 0x07	; 7
 1c4:	31 05       	cpc	r19, r1
 1c6:	98 f4       	brcc	.+38     	; 0x1ee <pinMode+0x64>
 1c8:	47 b1       	in	r20, 0x07	; 7
 1ca:	c9 01       	movw	r24, r18
 1cc:	21 e0       	ldi	r18, 0x01	; 1
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	b9 01       	movw	r22, r18
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <pinMode+0x4e>
 1d4:	66 0f       	add	r22, r22
 1d6:	77 1f       	adc	r23, r23
 1d8:	8a 95       	dec	r24
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <pinMode+0x4a>
 1dc:	cb 01       	movw	r24, r22
 1de:	96 2f       	mov	r25, r22
 1e0:	90 95       	com	r25
 1e2:	94 23       	and	r25, r20
 1e4:	97 b9       	out	0x07, r25	; 7
 1e6:	98 b1       	in	r25, 0x08	; 8
 1e8:	89 2b       	or	r24, r25
 1ea:	88 b9       	out	0x08, r24	; 8
 1ec:	08 95       	ret
 1ee:	9c 01       	movw	r18, r24
 1f0:	2f 50       	subi	r18, 0x0F	; 15
 1f2:	31 09       	sbc	r19, r1
 1f4:	28 30       	cpi	r18, 0x08	; 8
 1f6:	31 05       	cpc	r19, r1
 1f8:	08 f0       	brcs	.+2      	; 0x1fc <pinMode+0x72>
 1fa:	4d c0       	rjmp	.+154    	; 0x296 <pinMode+0x10c>
 1fc:	44 b1       	in	r20, 0x04	; 4
 1fe:	c9 01       	movw	r24, r18
 200:	21 e0       	ldi	r18, 0x01	; 1
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	b9 01       	movw	r22, r18
 206:	02 c0       	rjmp	.+4      	; 0x20c <pinMode+0x82>
 208:	66 0f       	add	r22, r22
 20a:	77 1f       	adc	r23, r23
 20c:	8a 95       	dec	r24
 20e:	e2 f7       	brpl	.-8      	; 0x208 <pinMode+0x7e>
 210:	cb 01       	movw	r24, r22
 212:	96 2f       	mov	r25, r22
 214:	90 95       	com	r25
 216:	94 23       	and	r25, r20
 218:	94 b9       	out	0x04, r25	; 4
 21a:	95 b1       	in	r25, 0x05	; 5
 21c:	89 2b       	or	r24, r25
 21e:	85 b9       	out	0x05, r24	; 5
 220:	08 95       	ret
 222:	61 30       	cpi	r22, 0x01	; 1
 224:	71 05       	cpc	r23, r1
 226:	b9 f5       	brne	.+110    	; 0x296 <pinMode+0x10c>
 228:	88 30       	cpi	r24, 0x08	; 8
 22a:	91 05       	cpc	r25, r1
 22c:	68 f4       	brcc	.+26     	; 0x248 <pinMode+0xbe>
 22e:	4a b1       	in	r20, 0x0a	; 10
 230:	21 e0       	ldi	r18, 0x01	; 1
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	b9 01       	movw	r22, r18
 236:	02 c0       	rjmp	.+4      	; 0x23c <pinMode+0xb2>
 238:	66 0f       	add	r22, r22
 23a:	77 1f       	adc	r23, r23
 23c:	8a 95       	dec	r24
 23e:	e2 f7       	brpl	.-8      	; 0x238 <pinMode+0xae>
 240:	cb 01       	movw	r24, r22
 242:	84 2b       	or	r24, r20
 244:	8a b9       	out	0x0a, r24	; 10
 246:	08 95       	ret
 248:	9c 01       	movw	r18, r24
 24a:	28 50       	subi	r18, 0x08	; 8
 24c:	31 09       	sbc	r19, r1
 24e:	27 30       	cpi	r18, 0x07	; 7
 250:	31 05       	cpc	r19, r1
 252:	70 f4       	brcc	.+28     	; 0x270 <pinMode+0xe6>
 254:	47 b1       	in	r20, 0x07	; 7
 256:	c9 01       	movw	r24, r18
 258:	21 e0       	ldi	r18, 0x01	; 1
 25a:	30 e0       	ldi	r19, 0x00	; 0
 25c:	b9 01       	movw	r22, r18
 25e:	02 c0       	rjmp	.+4      	; 0x264 <pinMode+0xda>
 260:	66 0f       	add	r22, r22
 262:	77 1f       	adc	r23, r23
 264:	8a 95       	dec	r24
 266:	e2 f7       	brpl	.-8      	; 0x260 <pinMode+0xd6>
 268:	cb 01       	movw	r24, r22
 26a:	84 2b       	or	r24, r20
 26c:	87 b9       	out	0x07, r24	; 7
 26e:	08 95       	ret
 270:	9c 01       	movw	r18, r24
 272:	2f 50       	subi	r18, 0x0F	; 15
 274:	31 09       	sbc	r19, r1
 276:	28 30       	cpi	r18, 0x08	; 8
 278:	31 05       	cpc	r19, r1
 27a:	68 f4       	brcc	.+26     	; 0x296 <pinMode+0x10c>
 27c:	44 b1       	in	r20, 0x04	; 4
 27e:	c9 01       	movw	r24, r18
 280:	21 e0       	ldi	r18, 0x01	; 1
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	b9 01       	movw	r22, r18
 286:	02 c0       	rjmp	.+4      	; 0x28c <pinMode+0x102>
 288:	66 0f       	add	r22, r22
 28a:	77 1f       	adc	r23, r23
 28c:	8a 95       	dec	r24
 28e:	e2 f7       	brpl	.-8      	; 0x288 <pinMode+0xfe>
 290:	cb 01       	movw	r24, r22
 292:	84 2b       	or	r24, r20
 294:	84 b9       	out	0x04, r24	; 4
 296:	08 95       	ret

00000298 <readDistance>:
int readDistance()
{
	int adcHigh,adcLow;
	int voltage;
	int distance;
	ADCSRA|=(1<<ADIF); // clear ADIF
 298:	ea e7       	ldi	r30, 0x7A	; 122
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	80 81       	ld	r24, Z
 29e:	80 61       	ori	r24, 0x10	; 16
 2a0:	80 83       	st	Z, r24
	ADCSRA|=(1<<ADSC); // start ADC
 2a2:	80 81       	ld	r24, Z
 2a4:	80 64       	ori	r24, 0x40	; 64
 2a6:	80 83       	st	Z, r24
	while((ADCSRA&(1<<ADIF))==0); // wait for ADC done
 2a8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 2ac:	84 ff       	sbrs	r24, 4
 2ae:	fc cf       	rjmp	.-8      	; 0x2a8 <readDistance+0x10>
	adcLow=ADCL;
 2b0:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
	adcHigh=ADCH;
 2b4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 2b8:	90 e0       	ldi	r25, 0x00	; 0
	voltage=adcHigh*256+adcLow;
 2ba:	98 2f       	mov	r25, r24
 2bc:	88 27       	eor	r24, r24
	}
	else {
		distance = 0;
	}
	return voltage;
}
 2be:	82 0f       	add	r24, r18
 2c0:	91 1d       	adc	r25, r1
 2c2:	08 95       	ret

000002c4 <USART_putstring>:

void USART_putstring(char* StringPtr)
{
 2c4:	fc 01       	movw	r30, r24
	while(*StringPtr != 0x00){
 2c6:	07 c0       	rjmp	.+14     	; 0x2d6 <USART_putstring+0x12>
		while(!(UCSR0A & (1<<UDRE0)));
 2c8:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2cc:	95 ff       	sbrs	r25, 5
 2ce:	fc cf       	rjmp	.-8      	; 0x2c8 <USART_putstring+0x4>
		UDR0 = *StringPtr;
 2d0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		StringPtr++;
 2d4:	31 96       	adiw	r30, 0x01	; 1
	return voltage;
}

void USART_putstring(char* StringPtr)
{
	while(*StringPtr != 0x00){
 2d6:	80 81       	ld	r24, Z
 2d8:	81 11       	cpse	r24, r1
 2da:	f6 cf       	rjmp	.-20     	; 0x2c8 <USART_putstring+0x4>
		while(!(UCSR0A & (1<<UDRE0)));
		UDR0 = *StringPtr;
		StringPtr++;
	}
}
 2dc:	08 95       	ret

000002de <print>:
void print()
{
 2de:	cf 92       	push	r12
 2e0:	df 92       	push	r13
 2e2:	ef 92       	push	r14
 2e4:	ff 92       	push	r15
 2e6:	0f 93       	push	r16
 2e8:	1f 93       	push	r17
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
 2ee:	cd b7       	in	r28, 0x3d	; 61
 2f0:	de b7       	in	r29, 0x3e	; 62
 2f2:	65 97       	sbiw	r28, 0x15	; 21
 2f4:	0f b6       	in	r0, 0x3f	; 63
 2f6:	f8 94       	cli
 2f8:	de bf       	out	0x3e, r29	; 62
 2fa:	0f be       	out	0x3f, r0	; 63
 2fc:	cd bf       	out	0x3d, r28	; 61
	float sumVal = 0;
	char Buffer[8];
	for(int i = 0; i < 10; i++){
 2fe:	00 e0       	ldi	r16, 0x00	; 0
 300:	10 e0       	ldi	r17, 0x00	; 0
		StringPtr++;
	}
}
void print()
{
	float sumVal = 0;
 302:	c1 2c       	mov	r12, r1
 304:	d1 2c       	mov	r13, r1
 306:	76 01       	movw	r14, r12
	char Buffer[8];
	for(int i = 0; i < 10; i++){
 308:	12 c0       	rjmp	.+36     	; 0x32e <print+0x50>
		sumVal += (float)readDistance();
 30a:	0e 94 4c 01 	call	0x298	; 0x298 <readDistance>
 30e:	bc 01       	movw	r22, r24
 310:	99 0f       	add	r25, r25
 312:	88 0b       	sbc	r24, r24
 314:	99 0b       	sbc	r25, r25
 316:	0e 94 73 06 	call	0xce6	; 0xce6 <__floatsisf>
 31a:	9b 01       	movw	r18, r22
 31c:	ac 01       	movw	r20, r24
 31e:	c7 01       	movw	r24, r14
 320:	b6 01       	movw	r22, r12
 322:	0e 94 5d 05 	call	0xaba	; 0xaba <__addsf3>
 326:	6b 01       	movw	r12, r22
 328:	7c 01       	movw	r14, r24
}
void print()
{
	float sumVal = 0;
	char Buffer[8];
	for(int i = 0; i < 10; i++){
 32a:	0f 5f       	subi	r16, 0xFF	; 255
 32c:	1f 4f       	sbci	r17, 0xFF	; 255
 32e:	0a 30       	cpi	r16, 0x0A	; 10
 330:	11 05       	cpc	r17, r1
 332:	5c f3       	brlt	.-42     	; 0x30a <print+0x2c>
		sumVal += (float)readDistance();
	}
	sumVal /= 10; //mean of 10 readings
 334:	20 e0       	ldi	r18, 0x00	; 0
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	40 e2       	ldi	r20, 0x20	; 32
 33a:	51 e4       	ldi	r21, 0x41	; 65
 33c:	c7 01       	movw	r24, r14
 33e:	b6 01       	movw	r22, r12
 340:	0e 94 c9 05 	call	0xb92	; 0xb92 <__divsf3>
	char *intStr = itoa((int)sumVal, Buffer, 10);
 344:	0e 94 3b 06 	call	0xc76	; 0xc76 <__fixsfsi>
 348:	dc 01       	movw	r26, r24
 34a:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 34c:	4a e0       	ldi	r20, 0x0A	; 10
 34e:	be 01       	movw	r22, r28
 350:	6f 5f       	subi	r22, 0xFF	; 255
 352:	7f 4f       	sbci	r23, 0xFF	; 255
 354:	0e 94 27 07 	call	0xe4e	; 0xe4e <__itoa_ncheck>
	strcat(intStr, "\n");
 358:	fc 01       	movw	r30, r24
 35a:	01 90       	ld	r0, Z+
 35c:	00 20       	and	r0, r0
 35e:	e9 f7       	brne	.-6      	; 0x35a <print+0x7c>
 360:	31 97       	sbiw	r30, 0x01	; 1
 362:	2a e0       	ldi	r18, 0x0A	; 10
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	31 83       	std	Z+1, r19	; 0x01
 368:	20 83       	st	Z, r18
	USART_putstring(intStr);
 36a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <USART_putstring>
	char string[] = "Hello World\n";
 36e:	8d e0       	ldi	r24, 0x0D	; 13
 370:	e0 e0       	ldi	r30, 0x00	; 0
 372:	f1 e0       	ldi	r31, 0x01	; 1
 374:	de 01       	movw	r26, r28
 376:	19 96       	adiw	r26, 0x09	; 9
 378:	01 90       	ld	r0, Z+
 37a:	0d 92       	st	X+, r0
 37c:	8a 95       	dec	r24
 37e:	e1 f7       	brne	.-8      	; 0x378 <print+0x9a>
	USART_putstring(string);
 380:	ce 01       	movw	r24, r28
 382:	09 96       	adiw	r24, 0x09	; 9
 384:	0e 94 62 01 	call	0x2c4	; 0x2c4 <USART_putstring>
	
}
 388:	65 96       	adiw	r28, 0x15	; 21
 38a:	0f b6       	in	r0, 0x3f	; 63
 38c:	f8 94       	cli
 38e:	de bf       	out	0x3e, r29	; 62
 390:	0f be       	out	0x3f, r0	; 63
 392:	cd bf       	out	0x3d, r28	; 61
 394:	df 91       	pop	r29
 396:	cf 91       	pop	r28
 398:	1f 91       	pop	r17
 39a:	0f 91       	pop	r16
 39c:	ff 90       	pop	r15
 39e:	ef 90       	pop	r14
 3a0:	df 90       	pop	r13
 3a2:	cf 90       	pop	r12
 3a4:	08 95       	ret

000003a6 <displayCharacter1>:

void displayCharacter1(char ch){
	if (ch == '1'){
 3a6:	81 33       	cpi	r24, 0x31	; 49
 3a8:	69 f4       	brne	.+26     	; 0x3c4 <displayCharacter1+0x1e>
		digitalWrite(10 , LOW);
 3aa:	60 e0       	ldi	r22, 0x00	; 0
 3ac:	70 e0       	ldi	r23, 0x00	; 0
 3ae:	8a e0       	ldi	r24, 0x0A	; 10
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(2 , LOW);
 3b6:	60 e0       	ldi	r22, 0x00	; 0
 3b8:	70 e0       	ldi	r23, 0x00	; 0
 3ba:	82 e0       	ldi	r24, 0x02	; 2
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
 3c2:	08 95       	ret
	}
	else if (ch == '2'){
 3c4:	82 33       	cpi	r24, 0x32	; 50
 3c6:	f9 f4       	brne	.+62     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
		digitalWrite(9 , LOW);
 3c8:	60 e0       	ldi	r22, 0x00	; 0
 3ca:	70 e0       	ldi	r23, 0x00	; 0
 3cc:	89 e0       	ldi	r24, 0x09	; 9
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(10 , LOW);
 3d4:	60 e0       	ldi	r22, 0x00	; 0
 3d6:	70 e0       	ldi	r23, 0x00	; 0
 3d8:	8a e0       	ldi	r24, 0x0A	; 10
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(6 , LOW);
 3e0:	60 e0       	ldi	r22, 0x00	; 0
 3e2:	70 e0       	ldi	r23, 0x00	; 0
 3e4:	86 e0       	ldi	r24, 0x06	; 6
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(4 , LOW);
 3ec:	60 e0       	ldi	r22, 0x00	; 0
 3ee:	70 e0       	ldi	r23, 0x00	; 0
 3f0:	84 e0       	ldi	r24, 0x04	; 4
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(3 , LOW);
 3f8:	60 e0       	ldi	r22, 0x00	; 0
 3fa:	70 e0       	ldi	r23, 0x00	; 0
 3fc:	83 e0       	ldi	r24, 0x03	; 3
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
 404:	08 95       	ret
	}
	else if (ch == '3'){
 406:	83 33       	cpi	r24, 0x33	; 51
 408:	f9 f4       	brne	.+62     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
		digitalWrite(9 , LOW);
 40a:	60 e0       	ldi	r22, 0x00	; 0
 40c:	70 e0       	ldi	r23, 0x00	; 0
 40e:	89 e0       	ldi	r24, 0x09	; 9
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(10 , LOW);
 416:	60 e0       	ldi	r22, 0x00	; 0
 418:	70 e0       	ldi	r23, 0x00	; 0
 41a:	8a e0       	ldi	r24, 0x0A	; 10
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(6 , LOW);
 422:	60 e0       	ldi	r22, 0x00	; 0
 424:	70 e0       	ldi	r23, 0x00	; 0
 426:	86 e0       	ldi	r24, 0x06	; 6
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(2 , LOW);
 42e:	60 e0       	ldi	r22, 0x00	; 0
 430:	70 e0       	ldi	r23, 0x00	; 0
 432:	82 e0       	ldi	r24, 0x02	; 2
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(3 , LOW);
 43a:	60 e0       	ldi	r22, 0x00	; 0
 43c:	70 e0       	ldi	r23, 0x00	; 0
 43e:	83 e0       	ldi	r24, 0x03	; 3
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
 446:	08 95       	ret
	}
	else if (ch == '4'){
 448:	84 33       	cpi	r24, 0x34	; 52
 44a:	c9 f4       	brne	.+50     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
		digitalWrite(5 , LOW);
 44c:	60 e0       	ldi	r22, 0x00	; 0
 44e:	70 e0       	ldi	r23, 0x00	; 0
 450:	85 e0       	ldi	r24, 0x05	; 5
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(6 , LOW);
 458:	60 e0       	ldi	r22, 0x00	; 0
 45a:	70 e0       	ldi	r23, 0x00	; 0
 45c:	86 e0       	ldi	r24, 0x06	; 6
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(10 , LOW);
 464:	60 e0       	ldi	r22, 0x00	; 0
 466:	70 e0       	ldi	r23, 0x00	; 0
 468:	8a e0       	ldi	r24, 0x0A	; 10
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(2 , LOW);
 470:	60 e0       	ldi	r22, 0x00	; 0
 472:	70 e0       	ldi	r23, 0x00	; 0
 474:	82 e0       	ldi	r24, 0x02	; 2
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
 47c:	08 95       	ret
	}
	else if (ch == '5'){
 47e:	85 33       	cpi	r24, 0x35	; 53
 480:	f9 f4       	brne	.+62     	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
		digitalWrite(9 , LOW);
 482:	60 e0       	ldi	r22, 0x00	; 0
 484:	70 e0       	ldi	r23, 0x00	; 0
 486:	89 e0       	ldi	r24, 0x09	; 9
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(5 , LOW);
 48e:	60 e0       	ldi	r22, 0x00	; 0
 490:	70 e0       	ldi	r23, 0x00	; 0
 492:	85 e0       	ldi	r24, 0x05	; 5
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(6 , LOW);
 49a:	60 e0       	ldi	r22, 0x00	; 0
 49c:	70 e0       	ldi	r23, 0x00	; 0
 49e:	86 e0       	ldi	r24, 0x06	; 6
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(2 , LOW);
 4a6:	60 e0       	ldi	r22, 0x00	; 0
 4a8:	70 e0       	ldi	r23, 0x00	; 0
 4aa:	82 e0       	ldi	r24, 0x02	; 2
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(3 , LOW);
 4b2:	60 e0       	ldi	r22, 0x00	; 0
 4b4:	70 e0       	ldi	r23, 0x00	; 0
 4b6:	83 e0       	ldi	r24, 0x03	; 3
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
 4be:	08 95       	ret
	}
	else if (ch == '6'){
 4c0:	86 33       	cpi	r24, 0x36	; 54
 4c2:	29 f5       	brne	.+74     	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
		digitalWrite(9 , LOW);
 4c4:	60 e0       	ldi	r22, 0x00	; 0
 4c6:	70 e0       	ldi	r23, 0x00	; 0
 4c8:	89 e0       	ldi	r24, 0x09	; 9
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(5 , LOW);
 4d0:	60 e0       	ldi	r22, 0x00	; 0
 4d2:	70 e0       	ldi	r23, 0x00	; 0
 4d4:	85 e0       	ldi	r24, 0x05	; 5
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(6 , LOW);
 4dc:	60 e0       	ldi	r22, 0x00	; 0
 4de:	70 e0       	ldi	r23, 0x00	; 0
 4e0:	86 e0       	ldi	r24, 0x06	; 6
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(2 , LOW);
 4e8:	60 e0       	ldi	r22, 0x00	; 0
 4ea:	70 e0       	ldi	r23, 0x00	; 0
 4ec:	82 e0       	ldi	r24, 0x02	; 2
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(4 , LOW);
 4f4:	60 e0       	ldi	r22, 0x00	; 0
 4f6:	70 e0       	ldi	r23, 0x00	; 0
 4f8:	84 e0       	ldi	r24, 0x04	; 4
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(3 , LOW);
 500:	60 e0       	ldi	r22, 0x00	; 0
 502:	70 e0       	ldi	r23, 0x00	; 0
 504:	83 e0       	ldi	r24, 0x03	; 3
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
 50c:	08 95       	ret
	}
	else if (ch == '7'){
 50e:	87 33       	cpi	r24, 0x37	; 55
 510:	c9 f4       	brne	.+50     	; 0x544 <__EEPROM_REGION_LENGTH__+0x144>
		digitalWrite(5 , LOW);
 512:	60 e0       	ldi	r22, 0x00	; 0
 514:	70 e0       	ldi	r23, 0x00	; 0
 516:	85 e0       	ldi	r24, 0x05	; 5
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(9 , LOW);
 51e:	60 e0       	ldi	r22, 0x00	; 0
 520:	70 e0       	ldi	r23, 0x00	; 0
 522:	89 e0       	ldi	r24, 0x09	; 9
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(10 , LOW);
 52a:	60 e0       	ldi	r22, 0x00	; 0
 52c:	70 e0       	ldi	r23, 0x00	; 0
 52e:	8a e0       	ldi	r24, 0x0A	; 10
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(2 , LOW);
 536:	60 e0       	ldi	r22, 0x00	; 0
 538:	70 e0       	ldi	r23, 0x00	; 0
 53a:	82 e0       	ldi	r24, 0x02	; 2
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
 542:	08 95       	ret
	}
	else if (ch == '8'){
 544:	88 33       	cpi	r24, 0x38	; 56
 546:	59 f5       	brne	.+86     	; 0x59e <__EEPROM_REGION_LENGTH__+0x19e>
		digitalWrite(9 , LOW);
 548:	60 e0       	ldi	r22, 0x00	; 0
 54a:	70 e0       	ldi	r23, 0x00	; 0
 54c:	89 e0       	ldi	r24, 0x09	; 9
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(10 , LOW);
 554:	60 e0       	ldi	r22, 0x00	; 0
 556:	70 e0       	ldi	r23, 0x00	; 0
 558:	8a e0       	ldi	r24, 0x0A	; 10
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(2 , LOW);
 560:	60 e0       	ldi	r22, 0x00	; 0
 562:	70 e0       	ldi	r23, 0x00	; 0
 564:	82 e0       	ldi	r24, 0x02	; 2
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(3 , LOW);
 56c:	60 e0       	ldi	r22, 0x00	; 0
 56e:	70 e0       	ldi	r23, 0x00	; 0
 570:	83 e0       	ldi	r24, 0x03	; 3
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(4 , LOW);
 578:	60 e0       	ldi	r22, 0x00	; 0
 57a:	70 e0       	ldi	r23, 0x00	; 0
 57c:	84 e0       	ldi	r24, 0x04	; 4
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(5 , LOW);
 584:	60 e0       	ldi	r22, 0x00	; 0
 586:	70 e0       	ldi	r23, 0x00	; 0
 588:	85 e0       	ldi	r24, 0x05	; 5
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(6 , LOW);
 590:	60 e0       	ldi	r22, 0x00	; 0
 592:	70 e0       	ldi	r23, 0x00	; 0
 594:	86 e0       	ldi	r24, 0x06	; 6
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
 59c:	08 95       	ret
	}
	else if (ch == '9'){
 59e:	89 33       	cpi	r24, 0x39	; 57
 5a0:	29 f5       	brne	.+74     	; 0x5ec <__EEPROM_REGION_LENGTH__+0x1ec>
		digitalWrite(9 , LOW);
 5a2:	60 e0       	ldi	r22, 0x00	; 0
 5a4:	70 e0       	ldi	r23, 0x00	; 0
 5a6:	89 e0       	ldi	r24, 0x09	; 9
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(10 , LOW);
 5ae:	60 e0       	ldi	r22, 0x00	; 0
 5b0:	70 e0       	ldi	r23, 0x00	; 0
 5b2:	8a e0       	ldi	r24, 0x0A	; 10
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(2 , LOW);
 5ba:	60 e0       	ldi	r22, 0x00	; 0
 5bc:	70 e0       	ldi	r23, 0x00	; 0
 5be:	82 e0       	ldi	r24, 0x02	; 2
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(3 , LOW);
 5c6:	60 e0       	ldi	r22, 0x00	; 0
 5c8:	70 e0       	ldi	r23, 0x00	; 0
 5ca:	83 e0       	ldi	r24, 0x03	; 3
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(5 , LOW);
 5d2:	60 e0       	ldi	r22, 0x00	; 0
 5d4:	70 e0       	ldi	r23, 0x00	; 0
 5d6:	85 e0       	ldi	r24, 0x05	; 5
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(6 , LOW);
 5de:	60 e0       	ldi	r22, 0x00	; 0
 5e0:	70 e0       	ldi	r23, 0x00	; 0
 5e2:	86 e0       	ldi	r24, 0x06	; 6
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
 5ea:	08 95       	ret
	}
	else if (ch == '0'){
 5ec:	80 33       	cpi	r24, 0x30	; 48
 5ee:	29 f5       	brne	.+74     	; 0x63a <__EEPROM_REGION_LENGTH__+0x23a>
		digitalWrite(9 , LOW);
 5f0:	60 e0       	ldi	r22, 0x00	; 0
 5f2:	70 e0       	ldi	r23, 0x00	; 0
 5f4:	89 e0       	ldi	r24, 0x09	; 9
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(10 , LOW);
 5fc:	60 e0       	ldi	r22, 0x00	; 0
 5fe:	70 e0       	ldi	r23, 0x00	; 0
 600:	8a e0       	ldi	r24, 0x0A	; 10
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(2 , LOW);
 608:	60 e0       	ldi	r22, 0x00	; 0
 60a:	70 e0       	ldi	r23, 0x00	; 0
 60c:	82 e0       	ldi	r24, 0x02	; 2
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(3 , LOW);
 614:	60 e0       	ldi	r22, 0x00	; 0
 616:	70 e0       	ldi	r23, 0x00	; 0
 618:	83 e0       	ldi	r24, 0x03	; 3
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(4 , LOW);
 620:	60 e0       	ldi	r22, 0x00	; 0
 622:	70 e0       	ldi	r23, 0x00	; 0
 624:	84 e0       	ldi	r24, 0x04	; 4
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(5 , LOW);
 62c:	60 e0       	ldi	r22, 0x00	; 0
 62e:	70 e0       	ldi	r23, 0x00	; 0
 630:	85 e0       	ldi	r24, 0x05	; 5
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
 638:	08 95       	ret
	}
	else if (ch == '@'){
 63a:	80 34       	cpi	r24, 0x40	; 64
 63c:	51 f5       	brne	.+84     	; 0x692 <__EEPROM_REGION_LENGTH__+0x292>
		digitalWrite(9 , HIGH);
 63e:	61 e0       	ldi	r22, 0x01	; 1
 640:	70 e0       	ldi	r23, 0x00	; 0
 642:	89 e0       	ldi	r24, 0x09	; 9
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(10 , HIGH);
 64a:	61 e0       	ldi	r22, 0x01	; 1
 64c:	70 e0       	ldi	r23, 0x00	; 0
 64e:	8a e0       	ldi	r24, 0x0A	; 10
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(2 , HIGH);
 656:	61 e0       	ldi	r22, 0x01	; 1
 658:	70 e0       	ldi	r23, 0x00	; 0
 65a:	82 e0       	ldi	r24, 0x02	; 2
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(3 , HIGH);
 662:	61 e0       	ldi	r22, 0x01	; 1
 664:	70 e0       	ldi	r23, 0x00	; 0
 666:	83 e0       	ldi	r24, 0x03	; 3
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(4 , HIGH);
 66e:	61 e0       	ldi	r22, 0x01	; 1
 670:	70 e0       	ldi	r23, 0x00	; 0
 672:	84 e0       	ldi	r24, 0x04	; 4
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(5 , HIGH);
 67a:	61 e0       	ldi	r22, 0x01	; 1
 67c:	70 e0       	ldi	r23, 0x00	; 0
 67e:	85 e0       	ldi	r24, 0x05	; 5
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(6 , HIGH);
 686:	61 e0       	ldi	r22, 0x01	; 1
 688:	70 e0       	ldi	r23, 0x00	; 0
 68a:	86 e0       	ldi	r24, 0x06	; 6
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
 692:	08 95       	ret

00000694 <displayCharacter2>:
	}
	return ;
}

void displayCharacter2(char ch){
	if (ch == '1'){
 694:	81 33       	cpi	r24, 0x31	; 49
 696:	69 f4       	brne	.+26     	; 0x6b2 <displayCharacter2+0x1e>
		digitalWrite(16 , LOW);
 698:	60 e0       	ldi	r22, 0x00	; 0
 69a:	70 e0       	ldi	r23, 0x00	; 0
 69c:	80 e1       	ldi	r24, 0x10	; 16
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(17 , LOW);
 6a4:	60 e0       	ldi	r22, 0x00	; 0
 6a6:	70 e0       	ldi	r23, 0x00	; 0
 6a8:	81 e1       	ldi	r24, 0x11	; 17
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
 6b0:	08 95       	ret
	}
	else if (ch == '2'){
 6b2:	82 33       	cpi	r24, 0x32	; 50
 6b4:	f9 f4       	brne	.+62     	; 0x6f4 <displayCharacter2+0x60>
		digitalWrite(15 , LOW);
 6b6:	60 e0       	ldi	r22, 0x00	; 0
 6b8:	70 e0       	ldi	r23, 0x00	; 0
 6ba:	8f e0       	ldi	r24, 0x0F	; 15
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(16 , LOW);
 6c2:	60 e0       	ldi	r22, 0x00	; 0
 6c4:	70 e0       	ldi	r23, 0x00	; 0
 6c6:	80 e1       	ldi	r24, 0x10	; 16
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(13 , LOW);
 6ce:	60 e0       	ldi	r22, 0x00	; 0
 6d0:	70 e0       	ldi	r23, 0x00	; 0
 6d2:	8d e0       	ldi	r24, 0x0D	; 13
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(19 , LOW);
 6da:	60 e0       	ldi	r22, 0x00	; 0
 6dc:	70 e0       	ldi	r23, 0x00	; 0
 6de:	83 e1       	ldi	r24, 0x13	; 19
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(18 , LOW);
 6e6:	60 e0       	ldi	r22, 0x00	; 0
 6e8:	70 e0       	ldi	r23, 0x00	; 0
 6ea:	82 e1       	ldi	r24, 0x12	; 18
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
 6f2:	08 95       	ret
	}
	else if (ch == '3'){
 6f4:	83 33       	cpi	r24, 0x33	; 51
 6f6:	f9 f4       	brne	.+62     	; 0x736 <displayCharacter2+0xa2>
		digitalWrite(15 , LOW);
 6f8:	60 e0       	ldi	r22, 0x00	; 0
 6fa:	70 e0       	ldi	r23, 0x00	; 0
 6fc:	8f e0       	ldi	r24, 0x0F	; 15
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(16 , LOW);
 704:	60 e0       	ldi	r22, 0x00	; 0
 706:	70 e0       	ldi	r23, 0x00	; 0
 708:	80 e1       	ldi	r24, 0x10	; 16
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(13 , LOW);
 710:	60 e0       	ldi	r22, 0x00	; 0
 712:	70 e0       	ldi	r23, 0x00	; 0
 714:	8d e0       	ldi	r24, 0x0D	; 13
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(17 , LOW);
 71c:	60 e0       	ldi	r22, 0x00	; 0
 71e:	70 e0       	ldi	r23, 0x00	; 0
 720:	81 e1       	ldi	r24, 0x11	; 17
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(18, LOW);
 728:	60 e0       	ldi	r22, 0x00	; 0
 72a:	70 e0       	ldi	r23, 0x00	; 0
 72c:	82 e1       	ldi	r24, 0x12	; 18
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
 734:	08 95       	ret
	}
	else if (ch == '4'){
 736:	84 33       	cpi	r24, 0x34	; 52
 738:	c9 f4       	brne	.+50     	; 0x76c <displayCharacter2+0xd8>
		digitalWrite(20 , LOW);
 73a:	60 e0       	ldi	r22, 0x00	; 0
 73c:	70 e0       	ldi	r23, 0x00	; 0
 73e:	84 e1       	ldi	r24, 0x14	; 20
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(13 , LOW);
 746:	60 e0       	ldi	r22, 0x00	; 0
 748:	70 e0       	ldi	r23, 0x00	; 0
 74a:	8d e0       	ldi	r24, 0x0D	; 13
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(16 , LOW);
 752:	60 e0       	ldi	r22, 0x00	; 0
 754:	70 e0       	ldi	r23, 0x00	; 0
 756:	80 e1       	ldi	r24, 0x10	; 16
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(17 , LOW);
 75e:	60 e0       	ldi	r22, 0x00	; 0
 760:	70 e0       	ldi	r23, 0x00	; 0
 762:	81 e1       	ldi	r24, 0x11	; 17
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
 76a:	08 95       	ret
	}
	else if (ch == '5'){
 76c:	85 33       	cpi	r24, 0x35	; 53
 76e:	f9 f4       	brne	.+62     	; 0x7ae <displayCharacter2+0x11a>
		digitalWrite(15 , LOW);
 770:	60 e0       	ldi	r22, 0x00	; 0
 772:	70 e0       	ldi	r23, 0x00	; 0
 774:	8f e0       	ldi	r24, 0x0F	; 15
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(20 , LOW);
 77c:	60 e0       	ldi	r22, 0x00	; 0
 77e:	70 e0       	ldi	r23, 0x00	; 0
 780:	84 e1       	ldi	r24, 0x14	; 20
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(13 , LOW);
 788:	60 e0       	ldi	r22, 0x00	; 0
 78a:	70 e0       	ldi	r23, 0x00	; 0
 78c:	8d e0       	ldi	r24, 0x0D	; 13
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(17 , LOW);
 794:	60 e0       	ldi	r22, 0x00	; 0
 796:	70 e0       	ldi	r23, 0x00	; 0
 798:	81 e1       	ldi	r24, 0x11	; 17
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(18 , LOW);
 7a0:	60 e0       	ldi	r22, 0x00	; 0
 7a2:	70 e0       	ldi	r23, 0x00	; 0
 7a4:	82 e1       	ldi	r24, 0x12	; 18
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
 7ac:	08 95       	ret
	}
	else if (ch == '6'){
 7ae:	86 33       	cpi	r24, 0x36	; 54
 7b0:	29 f5       	brne	.+74     	; 0x7fc <displayCharacter2+0x168>
		digitalWrite(15 , LOW);
 7b2:	60 e0       	ldi	r22, 0x00	; 0
 7b4:	70 e0       	ldi	r23, 0x00	; 0
 7b6:	8f e0       	ldi	r24, 0x0F	; 15
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(20 , LOW);
 7be:	60 e0       	ldi	r22, 0x00	; 0
 7c0:	70 e0       	ldi	r23, 0x00	; 0
 7c2:	84 e1       	ldi	r24, 0x14	; 20
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(13 , LOW);
 7ca:	60 e0       	ldi	r22, 0x00	; 0
 7cc:	70 e0       	ldi	r23, 0x00	; 0
 7ce:	8d e0       	ldi	r24, 0x0D	; 13
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(17 , LOW);
 7d6:	60 e0       	ldi	r22, 0x00	; 0
 7d8:	70 e0       	ldi	r23, 0x00	; 0
 7da:	81 e1       	ldi	r24, 0x11	; 17
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(19 , LOW);
 7e2:	60 e0       	ldi	r22, 0x00	; 0
 7e4:	70 e0       	ldi	r23, 0x00	; 0
 7e6:	83 e1       	ldi	r24, 0x13	; 19
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(18 , LOW);
 7ee:	60 e0       	ldi	r22, 0x00	; 0
 7f0:	70 e0       	ldi	r23, 0x00	; 0
 7f2:	82 e1       	ldi	r24, 0x12	; 18
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
 7fa:	08 95       	ret
	}
	else if (ch == '7'){
 7fc:	87 33       	cpi	r24, 0x37	; 55
 7fe:	c9 f4       	brne	.+50     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
		digitalWrite(20 , LOW);
 800:	60 e0       	ldi	r22, 0x00	; 0
 802:	70 e0       	ldi	r23, 0x00	; 0
 804:	84 e1       	ldi	r24, 0x14	; 20
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(15 , LOW);
 80c:	60 e0       	ldi	r22, 0x00	; 0
 80e:	70 e0       	ldi	r23, 0x00	; 0
 810:	8f e0       	ldi	r24, 0x0F	; 15
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(16 , LOW);
 818:	60 e0       	ldi	r22, 0x00	; 0
 81a:	70 e0       	ldi	r23, 0x00	; 0
 81c:	80 e1       	ldi	r24, 0x10	; 16
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(17 , LOW);
 824:	60 e0       	ldi	r22, 0x00	; 0
 826:	70 e0       	ldi	r23, 0x00	; 0
 828:	81 e1       	ldi	r24, 0x11	; 17
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
 830:	08 95       	ret
	}
	else if (ch == '8'){
 832:	88 33       	cpi	r24, 0x38	; 56
 834:	59 f5       	brne	.+86     	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
		digitalWrite(15 , LOW);
 836:	60 e0       	ldi	r22, 0x00	; 0
 838:	70 e0       	ldi	r23, 0x00	; 0
 83a:	8f e0       	ldi	r24, 0x0F	; 15
 83c:	90 e0       	ldi	r25, 0x00	; 0
 83e:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(16 , LOW);
 842:	60 e0       	ldi	r22, 0x00	; 0
 844:	70 e0       	ldi	r23, 0x00	; 0
 846:	80 e1       	ldi	r24, 0x10	; 16
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(17 , LOW);
 84e:	60 e0       	ldi	r22, 0x00	; 0
 850:	70 e0       	ldi	r23, 0x00	; 0
 852:	81 e1       	ldi	r24, 0x11	; 17
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(18 , LOW);
 85a:	60 e0       	ldi	r22, 0x00	; 0
 85c:	70 e0       	ldi	r23, 0x00	; 0
 85e:	82 e1       	ldi	r24, 0x12	; 18
 860:	90 e0       	ldi	r25, 0x00	; 0
 862:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(19 , LOW);
 866:	60 e0       	ldi	r22, 0x00	; 0
 868:	70 e0       	ldi	r23, 0x00	; 0
 86a:	83 e1       	ldi	r24, 0x13	; 19
 86c:	90 e0       	ldi	r25, 0x00	; 0
 86e:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(20 , LOW);
 872:	60 e0       	ldi	r22, 0x00	; 0
 874:	70 e0       	ldi	r23, 0x00	; 0
 876:	84 e1       	ldi	r24, 0x14	; 20
 878:	90 e0       	ldi	r25, 0x00	; 0
 87a:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(13 , LOW);
 87e:	60 e0       	ldi	r22, 0x00	; 0
 880:	70 e0       	ldi	r23, 0x00	; 0
 882:	8d e0       	ldi	r24, 0x0D	; 13
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
 88a:	08 95       	ret
	}
	else if (ch == '9'){
 88c:	89 33       	cpi	r24, 0x39	; 57
 88e:	29 f5       	brne	.+74     	; 0x8da <__DATA_REGION_LENGTH__+0xda>
		digitalWrite(15 , LOW);
 890:	60 e0       	ldi	r22, 0x00	; 0
 892:	70 e0       	ldi	r23, 0x00	; 0
 894:	8f e0       	ldi	r24, 0x0F	; 15
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(16 , LOW);
 89c:	60 e0       	ldi	r22, 0x00	; 0
 89e:	70 e0       	ldi	r23, 0x00	; 0
 8a0:	80 e1       	ldi	r24, 0x10	; 16
 8a2:	90 e0       	ldi	r25, 0x00	; 0
 8a4:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(17 , LOW);
 8a8:	60 e0       	ldi	r22, 0x00	; 0
 8aa:	70 e0       	ldi	r23, 0x00	; 0
 8ac:	81 e1       	ldi	r24, 0x11	; 17
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(18 , LOW);
 8b4:	60 e0       	ldi	r22, 0x00	; 0
 8b6:	70 e0       	ldi	r23, 0x00	; 0
 8b8:	82 e1       	ldi	r24, 0x12	; 18
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(20, LOW);
 8c0:	60 e0       	ldi	r22, 0x00	; 0
 8c2:	70 e0       	ldi	r23, 0x00	; 0
 8c4:	84 e1       	ldi	r24, 0x14	; 20
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(13 , LOW);
 8cc:	60 e0       	ldi	r22, 0x00	; 0
 8ce:	70 e0       	ldi	r23, 0x00	; 0
 8d0:	8d e0       	ldi	r24, 0x0D	; 13
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
 8d8:	08 95       	ret
	}
	else if (ch == '0'){
 8da:	80 33       	cpi	r24, 0x30	; 48
 8dc:	29 f5       	brne	.+74     	; 0x928 <__stack+0x29>
		digitalWrite(15 , LOW);
 8de:	60 e0       	ldi	r22, 0x00	; 0
 8e0:	70 e0       	ldi	r23, 0x00	; 0
 8e2:	8f e0       	ldi	r24, 0x0F	; 15
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(16 , LOW);
 8ea:	60 e0       	ldi	r22, 0x00	; 0
 8ec:	70 e0       	ldi	r23, 0x00	; 0
 8ee:	80 e1       	ldi	r24, 0x10	; 16
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(17 , LOW);
 8f6:	60 e0       	ldi	r22, 0x00	; 0
 8f8:	70 e0       	ldi	r23, 0x00	; 0
 8fa:	81 e1       	ldi	r24, 0x11	; 17
 8fc:	90 e0       	ldi	r25, 0x00	; 0
 8fe:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(18 , LOW);
 902:	60 e0       	ldi	r22, 0x00	; 0
 904:	70 e0       	ldi	r23, 0x00	; 0
 906:	82 e1       	ldi	r24, 0x12	; 18
 908:	90 e0       	ldi	r25, 0x00	; 0
 90a:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(19 , LOW);
 90e:	60 e0       	ldi	r22, 0x00	; 0
 910:	70 e0       	ldi	r23, 0x00	; 0
 912:	83 e1       	ldi	r24, 0x13	; 19
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(20 , LOW);
 91a:	60 e0       	ldi	r22, 0x00	; 0
 91c:	70 e0       	ldi	r23, 0x00	; 0
 91e:	84 e1       	ldi	r24, 0x14	; 20
 920:	90 e0       	ldi	r25, 0x00	; 0
 922:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
 926:	08 95       	ret
	}
	else if (ch == '@'){
 928:	80 34       	cpi	r24, 0x40	; 64
 92a:	51 f5       	brne	.+84     	; 0x980 <__stack+0x81>
		digitalWrite(15 , HIGH);
 92c:	61 e0       	ldi	r22, 0x01	; 1
 92e:	70 e0       	ldi	r23, 0x00	; 0
 930:	8f e0       	ldi	r24, 0x0F	; 15
 932:	90 e0       	ldi	r25, 0x00	; 0
 934:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(16 , HIGH);
 938:	61 e0       	ldi	r22, 0x01	; 1
 93a:	70 e0       	ldi	r23, 0x00	; 0
 93c:	80 e1       	ldi	r24, 0x10	; 16
 93e:	90 e0       	ldi	r25, 0x00	; 0
 940:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(17 , HIGH);
 944:	61 e0       	ldi	r22, 0x01	; 1
 946:	70 e0       	ldi	r23, 0x00	; 0
 948:	81 e1       	ldi	r24, 0x11	; 17
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(18 , HIGH);
 950:	61 e0       	ldi	r22, 0x01	; 1
 952:	70 e0       	ldi	r23, 0x00	; 0
 954:	82 e1       	ldi	r24, 0x12	; 18
 956:	90 e0       	ldi	r25, 0x00	; 0
 958:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(19 , HIGH);
 95c:	61 e0       	ldi	r22, 0x01	; 1
 95e:	70 e0       	ldi	r23, 0x00	; 0
 960:	83 e1       	ldi	r24, 0x13	; 19
 962:	90 e0       	ldi	r25, 0x00	; 0
 964:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(20 , HIGH);
 968:	61 e0       	ldi	r22, 0x01	; 1
 96a:	70 e0       	ldi	r23, 0x00	; 0
 96c:	84 e1       	ldi	r24, 0x14	; 20
 96e:	90 e0       	ldi	r25, 0x00	; 0
 970:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(13 , HIGH);
 974:	61 e0       	ldi	r22, 0x01	; 1
 976:	70 e0       	ldi	r23, 0x00	; 0
 978:	8d e0       	ldi	r24, 0x0D	; 13
 97a:	90 e0       	ldi	r25, 0x00	; 0
 97c:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
 980:	08 95       	ret

00000982 <main>:
	return ;
}

int main(void)
{
	pinMode(9, OUTPUT);
 982:	61 e0       	ldi	r22, 0x01	; 1
 984:	70 e0       	ldi	r23, 0x00	; 0
 986:	89 e0       	ldi	r24, 0x09	; 9
 988:	90 e0       	ldi	r25, 0x00	; 0
 98a:	0e 94 c5 00 	call	0x18a	; 0x18a <pinMode>
	pinMode(10, OUTPUT);
 98e:	61 e0       	ldi	r22, 0x01	; 1
 990:	70 e0       	ldi	r23, 0x00	; 0
 992:	8a e0       	ldi	r24, 0x0A	; 10
 994:	90 e0       	ldi	r25, 0x00	; 0
 996:	0e 94 c5 00 	call	0x18a	; 0x18a <pinMode>
	pinMode(2, OUTPUT);
 99a:	61 e0       	ldi	r22, 0x01	; 1
 99c:	70 e0       	ldi	r23, 0x00	; 0
 99e:	82 e0       	ldi	r24, 0x02	; 2
 9a0:	90 e0       	ldi	r25, 0x00	; 0
 9a2:	0e 94 c5 00 	call	0x18a	; 0x18a <pinMode>
	pinMode(3, OUTPUT);
 9a6:	61 e0       	ldi	r22, 0x01	; 1
 9a8:	70 e0       	ldi	r23, 0x00	; 0
 9aa:	83 e0       	ldi	r24, 0x03	; 3
 9ac:	90 e0       	ldi	r25, 0x00	; 0
 9ae:	0e 94 c5 00 	call	0x18a	; 0x18a <pinMode>
	pinMode(4, OUTPUT);
 9b2:	61 e0       	ldi	r22, 0x01	; 1
 9b4:	70 e0       	ldi	r23, 0x00	; 0
 9b6:	84 e0       	ldi	r24, 0x04	; 4
 9b8:	90 e0       	ldi	r25, 0x00	; 0
 9ba:	0e 94 c5 00 	call	0x18a	; 0x18a <pinMode>
	pinMode(5, OUTPUT);
 9be:	61 e0       	ldi	r22, 0x01	; 1
 9c0:	70 e0       	ldi	r23, 0x00	; 0
 9c2:	85 e0       	ldi	r24, 0x05	; 5
 9c4:	90 e0       	ldi	r25, 0x00	; 0
 9c6:	0e 94 c5 00 	call	0x18a	; 0x18a <pinMode>
	pinMode(6, OUTPUT);
 9ca:	61 e0       	ldi	r22, 0x01	; 1
 9cc:	70 e0       	ldi	r23, 0x00	; 0
 9ce:	86 e0       	ldi	r24, 0x06	; 6
 9d0:	90 e0       	ldi	r25, 0x00	; 0
 9d2:	0e 94 c5 00 	call	0x18a	; 0x18a <pinMode>
	pinMode(15, OUTPUT);
 9d6:	61 e0       	ldi	r22, 0x01	; 1
 9d8:	70 e0       	ldi	r23, 0x00	; 0
 9da:	8f e0       	ldi	r24, 0x0F	; 15
 9dc:	90 e0       	ldi	r25, 0x00	; 0
 9de:	0e 94 c5 00 	call	0x18a	; 0x18a <pinMode>
	pinMode(16, OUTPUT);
 9e2:	61 e0       	ldi	r22, 0x01	; 1
 9e4:	70 e0       	ldi	r23, 0x00	; 0
 9e6:	80 e1       	ldi	r24, 0x10	; 16
 9e8:	90 e0       	ldi	r25, 0x00	; 0
 9ea:	0e 94 c5 00 	call	0x18a	; 0x18a <pinMode>
	pinMode(17, OUTPUT);
 9ee:	61 e0       	ldi	r22, 0x01	; 1
 9f0:	70 e0       	ldi	r23, 0x00	; 0
 9f2:	81 e1       	ldi	r24, 0x11	; 17
 9f4:	90 e0       	ldi	r25, 0x00	; 0
 9f6:	0e 94 c5 00 	call	0x18a	; 0x18a <pinMode>
	pinMode(18, OUTPUT);
 9fa:	61 e0       	ldi	r22, 0x01	; 1
 9fc:	70 e0       	ldi	r23, 0x00	; 0
 9fe:	82 e1       	ldi	r24, 0x12	; 18
 a00:	90 e0       	ldi	r25, 0x00	; 0
 a02:	0e 94 c5 00 	call	0x18a	; 0x18a <pinMode>
	pinMode(19, OUTPUT);
 a06:	61 e0       	ldi	r22, 0x01	; 1
 a08:	70 e0       	ldi	r23, 0x00	; 0
 a0a:	83 e1       	ldi	r24, 0x13	; 19
 a0c:	90 e0       	ldi	r25, 0x00	; 0
 a0e:	0e 94 c5 00 	call	0x18a	; 0x18a <pinMode>
	pinMode(20, OUTPUT);
 a12:	61 e0       	ldi	r22, 0x01	; 1
 a14:	70 e0       	ldi	r23, 0x00	; 0
 a16:	84 e1       	ldi	r24, 0x14	; 20
 a18:	90 e0       	ldi	r25, 0x00	; 0
 a1a:	0e 94 c5 00 	call	0x18a	; 0x18a <pinMode>
	pinMode(13, OUTPUT);
 a1e:	61 e0       	ldi	r22, 0x01	; 1
 a20:	70 e0       	ldi	r23, 0x00	; 0
 a22:	8d e0       	ldi	r24, 0x0D	; 13
 a24:	90 e0       	ldi	r25, 0x00	; 0
 a26:	0e 94 c5 00 	call	0x18a	; 0x18a <pinMode>
	//pinMode(8,INPUT);
	DDRC=0b00100110;
 a2a:	86 e2       	ldi	r24, 0x26	; 38
 a2c:	87 b9       	out	0x07, r24	; 7
	CLKPR=(1<<CLKPCE);
 a2e:	e1 e6       	ldi	r30, 0x61	; 97
 a30:	f0 e0       	ldi	r31, 0x00	; 0
 a32:	80 e8       	ldi	r24, 0x80	; 128
 a34:	80 83       	st	Z, r24
	CLKPR=0b00000000;
 a36:	10 82       	st	Z, r1
	ADCSRA=0b10000111; // enable + prescaler
 a38:	ea e7       	ldi	r30, 0x7A	; 122
 a3a:	f0 e0       	ldi	r31, 0x00	; 0
 a3c:	87 e8       	ldi	r24, 0x87	; 135
 a3e:	80 83       	st	Z, r24
	ADMUX=0b11000000; // ref volt + channel
 a40:	80 ec       	ldi	r24, 0xC0	; 192
 a42:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA |= (1<<ADEN);
 a46:	80 81       	ld	r24, Z
 a48:	80 68       	ori	r24, 0x80	; 128
 a4a:	80 83       	st	Z, r24
	unsigned int BaudR = 9600;
	unsigned int ubrr = (F_CPU / (BaudR*16UL))-1;
	UBRR0H = (unsigned char)(ubrr>>8);
 a4c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 a50:	83 e3       	ldi	r24, 0x33	; 51
 a52:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
 a56:	e2 ec       	ldi	r30, 0xC2	; 194
 a58:	f0 e0       	ldi	r31, 0x00	; 0
 a5a:	80 81       	ld	r24, Z
 a5c:	86 60       	ori	r24, 0x06	; 6
 a5e:	80 83       	st	Z, r24
	UCSR0B |= (1<<TXEN0);
 a60:	e1 ec       	ldi	r30, 0xC1	; 193
 a62:	f0 e0       	ldi	r31, 0x00	; 0
 a64:	80 81       	ld	r24, Z
 a66:	88 60       	ori	r24, 0x08	; 8
 a68:	80 83       	st	Z, r24
	while(1)
	{
		print();
 a6a:	0e 94 6f 01 	call	0x2de	; 0x2de <print>
		int currentDistance = readDistance();
 a6e:	0e 94 4c 01 	call	0x298	; 0x298 <readDistance>
 a72:	ec 01       	movw	r28, r24
		displayCharacter1('@');
 a74:	80 e4       	ldi	r24, 0x40	; 64
 a76:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <displayCharacter1>
		displayCharacter2('@');
 a7a:	80 e4       	ldi	r24, 0x40	; 64
 a7c:	0e 94 4a 03 	call	0x694	; 0x694 <displayCharacter2>
		displayCharacter1((currentDistance/10)%10+'0');
 a80:	2a e0       	ldi	r18, 0x0A	; 10
 a82:	30 e0       	ldi	r19, 0x00	; 0
 a84:	ce 01       	movw	r24, r28
 a86:	b9 01       	movw	r22, r18
 a88:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__divmodhi4>
 a8c:	c8 2f       	mov	r28, r24
 a8e:	cb 01       	movw	r24, r22
 a90:	b9 01       	movw	r22, r18
 a92:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__divmodhi4>
 a96:	80 5d       	subi	r24, 0xD0	; 208
 a98:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <displayCharacter1>
		displayCharacter2(currentDistance%10+'0');
 a9c:	80 e3       	ldi	r24, 0x30	; 48
 a9e:	8c 0f       	add	r24, r28
 aa0:	0e 94 4a 03 	call	0x694	; 0x694 <displayCharacter2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 aa4:	2f ef       	ldi	r18, 0xFF	; 255
 aa6:	84 e3       	ldi	r24, 0x34	; 52
 aa8:	9c e0       	ldi	r25, 0x0C	; 12
 aaa:	21 50       	subi	r18, 0x01	; 1
 aac:	80 40       	sbci	r24, 0x00	; 0
 aae:	90 40       	sbci	r25, 0x00	; 0
 ab0:	e1 f7       	brne	.-8      	; 0xaaa <main+0x128>
 ab2:	00 c0       	rjmp	.+0      	; 0xab4 <main+0x132>
 ab4:	00 00       	nop
 ab6:	d9 cf       	rjmp	.-78     	; 0xa6a <main+0xe8>

00000ab8 <__subsf3>:
 ab8:	50 58       	subi	r21, 0x80	; 128

00000aba <__addsf3>:
 aba:	bb 27       	eor	r27, r27
 abc:	aa 27       	eor	r26, r26
 abe:	0e 94 74 05 	call	0xae8	; 0xae8 <__addsf3x>
 ac2:	0c 94 c5 06 	jmp	0xd8a	; 0xd8a <__fp_round>
 ac6:	0e 94 b7 06 	call	0xd6e	; 0xd6e <__fp_pscA>
 aca:	38 f0       	brcs	.+14     	; 0xada <__addsf3+0x20>
 acc:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fp_pscB>
 ad0:	20 f0       	brcs	.+8      	; 0xada <__addsf3+0x20>
 ad2:	39 f4       	brne	.+14     	; 0xae2 <__addsf3+0x28>
 ad4:	9f 3f       	cpi	r25, 0xFF	; 255
 ad6:	19 f4       	brne	.+6      	; 0xade <__addsf3+0x24>
 ad8:	26 f4       	brtc	.+8      	; 0xae2 <__addsf3+0x28>
 ada:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__fp_nan>
 ade:	0e f4       	brtc	.+2      	; 0xae2 <__addsf3+0x28>
 ae0:	e0 95       	com	r30
 ae2:	e7 fb       	bst	r30, 7
 ae4:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__fp_inf>

00000ae8 <__addsf3x>:
 ae8:	e9 2f       	mov	r30, r25
 aea:	0e 94 d6 06 	call	0xdac	; 0xdac <__fp_split3>
 aee:	58 f3       	brcs	.-42     	; 0xac6 <__addsf3+0xc>
 af0:	ba 17       	cp	r27, r26
 af2:	62 07       	cpc	r22, r18
 af4:	73 07       	cpc	r23, r19
 af6:	84 07       	cpc	r24, r20
 af8:	95 07       	cpc	r25, r21
 afa:	20 f0       	brcs	.+8      	; 0xb04 <__addsf3x+0x1c>
 afc:	79 f4       	brne	.+30     	; 0xb1c <__addsf3x+0x34>
 afe:	a6 f5       	brtc	.+104    	; 0xb68 <__addsf3x+0x80>
 b00:	0c 94 f8 06 	jmp	0xdf0	; 0xdf0 <__fp_zero>
 b04:	0e f4       	brtc	.+2      	; 0xb08 <__addsf3x+0x20>
 b06:	e0 95       	com	r30
 b08:	0b 2e       	mov	r0, r27
 b0a:	ba 2f       	mov	r27, r26
 b0c:	a0 2d       	mov	r26, r0
 b0e:	0b 01       	movw	r0, r22
 b10:	b9 01       	movw	r22, r18
 b12:	90 01       	movw	r18, r0
 b14:	0c 01       	movw	r0, r24
 b16:	ca 01       	movw	r24, r20
 b18:	a0 01       	movw	r20, r0
 b1a:	11 24       	eor	r1, r1
 b1c:	ff 27       	eor	r31, r31
 b1e:	59 1b       	sub	r21, r25
 b20:	99 f0       	breq	.+38     	; 0xb48 <__addsf3x+0x60>
 b22:	59 3f       	cpi	r21, 0xF9	; 249
 b24:	50 f4       	brcc	.+20     	; 0xb3a <__addsf3x+0x52>
 b26:	50 3e       	cpi	r21, 0xE0	; 224
 b28:	68 f1       	brcs	.+90     	; 0xb84 <__addsf3x+0x9c>
 b2a:	1a 16       	cp	r1, r26
 b2c:	f0 40       	sbci	r31, 0x00	; 0
 b2e:	a2 2f       	mov	r26, r18
 b30:	23 2f       	mov	r18, r19
 b32:	34 2f       	mov	r19, r20
 b34:	44 27       	eor	r20, r20
 b36:	58 5f       	subi	r21, 0xF8	; 248
 b38:	f3 cf       	rjmp	.-26     	; 0xb20 <__addsf3x+0x38>
 b3a:	46 95       	lsr	r20
 b3c:	37 95       	ror	r19
 b3e:	27 95       	ror	r18
 b40:	a7 95       	ror	r26
 b42:	f0 40       	sbci	r31, 0x00	; 0
 b44:	53 95       	inc	r21
 b46:	c9 f7       	brne	.-14     	; 0xb3a <__addsf3x+0x52>
 b48:	7e f4       	brtc	.+30     	; 0xb68 <__addsf3x+0x80>
 b4a:	1f 16       	cp	r1, r31
 b4c:	ba 0b       	sbc	r27, r26
 b4e:	62 0b       	sbc	r22, r18
 b50:	73 0b       	sbc	r23, r19
 b52:	84 0b       	sbc	r24, r20
 b54:	ba f0       	brmi	.+46     	; 0xb84 <__addsf3x+0x9c>
 b56:	91 50       	subi	r25, 0x01	; 1
 b58:	a1 f0       	breq	.+40     	; 0xb82 <__addsf3x+0x9a>
 b5a:	ff 0f       	add	r31, r31
 b5c:	bb 1f       	adc	r27, r27
 b5e:	66 1f       	adc	r22, r22
 b60:	77 1f       	adc	r23, r23
 b62:	88 1f       	adc	r24, r24
 b64:	c2 f7       	brpl	.-16     	; 0xb56 <__addsf3x+0x6e>
 b66:	0e c0       	rjmp	.+28     	; 0xb84 <__addsf3x+0x9c>
 b68:	ba 0f       	add	r27, r26
 b6a:	62 1f       	adc	r22, r18
 b6c:	73 1f       	adc	r23, r19
 b6e:	84 1f       	adc	r24, r20
 b70:	48 f4       	brcc	.+18     	; 0xb84 <__addsf3x+0x9c>
 b72:	87 95       	ror	r24
 b74:	77 95       	ror	r23
 b76:	67 95       	ror	r22
 b78:	b7 95       	ror	r27
 b7a:	f7 95       	ror	r31
 b7c:	9e 3f       	cpi	r25, 0xFE	; 254
 b7e:	08 f0       	brcs	.+2      	; 0xb82 <__addsf3x+0x9a>
 b80:	b0 cf       	rjmp	.-160    	; 0xae2 <__addsf3+0x28>
 b82:	93 95       	inc	r25
 b84:	88 0f       	add	r24, r24
 b86:	08 f0       	brcs	.+2      	; 0xb8a <__addsf3x+0xa2>
 b88:	99 27       	eor	r25, r25
 b8a:	ee 0f       	add	r30, r30
 b8c:	97 95       	ror	r25
 b8e:	87 95       	ror	r24
 b90:	08 95       	ret

00000b92 <__divsf3>:
 b92:	0e 94 dd 05 	call	0xbba	; 0xbba <__divsf3x>
 b96:	0c 94 c5 06 	jmp	0xd8a	; 0xd8a <__fp_round>
 b9a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fp_pscB>
 b9e:	58 f0       	brcs	.+22     	; 0xbb6 <__divsf3+0x24>
 ba0:	0e 94 b7 06 	call	0xd6e	; 0xd6e <__fp_pscA>
 ba4:	40 f0       	brcs	.+16     	; 0xbb6 <__divsf3+0x24>
 ba6:	29 f4       	brne	.+10     	; 0xbb2 <__divsf3+0x20>
 ba8:	5f 3f       	cpi	r21, 0xFF	; 255
 baa:	29 f0       	breq	.+10     	; 0xbb6 <__divsf3+0x24>
 bac:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__fp_inf>
 bb0:	51 11       	cpse	r21, r1
 bb2:	0c 94 f9 06 	jmp	0xdf2	; 0xdf2 <__fp_szero>
 bb6:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__fp_nan>

00000bba <__divsf3x>:
 bba:	0e 94 d6 06 	call	0xdac	; 0xdac <__fp_split3>
 bbe:	68 f3       	brcs	.-38     	; 0xb9a <__divsf3+0x8>

00000bc0 <__divsf3_pse>:
 bc0:	99 23       	and	r25, r25
 bc2:	b1 f3       	breq	.-20     	; 0xbb0 <__divsf3+0x1e>
 bc4:	55 23       	and	r21, r21
 bc6:	91 f3       	breq	.-28     	; 0xbac <__divsf3+0x1a>
 bc8:	95 1b       	sub	r25, r21
 bca:	55 0b       	sbc	r21, r21
 bcc:	bb 27       	eor	r27, r27
 bce:	aa 27       	eor	r26, r26
 bd0:	62 17       	cp	r22, r18
 bd2:	73 07       	cpc	r23, r19
 bd4:	84 07       	cpc	r24, r20
 bd6:	38 f0       	brcs	.+14     	; 0xbe6 <__divsf3_pse+0x26>
 bd8:	9f 5f       	subi	r25, 0xFF	; 255
 bda:	5f 4f       	sbci	r21, 0xFF	; 255
 bdc:	22 0f       	add	r18, r18
 bde:	33 1f       	adc	r19, r19
 be0:	44 1f       	adc	r20, r20
 be2:	aa 1f       	adc	r26, r26
 be4:	a9 f3       	breq	.-22     	; 0xbd0 <__divsf3_pse+0x10>
 be6:	35 d0       	rcall	.+106    	; 0xc52 <__divsf3_pse+0x92>
 be8:	0e 2e       	mov	r0, r30
 bea:	3a f0       	brmi	.+14     	; 0xbfa <__divsf3_pse+0x3a>
 bec:	e0 e8       	ldi	r30, 0x80	; 128
 bee:	32 d0       	rcall	.+100    	; 0xc54 <__divsf3_pse+0x94>
 bf0:	91 50       	subi	r25, 0x01	; 1
 bf2:	50 40       	sbci	r21, 0x00	; 0
 bf4:	e6 95       	lsr	r30
 bf6:	00 1c       	adc	r0, r0
 bf8:	ca f7       	brpl	.-14     	; 0xbec <__divsf3_pse+0x2c>
 bfa:	2b d0       	rcall	.+86     	; 0xc52 <__divsf3_pse+0x92>
 bfc:	fe 2f       	mov	r31, r30
 bfe:	29 d0       	rcall	.+82     	; 0xc52 <__divsf3_pse+0x92>
 c00:	66 0f       	add	r22, r22
 c02:	77 1f       	adc	r23, r23
 c04:	88 1f       	adc	r24, r24
 c06:	bb 1f       	adc	r27, r27
 c08:	26 17       	cp	r18, r22
 c0a:	37 07       	cpc	r19, r23
 c0c:	48 07       	cpc	r20, r24
 c0e:	ab 07       	cpc	r26, r27
 c10:	b0 e8       	ldi	r27, 0x80	; 128
 c12:	09 f0       	breq	.+2      	; 0xc16 <__divsf3_pse+0x56>
 c14:	bb 0b       	sbc	r27, r27
 c16:	80 2d       	mov	r24, r0
 c18:	bf 01       	movw	r22, r30
 c1a:	ff 27       	eor	r31, r31
 c1c:	93 58       	subi	r25, 0x83	; 131
 c1e:	5f 4f       	sbci	r21, 0xFF	; 255
 c20:	3a f0       	brmi	.+14     	; 0xc30 <__divsf3_pse+0x70>
 c22:	9e 3f       	cpi	r25, 0xFE	; 254
 c24:	51 05       	cpc	r21, r1
 c26:	78 f0       	brcs	.+30     	; 0xc46 <__divsf3_pse+0x86>
 c28:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__fp_inf>
 c2c:	0c 94 f9 06 	jmp	0xdf2	; 0xdf2 <__fp_szero>
 c30:	5f 3f       	cpi	r21, 0xFF	; 255
 c32:	e4 f3       	brlt	.-8      	; 0xc2c <__divsf3_pse+0x6c>
 c34:	98 3e       	cpi	r25, 0xE8	; 232
 c36:	d4 f3       	brlt	.-12     	; 0xc2c <__divsf3_pse+0x6c>
 c38:	86 95       	lsr	r24
 c3a:	77 95       	ror	r23
 c3c:	67 95       	ror	r22
 c3e:	b7 95       	ror	r27
 c40:	f7 95       	ror	r31
 c42:	9f 5f       	subi	r25, 0xFF	; 255
 c44:	c9 f7       	brne	.-14     	; 0xc38 <__divsf3_pse+0x78>
 c46:	88 0f       	add	r24, r24
 c48:	91 1d       	adc	r25, r1
 c4a:	96 95       	lsr	r25
 c4c:	87 95       	ror	r24
 c4e:	97 f9       	bld	r25, 7
 c50:	08 95       	ret
 c52:	e1 e0       	ldi	r30, 0x01	; 1
 c54:	66 0f       	add	r22, r22
 c56:	77 1f       	adc	r23, r23
 c58:	88 1f       	adc	r24, r24
 c5a:	bb 1f       	adc	r27, r27
 c5c:	62 17       	cp	r22, r18
 c5e:	73 07       	cpc	r23, r19
 c60:	84 07       	cpc	r24, r20
 c62:	ba 07       	cpc	r27, r26
 c64:	20 f0       	brcs	.+8      	; 0xc6e <__divsf3_pse+0xae>
 c66:	62 1b       	sub	r22, r18
 c68:	73 0b       	sbc	r23, r19
 c6a:	84 0b       	sbc	r24, r20
 c6c:	ba 0b       	sbc	r27, r26
 c6e:	ee 1f       	adc	r30, r30
 c70:	88 f7       	brcc	.-30     	; 0xc54 <__divsf3_pse+0x94>
 c72:	e0 95       	com	r30
 c74:	08 95       	ret

00000c76 <__fixsfsi>:
 c76:	0e 94 42 06 	call	0xc84	; 0xc84 <__fixunssfsi>
 c7a:	68 94       	set
 c7c:	b1 11       	cpse	r27, r1
 c7e:	0c 94 f9 06 	jmp	0xdf2	; 0xdf2 <__fp_szero>
 c82:	08 95       	ret

00000c84 <__fixunssfsi>:
 c84:	0e 94 de 06 	call	0xdbc	; 0xdbc <__fp_splitA>
 c88:	88 f0       	brcs	.+34     	; 0xcac <__fixunssfsi+0x28>
 c8a:	9f 57       	subi	r25, 0x7F	; 127
 c8c:	98 f0       	brcs	.+38     	; 0xcb4 <__fixunssfsi+0x30>
 c8e:	b9 2f       	mov	r27, r25
 c90:	99 27       	eor	r25, r25
 c92:	b7 51       	subi	r27, 0x17	; 23
 c94:	b0 f0       	brcs	.+44     	; 0xcc2 <__fixunssfsi+0x3e>
 c96:	e1 f0       	breq	.+56     	; 0xcd0 <__fixunssfsi+0x4c>
 c98:	66 0f       	add	r22, r22
 c9a:	77 1f       	adc	r23, r23
 c9c:	88 1f       	adc	r24, r24
 c9e:	99 1f       	adc	r25, r25
 ca0:	1a f0       	brmi	.+6      	; 0xca8 <__fixunssfsi+0x24>
 ca2:	ba 95       	dec	r27
 ca4:	c9 f7       	brne	.-14     	; 0xc98 <__fixunssfsi+0x14>
 ca6:	14 c0       	rjmp	.+40     	; 0xcd0 <__fixunssfsi+0x4c>
 ca8:	b1 30       	cpi	r27, 0x01	; 1
 caa:	91 f0       	breq	.+36     	; 0xcd0 <__fixunssfsi+0x4c>
 cac:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__fp_zero>
 cb0:	b1 e0       	ldi	r27, 0x01	; 1
 cb2:	08 95       	ret
 cb4:	0c 94 f8 06 	jmp	0xdf0	; 0xdf0 <__fp_zero>
 cb8:	67 2f       	mov	r22, r23
 cba:	78 2f       	mov	r23, r24
 cbc:	88 27       	eor	r24, r24
 cbe:	b8 5f       	subi	r27, 0xF8	; 248
 cc0:	39 f0       	breq	.+14     	; 0xcd0 <__fixunssfsi+0x4c>
 cc2:	b9 3f       	cpi	r27, 0xF9	; 249
 cc4:	cc f3       	brlt	.-14     	; 0xcb8 <__fixunssfsi+0x34>
 cc6:	86 95       	lsr	r24
 cc8:	77 95       	ror	r23
 cca:	67 95       	ror	r22
 ccc:	b3 95       	inc	r27
 cce:	d9 f7       	brne	.-10     	; 0xcc6 <__fixunssfsi+0x42>
 cd0:	3e f4       	brtc	.+14     	; 0xce0 <__fixunssfsi+0x5c>
 cd2:	90 95       	com	r25
 cd4:	80 95       	com	r24
 cd6:	70 95       	com	r23
 cd8:	61 95       	neg	r22
 cda:	7f 4f       	sbci	r23, 0xFF	; 255
 cdc:	8f 4f       	sbci	r24, 0xFF	; 255
 cde:	9f 4f       	sbci	r25, 0xFF	; 255
 ce0:	08 95       	ret

00000ce2 <__floatunsisf>:
 ce2:	e8 94       	clt
 ce4:	09 c0       	rjmp	.+18     	; 0xcf8 <__floatsisf+0x12>

00000ce6 <__floatsisf>:
 ce6:	97 fb       	bst	r25, 7
 ce8:	3e f4       	brtc	.+14     	; 0xcf8 <__floatsisf+0x12>
 cea:	90 95       	com	r25
 cec:	80 95       	com	r24
 cee:	70 95       	com	r23
 cf0:	61 95       	neg	r22
 cf2:	7f 4f       	sbci	r23, 0xFF	; 255
 cf4:	8f 4f       	sbci	r24, 0xFF	; 255
 cf6:	9f 4f       	sbci	r25, 0xFF	; 255
 cf8:	99 23       	and	r25, r25
 cfa:	a9 f0       	breq	.+42     	; 0xd26 <__floatsisf+0x40>
 cfc:	f9 2f       	mov	r31, r25
 cfe:	96 e9       	ldi	r25, 0x96	; 150
 d00:	bb 27       	eor	r27, r27
 d02:	93 95       	inc	r25
 d04:	f6 95       	lsr	r31
 d06:	87 95       	ror	r24
 d08:	77 95       	ror	r23
 d0a:	67 95       	ror	r22
 d0c:	b7 95       	ror	r27
 d0e:	f1 11       	cpse	r31, r1
 d10:	f8 cf       	rjmp	.-16     	; 0xd02 <__floatsisf+0x1c>
 d12:	fa f4       	brpl	.+62     	; 0xd52 <__floatsisf+0x6c>
 d14:	bb 0f       	add	r27, r27
 d16:	11 f4       	brne	.+4      	; 0xd1c <__floatsisf+0x36>
 d18:	60 ff       	sbrs	r22, 0
 d1a:	1b c0       	rjmp	.+54     	; 0xd52 <__floatsisf+0x6c>
 d1c:	6f 5f       	subi	r22, 0xFF	; 255
 d1e:	7f 4f       	sbci	r23, 0xFF	; 255
 d20:	8f 4f       	sbci	r24, 0xFF	; 255
 d22:	9f 4f       	sbci	r25, 0xFF	; 255
 d24:	16 c0       	rjmp	.+44     	; 0xd52 <__floatsisf+0x6c>
 d26:	88 23       	and	r24, r24
 d28:	11 f0       	breq	.+4      	; 0xd2e <__floatsisf+0x48>
 d2a:	96 e9       	ldi	r25, 0x96	; 150
 d2c:	11 c0       	rjmp	.+34     	; 0xd50 <__floatsisf+0x6a>
 d2e:	77 23       	and	r23, r23
 d30:	21 f0       	breq	.+8      	; 0xd3a <__floatsisf+0x54>
 d32:	9e e8       	ldi	r25, 0x8E	; 142
 d34:	87 2f       	mov	r24, r23
 d36:	76 2f       	mov	r23, r22
 d38:	05 c0       	rjmp	.+10     	; 0xd44 <__floatsisf+0x5e>
 d3a:	66 23       	and	r22, r22
 d3c:	71 f0       	breq	.+28     	; 0xd5a <__floatsisf+0x74>
 d3e:	96 e8       	ldi	r25, 0x86	; 134
 d40:	86 2f       	mov	r24, r22
 d42:	70 e0       	ldi	r23, 0x00	; 0
 d44:	60 e0       	ldi	r22, 0x00	; 0
 d46:	2a f0       	brmi	.+10     	; 0xd52 <__floatsisf+0x6c>
 d48:	9a 95       	dec	r25
 d4a:	66 0f       	add	r22, r22
 d4c:	77 1f       	adc	r23, r23
 d4e:	88 1f       	adc	r24, r24
 d50:	da f7       	brpl	.-10     	; 0xd48 <__floatsisf+0x62>
 d52:	88 0f       	add	r24, r24
 d54:	96 95       	lsr	r25
 d56:	87 95       	ror	r24
 d58:	97 f9       	bld	r25, 7
 d5a:	08 95       	ret

00000d5c <__fp_inf>:
 d5c:	97 f9       	bld	r25, 7
 d5e:	9f 67       	ori	r25, 0x7F	; 127
 d60:	80 e8       	ldi	r24, 0x80	; 128
 d62:	70 e0       	ldi	r23, 0x00	; 0
 d64:	60 e0       	ldi	r22, 0x00	; 0
 d66:	08 95       	ret

00000d68 <__fp_nan>:
 d68:	9f ef       	ldi	r25, 0xFF	; 255
 d6a:	80 ec       	ldi	r24, 0xC0	; 192
 d6c:	08 95       	ret

00000d6e <__fp_pscA>:
 d6e:	00 24       	eor	r0, r0
 d70:	0a 94       	dec	r0
 d72:	16 16       	cp	r1, r22
 d74:	17 06       	cpc	r1, r23
 d76:	18 06       	cpc	r1, r24
 d78:	09 06       	cpc	r0, r25
 d7a:	08 95       	ret

00000d7c <__fp_pscB>:
 d7c:	00 24       	eor	r0, r0
 d7e:	0a 94       	dec	r0
 d80:	12 16       	cp	r1, r18
 d82:	13 06       	cpc	r1, r19
 d84:	14 06       	cpc	r1, r20
 d86:	05 06       	cpc	r0, r21
 d88:	08 95       	ret

00000d8a <__fp_round>:
 d8a:	09 2e       	mov	r0, r25
 d8c:	03 94       	inc	r0
 d8e:	00 0c       	add	r0, r0
 d90:	11 f4       	brne	.+4      	; 0xd96 <__fp_round+0xc>
 d92:	88 23       	and	r24, r24
 d94:	52 f0       	brmi	.+20     	; 0xdaa <__fp_round+0x20>
 d96:	bb 0f       	add	r27, r27
 d98:	40 f4       	brcc	.+16     	; 0xdaa <__fp_round+0x20>
 d9a:	bf 2b       	or	r27, r31
 d9c:	11 f4       	brne	.+4      	; 0xda2 <__fp_round+0x18>
 d9e:	60 ff       	sbrs	r22, 0
 da0:	04 c0       	rjmp	.+8      	; 0xdaa <__fp_round+0x20>
 da2:	6f 5f       	subi	r22, 0xFF	; 255
 da4:	7f 4f       	sbci	r23, 0xFF	; 255
 da6:	8f 4f       	sbci	r24, 0xFF	; 255
 da8:	9f 4f       	sbci	r25, 0xFF	; 255
 daa:	08 95       	ret

00000dac <__fp_split3>:
 dac:	57 fd       	sbrc	r21, 7
 dae:	90 58       	subi	r25, 0x80	; 128
 db0:	44 0f       	add	r20, r20
 db2:	55 1f       	adc	r21, r21
 db4:	59 f0       	breq	.+22     	; 0xdcc <__fp_splitA+0x10>
 db6:	5f 3f       	cpi	r21, 0xFF	; 255
 db8:	71 f0       	breq	.+28     	; 0xdd6 <__fp_splitA+0x1a>
 dba:	47 95       	ror	r20

00000dbc <__fp_splitA>:
 dbc:	88 0f       	add	r24, r24
 dbe:	97 fb       	bst	r25, 7
 dc0:	99 1f       	adc	r25, r25
 dc2:	61 f0       	breq	.+24     	; 0xddc <__fp_splitA+0x20>
 dc4:	9f 3f       	cpi	r25, 0xFF	; 255
 dc6:	79 f0       	breq	.+30     	; 0xde6 <__fp_splitA+0x2a>
 dc8:	87 95       	ror	r24
 dca:	08 95       	ret
 dcc:	12 16       	cp	r1, r18
 dce:	13 06       	cpc	r1, r19
 dd0:	14 06       	cpc	r1, r20
 dd2:	55 1f       	adc	r21, r21
 dd4:	f2 cf       	rjmp	.-28     	; 0xdba <__fp_split3+0xe>
 dd6:	46 95       	lsr	r20
 dd8:	f1 df       	rcall	.-30     	; 0xdbc <__fp_splitA>
 dda:	08 c0       	rjmp	.+16     	; 0xdec <__fp_splitA+0x30>
 ddc:	16 16       	cp	r1, r22
 dde:	17 06       	cpc	r1, r23
 de0:	18 06       	cpc	r1, r24
 de2:	99 1f       	adc	r25, r25
 de4:	f1 cf       	rjmp	.-30     	; 0xdc8 <__fp_splitA+0xc>
 de6:	86 95       	lsr	r24
 de8:	71 05       	cpc	r23, r1
 dea:	61 05       	cpc	r22, r1
 dec:	08 94       	sec
 dee:	08 95       	ret

00000df0 <__fp_zero>:
 df0:	e8 94       	clt

00000df2 <__fp_szero>:
 df2:	bb 27       	eor	r27, r27
 df4:	66 27       	eor	r22, r22
 df6:	77 27       	eor	r23, r23
 df8:	cb 01       	movw	r24, r22
 dfa:	97 f9       	bld	r25, 7
 dfc:	08 95       	ret

00000dfe <__divmodhi4>:
 dfe:	97 fb       	bst	r25, 7
 e00:	07 2e       	mov	r0, r23
 e02:	16 f4       	brtc	.+4      	; 0xe08 <__divmodhi4+0xa>
 e04:	00 94       	com	r0
 e06:	07 d0       	rcall	.+14     	; 0xe16 <__divmodhi4_neg1>
 e08:	77 fd       	sbrc	r23, 7
 e0a:	09 d0       	rcall	.+18     	; 0xe1e <__divmodhi4_neg2>
 e0c:	0e 94 13 07 	call	0xe26	; 0xe26 <__udivmodhi4>
 e10:	07 fc       	sbrc	r0, 7
 e12:	05 d0       	rcall	.+10     	; 0xe1e <__divmodhi4_neg2>
 e14:	3e f4       	brtc	.+14     	; 0xe24 <__divmodhi4_exit>

00000e16 <__divmodhi4_neg1>:
 e16:	90 95       	com	r25
 e18:	81 95       	neg	r24
 e1a:	9f 4f       	sbci	r25, 0xFF	; 255
 e1c:	08 95       	ret

00000e1e <__divmodhi4_neg2>:
 e1e:	70 95       	com	r23
 e20:	61 95       	neg	r22
 e22:	7f 4f       	sbci	r23, 0xFF	; 255

00000e24 <__divmodhi4_exit>:
 e24:	08 95       	ret

00000e26 <__udivmodhi4>:
 e26:	aa 1b       	sub	r26, r26
 e28:	bb 1b       	sub	r27, r27
 e2a:	51 e1       	ldi	r21, 0x11	; 17
 e2c:	07 c0       	rjmp	.+14     	; 0xe3c <__udivmodhi4_ep>

00000e2e <__udivmodhi4_loop>:
 e2e:	aa 1f       	adc	r26, r26
 e30:	bb 1f       	adc	r27, r27
 e32:	a6 17       	cp	r26, r22
 e34:	b7 07       	cpc	r27, r23
 e36:	10 f0       	brcs	.+4      	; 0xe3c <__udivmodhi4_ep>
 e38:	a6 1b       	sub	r26, r22
 e3a:	b7 0b       	sbc	r27, r23

00000e3c <__udivmodhi4_ep>:
 e3c:	88 1f       	adc	r24, r24
 e3e:	99 1f       	adc	r25, r25
 e40:	5a 95       	dec	r21
 e42:	a9 f7       	brne	.-22     	; 0xe2e <__udivmodhi4_loop>
 e44:	80 95       	com	r24
 e46:	90 95       	com	r25
 e48:	bc 01       	movw	r22, r24
 e4a:	cd 01       	movw	r24, r26
 e4c:	08 95       	ret

00000e4e <__itoa_ncheck>:
 e4e:	bb 27       	eor	r27, r27
 e50:	4a 30       	cpi	r20, 0x0A	; 10
 e52:	31 f4       	brne	.+12     	; 0xe60 <__itoa_ncheck+0x12>
 e54:	99 23       	and	r25, r25
 e56:	22 f4       	brpl	.+8      	; 0xe60 <__itoa_ncheck+0x12>
 e58:	bd e2       	ldi	r27, 0x2D	; 45
 e5a:	90 95       	com	r25
 e5c:	81 95       	neg	r24
 e5e:	9f 4f       	sbci	r25, 0xFF	; 255
 e60:	0c 94 33 07 	jmp	0xe66	; 0xe66 <__utoa_common>

00000e64 <__utoa_ncheck>:
 e64:	bb 27       	eor	r27, r27

00000e66 <__utoa_common>:
 e66:	fb 01       	movw	r30, r22
 e68:	55 27       	eor	r21, r21
 e6a:	aa 27       	eor	r26, r26
 e6c:	88 0f       	add	r24, r24
 e6e:	99 1f       	adc	r25, r25
 e70:	aa 1f       	adc	r26, r26
 e72:	a4 17       	cp	r26, r20
 e74:	10 f0       	brcs	.+4      	; 0xe7a <__utoa_common+0x14>
 e76:	a4 1b       	sub	r26, r20
 e78:	83 95       	inc	r24
 e7a:	50 51       	subi	r21, 0x10	; 16
 e7c:	b9 f7       	brne	.-18     	; 0xe6c <__utoa_common+0x6>
 e7e:	a0 5d       	subi	r26, 0xD0	; 208
 e80:	aa 33       	cpi	r26, 0x3A	; 58
 e82:	08 f0       	brcs	.+2      	; 0xe86 <__utoa_common+0x20>
 e84:	a9 5d       	subi	r26, 0xD9	; 217
 e86:	a1 93       	st	Z+, r26
 e88:	00 97       	sbiw	r24, 0x00	; 0
 e8a:	79 f7       	brne	.-34     	; 0xe6a <__utoa_common+0x4>
 e8c:	b1 11       	cpse	r27, r1
 e8e:	b1 93       	st	Z+, r27
 e90:	11 92       	st	Z+, r1
 e92:	cb 01       	movw	r24, r22
 e94:	0c 94 4c 07 	jmp	0xe98	; 0xe98 <strrev>

00000e98 <strrev>:
 e98:	dc 01       	movw	r26, r24
 e9a:	fc 01       	movw	r30, r24
 e9c:	67 2f       	mov	r22, r23
 e9e:	71 91       	ld	r23, Z+
 ea0:	77 23       	and	r23, r23
 ea2:	e1 f7       	brne	.-8      	; 0xe9c <strrev+0x4>
 ea4:	32 97       	sbiw	r30, 0x02	; 2
 ea6:	04 c0       	rjmp	.+8      	; 0xeb0 <strrev+0x18>
 ea8:	7c 91       	ld	r23, X
 eaa:	6d 93       	st	X+, r22
 eac:	70 83       	st	Z, r23
 eae:	62 91       	ld	r22, -Z
 eb0:	ae 17       	cp	r26, r30
 eb2:	bf 07       	cpc	r27, r31
 eb4:	c8 f3       	brcs	.-14     	; 0xea8 <strrev+0x10>
 eb6:	08 95       	ret

00000eb8 <_exit>:
 eb8:	f8 94       	cli

00000eba <__stop_program>:
 eba:	ff cf       	rjmp	.-2      	; 0xeba <__stop_program>
