
ultrasonicTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000042e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000042e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000042e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000460  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000aa9  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007a4  00000000  00000000  00000fb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000598  00000000  00000000  0000175d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  00001cf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000466  00000000  00000000  00001dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000649  00000000  00000000  00002236  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000287f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 cd 01 	call	0x39a	; 0x39a <main>
  88:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <digitalWrite>:
	while(*StringPtr != 0x00){
		while(!(UCSR0A& (1<<UDRE0)));
		UDR0=*StringPtr;
		StringPtr++;
	}
}
  90:	61 15       	cp	r22, r1
  92:	71 05       	cpc	r23, r1
  94:	e1 f5       	brne	.+120    	; 0x10e <digitalWrite+0x7e>
  96:	88 30       	cpi	r24, 0x08	; 8
  98:	91 05       	cpc	r25, r1
  9a:	70 f4       	brcc	.+28     	; 0xb8 <digitalWrite+0x28>
  9c:	4b b1       	in	r20, 0x0b	; 11
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	b9 01       	movw	r22, r18
  a4:	02 c0       	rjmp	.+4      	; 0xaa <digitalWrite+0x1a>
  a6:	66 0f       	add	r22, r22
  a8:	77 1f       	adc	r23, r23
  aa:	8a 95       	dec	r24
  ac:	e2 f7       	brpl	.-8      	; 0xa6 <digitalWrite+0x16>
  ae:	cb 01       	movw	r24, r22
  b0:	80 95       	com	r24
  b2:	84 23       	and	r24, r20
  b4:	8b b9       	out	0x0b, r24	; 11
  b6:	08 95       	ret
  b8:	9c 01       	movw	r18, r24
  ba:	28 50       	subi	r18, 0x08	; 8
  bc:	31 09       	sbc	r19, r1
  be:	27 30       	cpi	r18, 0x07	; 7
  c0:	31 05       	cpc	r19, r1
  c2:	78 f4       	brcc	.+30     	; 0xe2 <digitalWrite+0x52>
  c4:	48 b1       	in	r20, 0x08	; 8
  c6:	c9 01       	movw	r24, r18
  c8:	21 e0       	ldi	r18, 0x01	; 1
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	b9 01       	movw	r22, r18
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <digitalWrite+0x44>
  d0:	66 0f       	add	r22, r22
  d2:	77 1f       	adc	r23, r23
  d4:	8a 95       	dec	r24
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <digitalWrite+0x40>
  d8:	cb 01       	movw	r24, r22
  da:	80 95       	com	r24
  dc:	84 23       	and	r24, r20
  de:	88 b9       	out	0x08, r24	; 8
  e0:	08 95       	ret
  e2:	9c 01       	movw	r18, r24
  e4:	2f 50       	subi	r18, 0x0F	; 15
  e6:	31 09       	sbc	r19, r1
  e8:	28 30       	cpi	r18, 0x08	; 8
  ea:	31 05       	cpc	r19, r1
  ec:	08 f0       	brcs	.+2      	; 0xf0 <digitalWrite+0x60>
  ee:	49 c0       	rjmp	.+146    	; 0x182 <digitalWrite+0xf2>
  f0:	45 b1       	in	r20, 0x05	; 5
  f2:	c9 01       	movw	r24, r18
  f4:	21 e0       	ldi	r18, 0x01	; 1
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	b9 01       	movw	r22, r18
  fa:	02 c0       	rjmp	.+4      	; 0x100 <digitalWrite+0x70>
  fc:	66 0f       	add	r22, r22
  fe:	77 1f       	adc	r23, r23
 100:	8a 95       	dec	r24
 102:	e2 f7       	brpl	.-8      	; 0xfc <digitalWrite+0x6c>
 104:	cb 01       	movw	r24, r22
 106:	80 95       	com	r24
 108:	84 23       	and	r24, r20
 10a:	85 b9       	out	0x05, r24	; 5
 10c:	08 95       	ret
 10e:	61 30       	cpi	r22, 0x01	; 1
 110:	71 05       	cpc	r23, r1
 112:	b9 f5       	brne	.+110    	; 0x182 <digitalWrite+0xf2>
 114:	88 30       	cpi	r24, 0x08	; 8
 116:	91 05       	cpc	r25, r1
 118:	68 f4       	brcc	.+26     	; 0x134 <digitalWrite+0xa4>
 11a:	4b b1       	in	r20, 0x0b	; 11
 11c:	21 e0       	ldi	r18, 0x01	; 1
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	b9 01       	movw	r22, r18
 122:	02 c0       	rjmp	.+4      	; 0x128 <digitalWrite+0x98>
 124:	66 0f       	add	r22, r22
 126:	77 1f       	adc	r23, r23
 128:	8a 95       	dec	r24
 12a:	e2 f7       	brpl	.-8      	; 0x124 <digitalWrite+0x94>
 12c:	cb 01       	movw	r24, r22
 12e:	84 2b       	or	r24, r20
 130:	8b b9       	out	0x0b, r24	; 11
 132:	08 95       	ret
 134:	9c 01       	movw	r18, r24
 136:	28 50       	subi	r18, 0x08	; 8
 138:	31 09       	sbc	r19, r1
 13a:	27 30       	cpi	r18, 0x07	; 7
 13c:	31 05       	cpc	r19, r1
 13e:	70 f4       	brcc	.+28     	; 0x15c <digitalWrite+0xcc>
 140:	48 b1       	in	r20, 0x08	; 8
 142:	c9 01       	movw	r24, r18
 144:	21 e0       	ldi	r18, 0x01	; 1
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	b9 01       	movw	r22, r18
 14a:	02 c0       	rjmp	.+4      	; 0x150 <digitalWrite+0xc0>
 14c:	66 0f       	add	r22, r22
 14e:	77 1f       	adc	r23, r23
 150:	8a 95       	dec	r24
 152:	e2 f7       	brpl	.-8      	; 0x14c <digitalWrite+0xbc>
 154:	cb 01       	movw	r24, r22
 156:	84 2b       	or	r24, r20
 158:	88 b9       	out	0x08, r24	; 8
 15a:	08 95       	ret
 15c:	9c 01       	movw	r18, r24
 15e:	2f 50       	subi	r18, 0x0F	; 15
 160:	31 09       	sbc	r19, r1
 162:	28 30       	cpi	r18, 0x08	; 8
 164:	31 05       	cpc	r19, r1
 166:	68 f4       	brcc	.+26     	; 0x182 <digitalWrite+0xf2>
 168:	45 b1       	in	r20, 0x05	; 5
 16a:	c9 01       	movw	r24, r18
 16c:	21 e0       	ldi	r18, 0x01	; 1
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	b9 01       	movw	r22, r18
 172:	02 c0       	rjmp	.+4      	; 0x178 <digitalWrite+0xe8>
 174:	66 0f       	add	r22, r22
 176:	77 1f       	adc	r23, r23
 178:	8a 95       	dec	r24
 17a:	e2 f7       	brpl	.-8      	; 0x174 <digitalWrite+0xe4>
 17c:	cb 01       	movw	r24, r22
 17e:	84 2b       	or	r24, r20
 180:	85 b9       	out	0x05, r24	; 5
 182:	08 95       	ret

00000184 <pinMode>:
 184:	61 15       	cp	r22, r1
 186:	71 05       	cpc	r23, r1
 188:	09 f0       	breq	.+2      	; 0x18c <pinMode+0x8>
 18a:	48 c0       	rjmp	.+144    	; 0x21c <pinMode+0x98>
 18c:	88 30       	cpi	r24, 0x08	; 8
 18e:	91 05       	cpc	r25, r1
 190:	90 f4       	brcc	.+36     	; 0x1b6 <pinMode+0x32>
 192:	4a b1       	in	r20, 0x0a	; 10
 194:	21 e0       	ldi	r18, 0x01	; 1
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	b9 01       	movw	r22, r18
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <pinMode+0x1c>
 19c:	66 0f       	add	r22, r22
 19e:	77 1f       	adc	r23, r23
 1a0:	8a 95       	dec	r24
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <pinMode+0x18>
 1a4:	cb 01       	movw	r24, r22
 1a6:	96 2f       	mov	r25, r22
 1a8:	90 95       	com	r25
 1aa:	94 23       	and	r25, r20
 1ac:	9a b9       	out	0x0a, r25	; 10
 1ae:	9b b1       	in	r25, 0x0b	; 11
 1b0:	89 2b       	or	r24, r25
 1b2:	8b b9       	out	0x0b, r24	; 11
 1b4:	08 95       	ret
 1b6:	9c 01       	movw	r18, r24
 1b8:	28 50       	subi	r18, 0x08	; 8
 1ba:	31 09       	sbc	r19, r1
 1bc:	27 30       	cpi	r18, 0x07	; 7
 1be:	31 05       	cpc	r19, r1
 1c0:	98 f4       	brcc	.+38     	; 0x1e8 <pinMode+0x64>
 1c2:	47 b1       	in	r20, 0x07	; 7
 1c4:	c9 01       	movw	r24, r18
 1c6:	21 e0       	ldi	r18, 0x01	; 1
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	b9 01       	movw	r22, r18
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <pinMode+0x4e>
 1ce:	66 0f       	add	r22, r22
 1d0:	77 1f       	adc	r23, r23
 1d2:	8a 95       	dec	r24
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <pinMode+0x4a>
 1d6:	cb 01       	movw	r24, r22
 1d8:	96 2f       	mov	r25, r22
 1da:	90 95       	com	r25
 1dc:	94 23       	and	r25, r20
 1de:	97 b9       	out	0x07, r25	; 7
 1e0:	98 b1       	in	r25, 0x08	; 8
 1e2:	89 2b       	or	r24, r25
 1e4:	88 b9       	out	0x08, r24	; 8
 1e6:	08 95       	ret
 1e8:	9c 01       	movw	r18, r24
 1ea:	2f 50       	subi	r18, 0x0F	; 15
 1ec:	31 09       	sbc	r19, r1
 1ee:	28 30       	cpi	r18, 0x08	; 8
 1f0:	31 05       	cpc	r19, r1
 1f2:	08 f0       	brcs	.+2      	; 0x1f6 <pinMode+0x72>
 1f4:	4d c0       	rjmp	.+154    	; 0x290 <pinMode+0x10c>
 1f6:	44 b1       	in	r20, 0x04	; 4
 1f8:	c9 01       	movw	r24, r18
 1fa:	21 e0       	ldi	r18, 0x01	; 1
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	b9 01       	movw	r22, r18
 200:	02 c0       	rjmp	.+4      	; 0x206 <pinMode+0x82>
 202:	66 0f       	add	r22, r22
 204:	77 1f       	adc	r23, r23
 206:	8a 95       	dec	r24
 208:	e2 f7       	brpl	.-8      	; 0x202 <pinMode+0x7e>
 20a:	cb 01       	movw	r24, r22
 20c:	96 2f       	mov	r25, r22
 20e:	90 95       	com	r25
 210:	94 23       	and	r25, r20
 212:	94 b9       	out	0x04, r25	; 4
 214:	95 b1       	in	r25, 0x05	; 5
 216:	89 2b       	or	r24, r25
 218:	85 b9       	out	0x05, r24	; 5
 21a:	08 95       	ret
 21c:	61 30       	cpi	r22, 0x01	; 1
 21e:	71 05       	cpc	r23, r1
 220:	b9 f5       	brne	.+110    	; 0x290 <pinMode+0x10c>
 222:	88 30       	cpi	r24, 0x08	; 8
 224:	91 05       	cpc	r25, r1
 226:	68 f4       	brcc	.+26     	; 0x242 <pinMode+0xbe>
 228:	4a b1       	in	r20, 0x0a	; 10
 22a:	21 e0       	ldi	r18, 0x01	; 1
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	b9 01       	movw	r22, r18
 230:	02 c0       	rjmp	.+4      	; 0x236 <pinMode+0xb2>
 232:	66 0f       	add	r22, r22
 234:	77 1f       	adc	r23, r23
 236:	8a 95       	dec	r24
 238:	e2 f7       	brpl	.-8      	; 0x232 <pinMode+0xae>
 23a:	cb 01       	movw	r24, r22
 23c:	84 2b       	or	r24, r20
 23e:	8a b9       	out	0x0a, r24	; 10
 240:	08 95       	ret
 242:	9c 01       	movw	r18, r24
 244:	28 50       	subi	r18, 0x08	; 8
 246:	31 09       	sbc	r19, r1
 248:	27 30       	cpi	r18, 0x07	; 7
 24a:	31 05       	cpc	r19, r1
 24c:	70 f4       	brcc	.+28     	; 0x26a <pinMode+0xe6>
 24e:	47 b1       	in	r20, 0x07	; 7
 250:	c9 01       	movw	r24, r18
 252:	21 e0       	ldi	r18, 0x01	; 1
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	b9 01       	movw	r22, r18
 258:	02 c0       	rjmp	.+4      	; 0x25e <pinMode+0xda>
 25a:	66 0f       	add	r22, r22
 25c:	77 1f       	adc	r23, r23
 25e:	8a 95       	dec	r24
 260:	e2 f7       	brpl	.-8      	; 0x25a <pinMode+0xd6>
 262:	cb 01       	movw	r24, r22
 264:	84 2b       	or	r24, r20
 266:	87 b9       	out	0x07, r24	; 7
 268:	08 95       	ret
 26a:	9c 01       	movw	r18, r24
 26c:	2f 50       	subi	r18, 0x0F	; 15
 26e:	31 09       	sbc	r19, r1
 270:	28 30       	cpi	r18, 0x08	; 8
 272:	31 05       	cpc	r19, r1
 274:	68 f4       	brcc	.+26     	; 0x290 <pinMode+0x10c>
 276:	44 b1       	in	r20, 0x04	; 4
 278:	c9 01       	movw	r24, r18
 27a:	21 e0       	ldi	r18, 0x01	; 1
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	b9 01       	movw	r22, r18
 280:	02 c0       	rjmp	.+4      	; 0x286 <pinMode+0x102>
 282:	66 0f       	add	r22, r22
 284:	77 1f       	adc	r23, r23
 286:	8a 95       	dec	r24
 288:	e2 f7       	brpl	.-8      	; 0x282 <pinMode+0xfe>
 28a:	cb 01       	movw	r24, r22
 28c:	84 2b       	or	r24, r20
 28e:	84 b9       	out	0x04, r24	; 4
 290:	08 95       	ret

00000292 <setupSerial>:
 292:	e1 e6       	ldi	r30, 0x61	; 97
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	80 e8       	ldi	r24, 0x80	; 128
 298:	80 83       	st	Z, r24
 29a:	10 82       	st	Z, r1
 29c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 2a0:	83 e3       	ldi	r24, 0x33	; 51
 2a2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 2a6:	88 e0       	ldi	r24, 0x08	; 8
 2a8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 2ac:	86 e0       	ldi	r24, 0x06	; 6
 2ae:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 2b2:	08 95       	ret

000002b4 <__vector_13>:

ISR(TIMER1_OVF_vect)
{
 2b4:	1f 92       	push	r1
 2b6:	0f 92       	push	r0
 2b8:	0f b6       	in	r0, 0x3f	; 63
 2ba:	0f 92       	push	r0
 2bc:	11 24       	eor	r1, r1
 2be:	8f 93       	push	r24
 2c0:	9f 93       	push	r25
	TimerOverflow ++; // toggle PC5
 2c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2c6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2ca:	01 96       	adiw	r24, 0x01	; 1
 2cc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2d0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 2d4:	9f 91       	pop	r25
 2d6:	8f 91       	pop	r24
 2d8:	0f 90       	pop	r0
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	0f 90       	pop	r0
 2de:	1f 90       	pop	r1
 2e0:	18 95       	reti

000002e2 <ultrasonic>:


void ultrasonic(){
	digitalWrite(ultrasonicTrig , HIGH);
 2e2:	61 e0       	ldi	r22, 0x01	; 1
 2e4:	70 e0       	ldi	r23, 0x00	; 0
 2e6:	85 e1       	ldi	r24, 0x15	; 21
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	0e 94 48 00 	call	0x90	; 0x90 <digitalWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ee:	8a e1       	ldi	r24, 0x1A	; 26
 2f0:	8a 95       	dec	r24
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <ultrasonic+0xe>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <ultrasonic+0x14>
	_delay_us(10);
	digitalWrite(ultrasonicTrig , LOW);
 2f6:	60 e0       	ldi	r22, 0x00	; 0
 2f8:	70 e0       	ldi	r23, 0x00	; 0
 2fa:	85 e1       	ldi	r24, 0x15	; 21
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 48 00 	call	0x90	; 0x90 <digitalWrite>
	double count = 0;
	digitalWrite(pinLED , HIGH);
 302:	61 e0       	ldi	r22, 0x01	; 1
 304:	70 e0       	ldi	r23, 0x00	; 0
 306:	82 e0       	ldi	r24, 0x02	; 2
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	0e 94 48 00 	call	0x90	; 0x90 <digitalWrite>
	TCNT1 = 0;	/* Clear Timer counter */
 30e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 312:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TCCR1B = 0x41;	/* Capture on rising edge, No pre-scaler*/
 316:	81 e4       	ldi	r24, 0x41	; 65
 318:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIFR1 = (1<<ICF1 | 1<<TOV1);	/* Clear ICP flag (Input Capture flag) and  Timer Overflow flag*/
 31c:	81 e2       	ldi	r24, 0x21	; 33
 31e:	86 bb       	out	0x16, r24	; 22
	/*Calculate width of Echo by Input Capture (ICP) */
	TimerOverflow = 0;
 320:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 324:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	while ((TIFR1 & (1 << ICF1)) == 0)/* Wait for rising edge */
 328:	04 c0       	rjmp	.+8      	; 0x332 <ultrasonic+0x50>
	TCNT1 = 0;	/* Clear Timer counter */
 32a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 32e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TCNT1 = 0;	/* Clear Timer counter */
	TCCR1B = 0x41;	/* Capture on rising edge, No pre-scaler*/
	TIFR1 = (1<<ICF1 | 1<<TOV1);	/* Clear ICP flag (Input Capture flag) and  Timer Overflow flag*/
	/*Calculate width of Echo by Input Capture (ICP) */
	TimerOverflow = 0;
	while ((TIFR1 & (1 << ICF1)) == 0)/* Wait for rising edge */
 332:	b5 9b       	sbis	0x16, 5	; 22
 334:	fa cf       	rjmp	.-12     	; 0x32a <ultrasonic+0x48>
	TCNT1 = 0;	/* Clear Timer counter */
	TCCR1B = 0x01;	/* Capture on falling edge, No pre-scaler */
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIFR1 = (1<<ICF1 | 1<<TOV1);	/* Clear ICP flag (Input Capture flag) and Timer Overflow flag*/
 33c:	81 e2       	ldi	r24, 0x21	; 33
 33e:	86 bb       	out	0x16, r24	; 22
	TimerOverflow = 0;/* Clear Timer overflow count */
 340:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 344:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	while ((TIFR1 & (1 << ICF1)) == 0)/* Wait for falling edge */
 348:	04 c0       	rjmp	.+8      	; 0x352 <ultrasonic+0x70>
	count = TCNT1H * 256 + TCNT1L + (65535 * TimerOverflow);	/* Take count */
 34a:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 34e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	while ((TIFR1 & (1 << ICF1)) == 0)/* Wait for rising edge */
	TCNT1 = 0;	/* Clear Timer counter */
	TCCR1B = 0x01;	/* Capture on falling edge, No pre-scaler */
	TIFR1 = (1<<ICF1 | 1<<TOV1);	/* Clear ICP flag (Input Capture flag) and Timer Overflow flag*/
	TimerOverflow = 0;/* Clear Timer overflow count */
	while ((TIFR1 & (1 << ICF1)) == 0)/* Wait for falling edge */
 352:	b5 9b       	sbis	0x16, 5	; 22
 354:	fa cf       	rjmp	.-12     	; 0x34a <ultrasonic+0x68>
	double distance = (double)count / 466.47;
	//char output[20];
	//dtostrf(distance, 2, 2, output);
	//strcat(output , "cm \n");
	//printString(output);
	digitalWrite(pinLED , LOW);
 356:	60 e0       	ldi	r22, 0x00	; 0
 358:	70 e0       	ldi	r23, 0x00	; 0
 35a:	82 e0       	ldi	r24, 0x02	; 2
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	0e 94 48 00 	call	0x90	; 0x90 <digitalWrite>
 362:	08 95       	ret

00000364 <setup>:
}

void setup(){
	pinMode(ultrasonicTrig , OUTPUT);
 364:	61 e0       	ldi	r22, 0x01	; 1
 366:	70 e0       	ldi	r23, 0x00	; 0
 368:	85 e1       	ldi	r24, 0x15	; 21
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 c2 00 	call	0x184	; 0x184 <pinMode>
	pinMode(ultrasonicEcho , INPUT);
 370:	60 e0       	ldi	r22, 0x00	; 0
 372:	70 e0       	ldi	r23, 0x00	; 0
 374:	8f e0       	ldi	r24, 0x0F	; 15
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	0e 94 c2 00 	call	0x184	; 0x184 <pinMode>
	pinMode(pinLED , OUTPUT);
 37c:	61 e0       	ldi	r22, 0x01	; 1
 37e:	70 e0       	ldi	r23, 0x00	; 0
 380:	82 e0       	ldi	r24, 0x02	; 2
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	0e 94 c2 00 	call	0x184	; 0x184 <pinMode>
	setupSerial();
 388:	0e 94 49 01 	call	0x292	; 0x292 <setupSerial>
	sei();
 38c:	78 94       	sei
	TIMSK1 = (1<<TOIE1);; // enable timer1 overflow interrupt and input
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	TCCR1A = 0;
 394:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 398:	08 95       	ret

0000039a <main>:



int main(void)
{
	setup();
 39a:	0e 94 b2 01 	call	0x364	; 0x364 <setup>
	/* Replace with your application code */
	while (1)
	{
		ultrasonic();
 39e:	0e 94 71 01 	call	0x2e2	; 0x2e2 <ultrasonic>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3a2:	2f ef       	ldi	r18, 0xFF	; 255
 3a4:	80 e7       	ldi	r24, 0x70	; 112
 3a6:	92 e0       	ldi	r25, 0x02	; 2
 3a8:	21 50       	subi	r18, 0x01	; 1
 3aa:	80 40       	sbci	r24, 0x00	; 0
 3ac:	90 40       	sbci	r25, 0x00	; 0
 3ae:	e1 f7       	brne	.-8      	; 0x3a8 <main+0xe>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <main+0x18>
 3b2:	00 00       	nop
 3b4:	f4 cf       	rjmp	.-24     	; 0x39e <main+0x4>

000003b6 <_exit>:
 3b6:	f8 94       	cli

000003b8 <__stop_program>:
 3b8:	ff cf       	rjmp	.-2      	; 0x3b8 <__stop_program>
