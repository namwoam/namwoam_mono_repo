
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000a34  00000aa8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a34  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000aaa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000adc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000016b8  00000000  00000000  00000b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f0  00000000  00000000  0000222c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000795  00000000  00000000  0000291c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000bc  00000000  00000000  000030b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ac  00000000  00000000  00003170  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000794  00000000  00000000  0000351c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00003cb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e3       	ldi	r30, 0x34	; 52
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 a7 04 	call	0x94e	; 0x94e <main>
  8e:	0c 94 18 05 	jmp	0xa30	; 0xa30 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <digitalWrite>:
char currentCharacter = '@';

void digitalWrite(int pin , int n){
	// n=0 LOW
	// n=1 HIGH
	if (n==0){
  96:	61 15       	cp	r22, r1
  98:	71 05       	cpc	r23, r1
  9a:	e1 f5       	brne	.+120    	; 0x114 <digitalWrite+0x7e>
		if  (pin >= 0 && pin <= 7){
  9c:	88 30       	cpi	r24, 0x08	; 8
  9e:	91 05       	cpc	r25, r1
  a0:	70 f4       	brcc	.+28     	; 0xbe <digitalWrite+0x28>
			PORTD = PORTD & ~(1<<pin);
  a2:	4b b1       	in	r20, 0x0b	; 11
  a4:	21 e0       	ldi	r18, 0x01	; 1
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	b9 01       	movw	r22, r18
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <digitalWrite+0x1a>
  ac:	66 0f       	add	r22, r22
  ae:	77 1f       	adc	r23, r23
  b0:	8a 95       	dec	r24
  b2:	e2 f7       	brpl	.-8      	; 0xac <digitalWrite+0x16>
  b4:	cb 01       	movw	r24, r22
  b6:	80 95       	com	r24
  b8:	84 23       	and	r24, r20
  ba:	8b b9       	out	0x0b, r24	; 11
  bc:	08 95       	ret
		}
		else if (pin >= 8 && pin <= 14 ){
  be:	9c 01       	movw	r18, r24
  c0:	28 50       	subi	r18, 0x08	; 8
  c2:	31 09       	sbc	r19, r1
  c4:	27 30       	cpi	r18, 0x07	; 7
  c6:	31 05       	cpc	r19, r1
  c8:	78 f4       	brcc	.+30     	; 0xe8 <digitalWrite+0x52>
			PORTC = PORTC & ~(1<<(pin-8));
  ca:	48 b1       	in	r20, 0x08	; 8
  cc:	c9 01       	movw	r24, r18
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	b9 01       	movw	r22, r18
  d4:	02 c0       	rjmp	.+4      	; 0xda <digitalWrite+0x44>
  d6:	66 0f       	add	r22, r22
  d8:	77 1f       	adc	r23, r23
  da:	8a 95       	dec	r24
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <digitalWrite+0x40>
  de:	cb 01       	movw	r24, r22
  e0:	80 95       	com	r24
  e2:	84 23       	and	r24, r20
  e4:	88 b9       	out	0x08, r24	; 8
  e6:	08 95       	ret
		}
		else if (pin >=15 && pin <= 22 ){
  e8:	9c 01       	movw	r18, r24
  ea:	2f 50       	subi	r18, 0x0F	; 15
  ec:	31 09       	sbc	r19, r1
  ee:	28 30       	cpi	r18, 0x08	; 8
  f0:	31 05       	cpc	r19, r1
  f2:	08 f0       	brcs	.+2      	; 0xf6 <digitalWrite+0x60>
  f4:	49 c0       	rjmp	.+146    	; 0x188 <digitalWrite+0xf2>
			PORTB = PORTB & ~(1<<(pin-15));
  f6:	45 b1       	in	r20, 0x05	; 5
  f8:	c9 01       	movw	r24, r18
  fa:	21 e0       	ldi	r18, 0x01	; 1
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	b9 01       	movw	r22, r18
 100:	02 c0       	rjmp	.+4      	; 0x106 <digitalWrite+0x70>
 102:	66 0f       	add	r22, r22
 104:	77 1f       	adc	r23, r23
 106:	8a 95       	dec	r24
 108:	e2 f7       	brpl	.-8      	; 0x102 <digitalWrite+0x6c>
 10a:	cb 01       	movw	r24, r22
 10c:	80 95       	com	r24
 10e:	84 23       	and	r24, r20
 110:	85 b9       	out	0x05, r24	; 5
 112:	08 95       	ret
		}
	}
	else if ( n == 1){
 114:	61 30       	cpi	r22, 0x01	; 1
 116:	71 05       	cpc	r23, r1
 118:	b9 f5       	brne	.+110    	; 0x188 <digitalWrite+0xf2>
		if (pin >=0 && pin <= 7 ){
 11a:	88 30       	cpi	r24, 0x08	; 8
 11c:	91 05       	cpc	r25, r1
 11e:	68 f4       	brcc	.+26     	; 0x13a <digitalWrite+0xa4>
			PORTD = PORTD | (1<<pin);
 120:	4b b1       	in	r20, 0x0b	; 11
 122:	21 e0       	ldi	r18, 0x01	; 1
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	b9 01       	movw	r22, r18
 128:	02 c0       	rjmp	.+4      	; 0x12e <digitalWrite+0x98>
 12a:	66 0f       	add	r22, r22
 12c:	77 1f       	adc	r23, r23
 12e:	8a 95       	dec	r24
 130:	e2 f7       	brpl	.-8      	; 0x12a <digitalWrite+0x94>
 132:	cb 01       	movw	r24, r22
 134:	84 2b       	or	r24, r20
 136:	8b b9       	out	0x0b, r24	; 11
 138:	08 95       	ret
		}
		else if (pin >=8 && pin <= 14 ){
 13a:	9c 01       	movw	r18, r24
 13c:	28 50       	subi	r18, 0x08	; 8
 13e:	31 09       	sbc	r19, r1
 140:	27 30       	cpi	r18, 0x07	; 7
 142:	31 05       	cpc	r19, r1
 144:	70 f4       	brcc	.+28     	; 0x162 <digitalWrite+0xcc>
			PORTC = PORTC | (1<<(pin - 8));
 146:	48 b1       	in	r20, 0x08	; 8
 148:	c9 01       	movw	r24, r18
 14a:	21 e0       	ldi	r18, 0x01	; 1
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	b9 01       	movw	r22, r18
 150:	02 c0       	rjmp	.+4      	; 0x156 <digitalWrite+0xc0>
 152:	66 0f       	add	r22, r22
 154:	77 1f       	adc	r23, r23
 156:	8a 95       	dec	r24
 158:	e2 f7       	brpl	.-8      	; 0x152 <digitalWrite+0xbc>
 15a:	cb 01       	movw	r24, r22
 15c:	84 2b       	or	r24, r20
 15e:	88 b9       	out	0x08, r24	; 8
 160:	08 95       	ret
		}
		else if (pin >=15 && pin <= 22 ){
 162:	9c 01       	movw	r18, r24
 164:	2f 50       	subi	r18, 0x0F	; 15
 166:	31 09       	sbc	r19, r1
 168:	28 30       	cpi	r18, 0x08	; 8
 16a:	31 05       	cpc	r19, r1
 16c:	68 f4       	brcc	.+26     	; 0x188 <digitalWrite+0xf2>
			PORTB = PORTB | (1<<(pin - 15));
 16e:	45 b1       	in	r20, 0x05	; 5
 170:	c9 01       	movw	r24, r18
 172:	21 e0       	ldi	r18, 0x01	; 1
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	b9 01       	movw	r22, r18
 178:	02 c0       	rjmp	.+4      	; 0x17e <digitalWrite+0xe8>
 17a:	66 0f       	add	r22, r22
 17c:	77 1f       	adc	r23, r23
 17e:	8a 95       	dec	r24
 180:	e2 f7       	brpl	.-8      	; 0x17a <digitalWrite+0xe4>
 182:	cb 01       	movw	r24, r22
 184:	84 2b       	or	r24, r20
 186:	85 b9       	out	0x05, r24	; 5
 188:	08 95       	ret

0000018a <pinMode>:
}

void pinMode(int pin , int n){
	// n=0 INPUT
	// n=1 OUTPUT
	if (n==0){
 18a:	61 15       	cp	r22, r1
 18c:	71 05       	cpc	r23, r1
 18e:	09 f0       	breq	.+2      	; 0x192 <pinMode+0x8>
 190:	48 c0       	rjmp	.+144    	; 0x222 <pinMode+0x98>
		if  (pin >= 0 && pin <= 7){
 192:	88 30       	cpi	r24, 0x08	; 8
 194:	91 05       	cpc	r25, r1
 196:	90 f4       	brcc	.+36     	; 0x1bc <pinMode+0x32>
			DDRD = DDRD & ~(1<<pin);
 198:	4a b1       	in	r20, 0x0a	; 10
 19a:	21 e0       	ldi	r18, 0x01	; 1
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	b9 01       	movw	r22, r18
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <pinMode+0x1c>
 1a2:	66 0f       	add	r22, r22
 1a4:	77 1f       	adc	r23, r23
 1a6:	8a 95       	dec	r24
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <pinMode+0x18>
 1aa:	cb 01       	movw	r24, r22
 1ac:	96 2f       	mov	r25, r22
 1ae:	90 95       	com	r25
 1b0:	94 23       	and	r25, r20
 1b2:	9a b9       	out	0x0a, r25	; 10
			PORTD = PORTD | (1<<pin);
 1b4:	9b b1       	in	r25, 0x0b	; 11
 1b6:	89 2b       	or	r24, r25
 1b8:	8b b9       	out	0x0b, r24	; 11
 1ba:	08 95       	ret
		}
		else if (pin >= 8 && pin <= 14 ){
 1bc:	9c 01       	movw	r18, r24
 1be:	28 50       	subi	r18, 0x08	; 8
 1c0:	31 09       	sbc	r19, r1
 1c2:	27 30       	cpi	r18, 0x07	; 7
 1c4:	31 05       	cpc	r19, r1
 1c6:	98 f4       	brcc	.+38     	; 0x1ee <pinMode+0x64>
			DDRC = DDRC & ~(1<<(pin-8));
 1c8:	47 b1       	in	r20, 0x07	; 7
 1ca:	c9 01       	movw	r24, r18
 1cc:	21 e0       	ldi	r18, 0x01	; 1
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	b9 01       	movw	r22, r18
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <pinMode+0x4e>
 1d4:	66 0f       	add	r22, r22
 1d6:	77 1f       	adc	r23, r23
 1d8:	8a 95       	dec	r24
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <pinMode+0x4a>
 1dc:	cb 01       	movw	r24, r22
 1de:	96 2f       	mov	r25, r22
 1e0:	90 95       	com	r25
 1e2:	94 23       	and	r25, r20
 1e4:	97 b9       	out	0x07, r25	; 7
			PORTC = PORTC | (1<<(pin-8));
 1e6:	98 b1       	in	r25, 0x08	; 8
 1e8:	89 2b       	or	r24, r25
 1ea:	88 b9       	out	0x08, r24	; 8
 1ec:	08 95       	ret
		}
		else if (pin >=15 && pin <= 22){
 1ee:	9c 01       	movw	r18, r24
 1f0:	2f 50       	subi	r18, 0x0F	; 15
 1f2:	31 09       	sbc	r19, r1
 1f4:	28 30       	cpi	r18, 0x08	; 8
 1f6:	31 05       	cpc	r19, r1
 1f8:	08 f0       	brcs	.+2      	; 0x1fc <pinMode+0x72>
 1fa:	4d c0       	rjmp	.+154    	; 0x296 <pinMode+0x10c>
			DDRB = DDRB & ~(1<<(pin-15));
 1fc:	44 b1       	in	r20, 0x04	; 4
 1fe:	c9 01       	movw	r24, r18
 200:	21 e0       	ldi	r18, 0x01	; 1
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	b9 01       	movw	r22, r18
 206:	02 c0       	rjmp	.+4      	; 0x20c <pinMode+0x82>
 208:	66 0f       	add	r22, r22
 20a:	77 1f       	adc	r23, r23
 20c:	8a 95       	dec	r24
 20e:	e2 f7       	brpl	.-8      	; 0x208 <pinMode+0x7e>
 210:	cb 01       	movw	r24, r22
 212:	96 2f       	mov	r25, r22
 214:	90 95       	com	r25
 216:	94 23       	and	r25, r20
 218:	94 b9       	out	0x04, r25	; 4
			PORTB = PORTB | (1<<(pin-15));
 21a:	95 b1       	in	r25, 0x05	; 5
 21c:	89 2b       	or	r24, r25
 21e:	85 b9       	out	0x05, r24	; 5
 220:	08 95       	ret
		}
	}
	else if ( n == 1){
 222:	61 30       	cpi	r22, 0x01	; 1
 224:	71 05       	cpc	r23, r1
 226:	b9 f5       	brne	.+110    	; 0x296 <pinMode+0x10c>
		if (pin >=0 && pin <= 7 ){
 228:	88 30       	cpi	r24, 0x08	; 8
 22a:	91 05       	cpc	r25, r1
 22c:	68 f4       	brcc	.+26     	; 0x248 <pinMode+0xbe>
			DDRD = DDRD | (1<<pin);
 22e:	4a b1       	in	r20, 0x0a	; 10
 230:	21 e0       	ldi	r18, 0x01	; 1
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	b9 01       	movw	r22, r18
 236:	02 c0       	rjmp	.+4      	; 0x23c <pinMode+0xb2>
 238:	66 0f       	add	r22, r22
 23a:	77 1f       	adc	r23, r23
 23c:	8a 95       	dec	r24
 23e:	e2 f7       	brpl	.-8      	; 0x238 <pinMode+0xae>
 240:	cb 01       	movw	r24, r22
 242:	84 2b       	or	r24, r20
 244:	8a b9       	out	0x0a, r24	; 10
 246:	08 95       	ret
		}
		else if (pin >=8 && pin <= 14 ){
 248:	9c 01       	movw	r18, r24
 24a:	28 50       	subi	r18, 0x08	; 8
 24c:	31 09       	sbc	r19, r1
 24e:	27 30       	cpi	r18, 0x07	; 7
 250:	31 05       	cpc	r19, r1
 252:	70 f4       	brcc	.+28     	; 0x270 <pinMode+0xe6>
			DDRC = DDRC | (1<<(pin - 8));
 254:	47 b1       	in	r20, 0x07	; 7
 256:	c9 01       	movw	r24, r18
 258:	21 e0       	ldi	r18, 0x01	; 1
 25a:	30 e0       	ldi	r19, 0x00	; 0
 25c:	b9 01       	movw	r22, r18
 25e:	02 c0       	rjmp	.+4      	; 0x264 <pinMode+0xda>
 260:	66 0f       	add	r22, r22
 262:	77 1f       	adc	r23, r23
 264:	8a 95       	dec	r24
 266:	e2 f7       	brpl	.-8      	; 0x260 <pinMode+0xd6>
 268:	cb 01       	movw	r24, r22
 26a:	84 2b       	or	r24, r20
 26c:	87 b9       	out	0x07, r24	; 7
 26e:	08 95       	ret
		}
		else if (pin >=15 && pin <= 22){
 270:	9c 01       	movw	r18, r24
 272:	2f 50       	subi	r18, 0x0F	; 15
 274:	31 09       	sbc	r19, r1
 276:	28 30       	cpi	r18, 0x08	; 8
 278:	31 05       	cpc	r19, r1
 27a:	68 f4       	brcc	.+26     	; 0x296 <pinMode+0x10c>
			DDRB = DDRB | (1<<(pin - 15));
 27c:	44 b1       	in	r20, 0x04	; 4
 27e:	c9 01       	movw	r24, r18
 280:	21 e0       	ldi	r18, 0x01	; 1
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	b9 01       	movw	r22, r18
 286:	02 c0       	rjmp	.+4      	; 0x28c <pinMode+0x102>
 288:	66 0f       	add	r22, r22
 28a:	77 1f       	adc	r23, r23
 28c:	8a 95       	dec	r24
 28e:	e2 f7       	brpl	.-8      	; 0x288 <pinMode+0xfe>
 290:	cb 01       	movw	r24, r22
 292:	84 2b       	or	r24, r20
 294:	84 b9       	out	0x04, r24	; 4
 296:	08 95       	ret

00000298 <digitalRead>:
		}
	}
	return ;
}

int digitalRead(int pin){
 298:	ac 01       	movw	r20, r24
	int signal = 0;
	// return 0 if LOW , 1 if HIGH
	if (pin >=0 && pin <=7){
 29a:	88 30       	cpi	r24, 0x08	; 8
 29c:	91 05       	cpc	r25, r1
 29e:	58 f4       	brcc	.+22     	; 0x2b6 <digitalRead+0x1e>
		signal = ((PIND >> (pin)) & 1);
 2a0:	29 b1       	in	r18, 0x09	; 9
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	c9 01       	movw	r24, r18
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <digitalRead+0x14>
 2a8:	95 95       	asr	r25
 2aa:	87 95       	ror	r24
 2ac:	4a 95       	dec	r20
 2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <digitalRead+0x10>
 2b0:	81 70       	andi	r24, 0x01	; 1
 2b2:	99 27       	eor	r25, r25
 2b4:	23 c0       	rjmp	.+70     	; 0x2fc <digitalRead+0x64>
	}
	else if (pin >= 8 && pin <= 14){
 2b6:	08 97       	sbiw	r24, 0x08	; 8
 2b8:	07 97       	sbiw	r24, 0x07	; 7
 2ba:	68 f4       	brcc	.+26     	; 0x2d6 <digitalRead+0x3e>
		signal = ((PINC >> (pin -8 )) & 1);
 2bc:	96 b1       	in	r25, 0x06	; 6
 2be:	48 50       	subi	r20, 0x08	; 8
 2c0:	51 09       	sbc	r21, r1
 2c2:	89 2f       	mov	r24, r25
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <digitalRead+0x34>
 2c8:	95 95       	asr	r25
 2ca:	87 95       	ror	r24
 2cc:	4a 95       	dec	r20
 2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <digitalRead+0x30>
 2d0:	81 70       	andi	r24, 0x01	; 1
 2d2:	99 27       	eor	r25, r25
 2d4:	13 c0       	rjmp	.+38     	; 0x2fc <digitalRead+0x64>
	}
	else if (pin >=15 && pin <= 22){
 2d6:	ca 01       	movw	r24, r20
 2d8:	0f 97       	sbiw	r24, 0x0f	; 15
 2da:	08 97       	sbiw	r24, 0x08	; 8
 2dc:	68 f4       	brcc	.+26     	; 0x2f8 <digitalRead+0x60>
		signal = ((PINB >> (pin -15 )) & 1);
 2de:	93 b1       	in	r25, 0x03	; 3
 2e0:	4f 50       	subi	r20, 0x0F	; 15
 2e2:	51 09       	sbc	r21, r1
 2e4:	89 2f       	mov	r24, r25
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <digitalRead+0x56>
 2ea:	95 95       	asr	r25
 2ec:	87 95       	ror	r24
 2ee:	4a 95       	dec	r20
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <digitalRead+0x52>
 2f2:	81 70       	andi	r24, 0x01	; 1
 2f4:	99 27       	eor	r25, r25
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <digitalRead+0x64>
	}
	return ;
}

int digitalRead(int pin){
	int signal = 0;
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	90 e0       	ldi	r25, 0x00	; 0
		signal = ((PINC >> (pin -8 )) & 1);
	}
	else if (pin >=15 && pin <= 22){
		signal = ((PINB >> (pin -15 )) & 1);
	}
	if (signal == 1){
 2fc:	01 97       	sbiw	r24, 0x01	; 1
 2fe:	19 f4       	brne	.+6      	; 0x306 <digitalRead+0x6e>
		return 1;
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	08 95       	ret
	}
	else {
		return 0;
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 30a:	08 95       	ret

0000030c <displayCharacter>:
return ;
}
*/

void displayCharacter(char ch){
	if (ch == 'A'){
 30c:	81 34       	cpi	r24, 0x41	; 65
 30e:	29 f5       	brne	.+74     	; 0x35a <displayCharacter+0x4e>
		digitalWrite(8 , LOW);
 310:	60 e0       	ldi	r22, 0x00	; 0
 312:	70 e0       	ldi	r23, 0x00	; 0
 314:	88 e0       	ldi	r24, 0x08	; 8
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(9 , LOW);
 31c:	60 e0       	ldi	r22, 0x00	; 0
 31e:	70 e0       	ldi	r23, 0x00	; 0
 320:	89 e0       	ldi	r24, 0x09	; 9
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(10 , LOW);
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	70 e0       	ldi	r23, 0x00	; 0
 32c:	8a e0       	ldi	r24, 0x0A	; 10
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(12 , LOW);
 334:	60 e0       	ldi	r22, 0x00	; 0
 336:	70 e0       	ldi	r23, 0x00	; 0
 338:	8c e0       	ldi	r24, 0x0C	; 12
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(13 , LOW);
 340:	60 e0       	ldi	r22, 0x00	; 0
 342:	70 e0       	ldi	r23, 0x00	; 0
 344:	8d e0       	ldi	r24, 0x0D	; 13
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(SPECIALPORT , LOW);
 34c:	60 e0       	ldi	r22, 0x00	; 0
 34e:	70 e0       	ldi	r23, 0x00	; 0
 350:	80 e1       	ldi	r24, 0x10	; 16
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
 358:	08 95       	ret
	}
	else if (ch == 'B'){
 35a:	82 34       	cpi	r24, 0x42	; 66
 35c:	59 f5       	brne	.+86     	; 0x3b4 <displayCharacter+0xa8>
		digitalWrite(8 , LOW);
 35e:	60 e0       	ldi	r22, 0x00	; 0
 360:	70 e0       	ldi	r23, 0x00	; 0
 362:	88 e0       	ldi	r24, 0x08	; 8
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(9 , LOW);
 36a:	60 e0       	ldi	r22, 0x00	; 0
 36c:	70 e0       	ldi	r23, 0x00	; 0
 36e:	89 e0       	ldi	r24, 0x09	; 9
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(10 , LOW);
 376:	60 e0       	ldi	r22, 0x00	; 0
 378:	70 e0       	ldi	r23, 0x00	; 0
 37a:	8a e0       	ldi	r24, 0x0A	; 10
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(11 , LOW);
 382:	60 e0       	ldi	r22, 0x00	; 0
 384:	70 e0       	ldi	r23, 0x00	; 0
 386:	8b e0       	ldi	r24, 0x0B	; 11
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(12 , LOW);
 38e:	60 e0       	ldi	r22, 0x00	; 0
 390:	70 e0       	ldi	r23, 0x00	; 0
 392:	8c e0       	ldi	r24, 0x0C	; 12
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(13 , LOW);
 39a:	60 e0       	ldi	r22, 0x00	; 0
 39c:	70 e0       	ldi	r23, 0x00	; 0
 39e:	8d e0       	ldi	r24, 0x0D	; 13
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(SPECIALPORT , LOW);
 3a6:	60 e0       	ldi	r22, 0x00	; 0
 3a8:	70 e0       	ldi	r23, 0x00	; 0
 3aa:	80 e1       	ldi	r24, 0x10	; 16
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
 3b2:	08 95       	ret
		
	}
	else if (ch == 'C'){
 3b4:	83 34       	cpi	r24, 0x43	; 67
 3b6:	c9 f4       	brne	.+50     	; 0x3ea <displayCharacter+0xde>
		digitalWrite(8 , LOW);
 3b8:	60 e0       	ldi	r22, 0x00	; 0
 3ba:	70 e0       	ldi	r23, 0x00	; 0
 3bc:	88 e0       	ldi	r24, 0x08	; 8
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(11 , LOW);
 3c4:	60 e0       	ldi	r22, 0x00	; 0
 3c6:	70 e0       	ldi	r23, 0x00	; 0
 3c8:	8b e0       	ldi	r24, 0x0B	; 11
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(12 , LOW);
 3d0:	60 e0       	ldi	r22, 0x00	; 0
 3d2:	70 e0       	ldi	r23, 0x00	; 0
 3d4:	8c e0       	ldi	r24, 0x0C	; 12
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(13 , LOW);
 3dc:	60 e0       	ldi	r22, 0x00	; 0
 3de:	70 e0       	ldi	r23, 0x00	; 0
 3e0:	8d e0       	ldi	r24, 0x0D	; 13
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
 3e8:	08 95       	ret
	}
	else if (ch == 'D'){
 3ea:	84 34       	cpi	r24, 0x44	; 68
 3ec:	29 f5       	brne	.+74     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
		digitalWrite(8 , LOW);
 3ee:	60 e0       	ldi	r22, 0x00	; 0
 3f0:	70 e0       	ldi	r23, 0x00	; 0
 3f2:	88 e0       	ldi	r24, 0x08	; 8
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(9 , LOW);
 3fa:	60 e0       	ldi	r22, 0x00	; 0
 3fc:	70 e0       	ldi	r23, 0x00	; 0
 3fe:	89 e0       	ldi	r24, 0x09	; 9
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(10 , LOW);
 406:	60 e0       	ldi	r22, 0x00	; 0
 408:	70 e0       	ldi	r23, 0x00	; 0
 40a:	8a e0       	ldi	r24, 0x0A	; 10
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(11 , LOW);
 412:	60 e0       	ldi	r22, 0x00	; 0
 414:	70 e0       	ldi	r23, 0x00	; 0
 416:	8b e0       	ldi	r24, 0x0B	; 11
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(12 , LOW);
 41e:	60 e0       	ldi	r22, 0x00	; 0
 420:	70 e0       	ldi	r23, 0x00	; 0
 422:	8c e0       	ldi	r24, 0x0C	; 12
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(13 , LOW);
 42a:	60 e0       	ldi	r22, 0x00	; 0
 42c:	70 e0       	ldi	r23, 0x00	; 0
 42e:	8d e0       	ldi	r24, 0x0D	; 13
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
 436:	08 95       	ret
	}
	else if (ch == 'E'){
 438:	85 34       	cpi	r24, 0x45	; 69
 43a:	f9 f4       	brne	.+62     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
		digitalWrite(8 , LOW);
 43c:	60 e0       	ldi	r22, 0x00	; 0
 43e:	70 e0       	ldi	r23, 0x00	; 0
 440:	88 e0       	ldi	r24, 0x08	; 8
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(11 , LOW);
 448:	60 e0       	ldi	r22, 0x00	; 0
 44a:	70 e0       	ldi	r23, 0x00	; 0
 44c:	8b e0       	ldi	r24, 0x0B	; 11
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(12 , LOW);
 454:	60 e0       	ldi	r22, 0x00	; 0
 456:	70 e0       	ldi	r23, 0x00	; 0
 458:	8c e0       	ldi	r24, 0x0C	; 12
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(13 , LOW);
 460:	60 e0       	ldi	r22, 0x00	; 0
 462:	70 e0       	ldi	r23, 0x00	; 0
 464:	8d e0       	ldi	r24, 0x0D	; 13
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(SPECIALPORT , LOW);
 46c:	60 e0       	ldi	r22, 0x00	; 0
 46e:	70 e0       	ldi	r23, 0x00	; 0
 470:	80 e1       	ldi	r24, 0x10	; 16
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
 478:	08 95       	ret
	}
	else if (ch == 'F'){
 47a:	86 34       	cpi	r24, 0x46	; 70
 47c:	c9 f4       	brne	.+50     	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
		digitalWrite(8 , LOW);
 47e:	60 e0       	ldi	r22, 0x00	; 0
 480:	70 e0       	ldi	r23, 0x00	; 0
 482:	88 e0       	ldi	r24, 0x08	; 8
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(12 , LOW);
 48a:	60 e0       	ldi	r22, 0x00	; 0
 48c:	70 e0       	ldi	r23, 0x00	; 0
 48e:	8c e0       	ldi	r24, 0x0C	; 12
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(13 , LOW);
 496:	60 e0       	ldi	r22, 0x00	; 0
 498:	70 e0       	ldi	r23, 0x00	; 0
 49a:	8d e0       	ldi	r24, 0x0D	; 13
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(SPECIALPORT , LOW);
 4a2:	60 e0       	ldi	r22, 0x00	; 0
 4a4:	70 e0       	ldi	r23, 0x00	; 0
 4a6:	80 e1       	ldi	r24, 0x10	; 16
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
 4ae:	08 95       	ret
	}
	else if (ch == '1'){
 4b0:	81 33       	cpi	r24, 0x31	; 49
 4b2:	69 f4       	brne	.+26     	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
		digitalWrite(9 , LOW);
 4b4:	60 e0       	ldi	r22, 0x00	; 0
 4b6:	70 e0       	ldi	r23, 0x00	; 0
 4b8:	89 e0       	ldi	r24, 0x09	; 9
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(10 , LOW);
 4c0:	60 e0       	ldi	r22, 0x00	; 0
 4c2:	70 e0       	ldi	r23, 0x00	; 0
 4c4:	8a e0       	ldi	r24, 0x0A	; 10
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
 4cc:	08 95       	ret
	}
	else if (ch == '2'){
 4ce:	82 33       	cpi	r24, 0x32	; 50
 4d0:	f9 f4       	brne	.+62     	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
		digitalWrite(8 , LOW);
 4d2:	60 e0       	ldi	r22, 0x00	; 0
 4d4:	70 e0       	ldi	r23, 0x00	; 0
 4d6:	88 e0       	ldi	r24, 0x08	; 8
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(9 , LOW);
 4de:	60 e0       	ldi	r22, 0x00	; 0
 4e0:	70 e0       	ldi	r23, 0x00	; 0
 4e2:	89 e0       	ldi	r24, 0x09	; 9
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(11 , LOW);
 4ea:	60 e0       	ldi	r22, 0x00	; 0
 4ec:	70 e0       	ldi	r23, 0x00	; 0
 4ee:	8b e0       	ldi	r24, 0x0B	; 11
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(12 , LOW);
 4f6:	60 e0       	ldi	r22, 0x00	; 0
 4f8:	70 e0       	ldi	r23, 0x00	; 0
 4fa:	8c e0       	ldi	r24, 0x0C	; 12
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(SPECIALPORT , LOW);
 502:	60 e0       	ldi	r22, 0x00	; 0
 504:	70 e0       	ldi	r23, 0x00	; 0
 506:	80 e1       	ldi	r24, 0x10	; 16
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
 50e:	08 95       	ret
	}
	else if (ch == '3'){
 510:	83 33       	cpi	r24, 0x33	; 51
 512:	f9 f4       	brne	.+62     	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
		digitalWrite(8 , LOW);
 514:	60 e0       	ldi	r22, 0x00	; 0
 516:	70 e0       	ldi	r23, 0x00	; 0
 518:	88 e0       	ldi	r24, 0x08	; 8
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(9 , LOW);
 520:	60 e0       	ldi	r22, 0x00	; 0
 522:	70 e0       	ldi	r23, 0x00	; 0
 524:	89 e0       	ldi	r24, 0x09	; 9
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(10 , LOW);
 52c:	60 e0       	ldi	r22, 0x00	; 0
 52e:	70 e0       	ldi	r23, 0x00	; 0
 530:	8a e0       	ldi	r24, 0x0A	; 10
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(11 , LOW);
 538:	60 e0       	ldi	r22, 0x00	; 0
 53a:	70 e0       	ldi	r23, 0x00	; 0
 53c:	8b e0       	ldi	r24, 0x0B	; 11
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(SPECIALPORT, LOW);
 544:	60 e0       	ldi	r22, 0x00	; 0
 546:	70 e0       	ldi	r23, 0x00	; 0
 548:	80 e1       	ldi	r24, 0x10	; 16
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
 550:	08 95       	ret
	}
	else if (ch == '4'){
 552:	84 33       	cpi	r24, 0x34	; 52
 554:	c9 f4       	brne	.+50     	; 0x588 <__EEPROM_REGION_LENGTH__+0x188>
		digitalWrite(9 , LOW);
 556:	60 e0       	ldi	r22, 0x00	; 0
 558:	70 e0       	ldi	r23, 0x00	; 0
 55a:	89 e0       	ldi	r24, 0x09	; 9
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(10 , LOW);
 562:	60 e0       	ldi	r22, 0x00	; 0
 564:	70 e0       	ldi	r23, 0x00	; 0
 566:	8a e0       	ldi	r24, 0x0A	; 10
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(13 , LOW);
 56e:	60 e0       	ldi	r22, 0x00	; 0
 570:	70 e0       	ldi	r23, 0x00	; 0
 572:	8d e0       	ldi	r24, 0x0D	; 13
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(SPECIALPORT , LOW);
 57a:	60 e0       	ldi	r22, 0x00	; 0
 57c:	70 e0       	ldi	r23, 0x00	; 0
 57e:	80 e1       	ldi	r24, 0x10	; 16
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
 586:	08 95       	ret
	}
	else if (ch == '5'){
 588:	85 33       	cpi	r24, 0x35	; 53
 58a:	f9 f4       	brne	.+62     	; 0x5ca <__EEPROM_REGION_LENGTH__+0x1ca>
		digitalWrite(8 , LOW);
 58c:	60 e0       	ldi	r22, 0x00	; 0
 58e:	70 e0       	ldi	r23, 0x00	; 0
 590:	88 e0       	ldi	r24, 0x08	; 8
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(10 , LOW);
 598:	60 e0       	ldi	r22, 0x00	; 0
 59a:	70 e0       	ldi	r23, 0x00	; 0
 59c:	8a e0       	ldi	r24, 0x0A	; 10
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(11 , LOW);
 5a4:	60 e0       	ldi	r22, 0x00	; 0
 5a6:	70 e0       	ldi	r23, 0x00	; 0
 5a8:	8b e0       	ldi	r24, 0x0B	; 11
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(13 , LOW);
 5b0:	60 e0       	ldi	r22, 0x00	; 0
 5b2:	70 e0       	ldi	r23, 0x00	; 0
 5b4:	8d e0       	ldi	r24, 0x0D	; 13
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(SPECIALPORT , LOW);
 5bc:	60 e0       	ldi	r22, 0x00	; 0
 5be:	70 e0       	ldi	r23, 0x00	; 0
 5c0:	80 e1       	ldi	r24, 0x10	; 16
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
 5c8:	08 95       	ret
	}
	else if (ch == '6'){
 5ca:	86 33       	cpi	r24, 0x36	; 54
 5cc:	29 f5       	brne	.+74     	; 0x618 <__EEPROM_REGION_LENGTH__+0x218>
		digitalWrite(8 , LOW);
 5ce:	60 e0       	ldi	r22, 0x00	; 0
 5d0:	70 e0       	ldi	r23, 0x00	; 0
 5d2:	88 e0       	ldi	r24, 0x08	; 8
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(10 , LOW);
 5da:	60 e0       	ldi	r22, 0x00	; 0
 5dc:	70 e0       	ldi	r23, 0x00	; 0
 5de:	8a e0       	ldi	r24, 0x0A	; 10
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(11 , LOW);
 5e6:	60 e0       	ldi	r22, 0x00	; 0
 5e8:	70 e0       	ldi	r23, 0x00	; 0
 5ea:	8b e0       	ldi	r24, 0x0B	; 11
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(12 , LOW);
 5f2:	60 e0       	ldi	r22, 0x00	; 0
 5f4:	70 e0       	ldi	r23, 0x00	; 0
 5f6:	8c e0       	ldi	r24, 0x0C	; 12
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(13 , LOW);
 5fe:	60 e0       	ldi	r22, 0x00	; 0
 600:	70 e0       	ldi	r23, 0x00	; 0
 602:	8d e0       	ldi	r24, 0x0D	; 13
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(SPECIALPORT , LOW);
 60a:	60 e0       	ldi	r22, 0x00	; 0
 60c:	70 e0       	ldi	r23, 0x00	; 0
 60e:	80 e1       	ldi	r24, 0x10	; 16
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
 616:	08 95       	ret
	}
	else if (ch == '7'){
 618:	87 33       	cpi	r24, 0x37	; 55
 61a:	c9 f4       	brne	.+50     	; 0x64e <__EEPROM_REGION_LENGTH__+0x24e>
		digitalWrite(8 , LOW);
 61c:	60 e0       	ldi	r22, 0x00	; 0
 61e:	70 e0       	ldi	r23, 0x00	; 0
 620:	88 e0       	ldi	r24, 0x08	; 8
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(9 , LOW);
 628:	60 e0       	ldi	r22, 0x00	; 0
 62a:	70 e0       	ldi	r23, 0x00	; 0
 62c:	89 e0       	ldi	r24, 0x09	; 9
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(10 , LOW);
 634:	60 e0       	ldi	r22, 0x00	; 0
 636:	70 e0       	ldi	r23, 0x00	; 0
 638:	8a e0       	ldi	r24, 0x0A	; 10
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(13 , LOW);
 640:	60 e0       	ldi	r22, 0x00	; 0
 642:	70 e0       	ldi	r23, 0x00	; 0
 644:	8d e0       	ldi	r24, 0x0D	; 13
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
 64c:	08 95       	ret
	}
	else if (ch == '8'){
 64e:	88 33       	cpi	r24, 0x38	; 56
 650:	59 f5       	brne	.+86     	; 0x6a8 <__EEPROM_REGION_LENGTH__+0x2a8>
		digitalWrite(8 , LOW);
 652:	60 e0       	ldi	r22, 0x00	; 0
 654:	70 e0       	ldi	r23, 0x00	; 0
 656:	88 e0       	ldi	r24, 0x08	; 8
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(9 , LOW);
 65e:	60 e0       	ldi	r22, 0x00	; 0
 660:	70 e0       	ldi	r23, 0x00	; 0
 662:	89 e0       	ldi	r24, 0x09	; 9
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(10 , LOW);
 66a:	60 e0       	ldi	r22, 0x00	; 0
 66c:	70 e0       	ldi	r23, 0x00	; 0
 66e:	8a e0       	ldi	r24, 0x0A	; 10
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(11 , LOW);
 676:	60 e0       	ldi	r22, 0x00	; 0
 678:	70 e0       	ldi	r23, 0x00	; 0
 67a:	8b e0       	ldi	r24, 0x0B	; 11
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(12 , LOW);
 682:	60 e0       	ldi	r22, 0x00	; 0
 684:	70 e0       	ldi	r23, 0x00	; 0
 686:	8c e0       	ldi	r24, 0x0C	; 12
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(13 , LOW);
 68e:	60 e0       	ldi	r22, 0x00	; 0
 690:	70 e0       	ldi	r23, 0x00	; 0
 692:	8d e0       	ldi	r24, 0x0D	; 13
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(SPECIALPORT , LOW);
 69a:	60 e0       	ldi	r22, 0x00	; 0
 69c:	70 e0       	ldi	r23, 0x00	; 0
 69e:	80 e1       	ldi	r24, 0x10	; 16
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
 6a6:	08 95       	ret
	}
	else if (ch == '9'){
 6a8:	89 33       	cpi	r24, 0x39	; 57
 6aa:	29 f5       	brne	.+74     	; 0x6f6 <__EEPROM_REGION_LENGTH__+0x2f6>
		digitalWrite(8 , LOW);
 6ac:	60 e0       	ldi	r22, 0x00	; 0
 6ae:	70 e0       	ldi	r23, 0x00	; 0
 6b0:	88 e0       	ldi	r24, 0x08	; 8
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(9 , LOW);
 6b8:	60 e0       	ldi	r22, 0x00	; 0
 6ba:	70 e0       	ldi	r23, 0x00	; 0
 6bc:	89 e0       	ldi	r24, 0x09	; 9
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(10 , LOW);
 6c4:	60 e0       	ldi	r22, 0x00	; 0
 6c6:	70 e0       	ldi	r23, 0x00	; 0
 6c8:	8a e0       	ldi	r24, 0x0A	; 10
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(11 , LOW);
 6d0:	60 e0       	ldi	r22, 0x00	; 0
 6d2:	70 e0       	ldi	r23, 0x00	; 0
 6d4:	8b e0       	ldi	r24, 0x0B	; 11
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(13 , LOW);
 6dc:	60 e0       	ldi	r22, 0x00	; 0
 6de:	70 e0       	ldi	r23, 0x00	; 0
 6e0:	8d e0       	ldi	r24, 0x0D	; 13
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(SPECIALPORT , LOW);
 6e8:	60 e0       	ldi	r22, 0x00	; 0
 6ea:	70 e0       	ldi	r23, 0x00	; 0
 6ec:	80 e1       	ldi	r24, 0x10	; 16
 6ee:	90 e0       	ldi	r25, 0x00	; 0
 6f0:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
 6f4:	08 95       	ret
	}
	else if (ch == '0'){
 6f6:	80 33       	cpi	r24, 0x30	; 48
 6f8:	29 f5       	brne	.+74     	; 0x744 <__EEPROM_REGION_LENGTH__+0x344>
		digitalWrite(8 , LOW);
 6fa:	60 e0       	ldi	r22, 0x00	; 0
 6fc:	70 e0       	ldi	r23, 0x00	; 0
 6fe:	88 e0       	ldi	r24, 0x08	; 8
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(9 , LOW);
 706:	60 e0       	ldi	r22, 0x00	; 0
 708:	70 e0       	ldi	r23, 0x00	; 0
 70a:	89 e0       	ldi	r24, 0x09	; 9
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(10 , LOW);
 712:	60 e0       	ldi	r22, 0x00	; 0
 714:	70 e0       	ldi	r23, 0x00	; 0
 716:	8a e0       	ldi	r24, 0x0A	; 10
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(11 , LOW);
 71e:	60 e0       	ldi	r22, 0x00	; 0
 720:	70 e0       	ldi	r23, 0x00	; 0
 722:	8b e0       	ldi	r24, 0x0B	; 11
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(12 , LOW);
 72a:	60 e0       	ldi	r22, 0x00	; 0
 72c:	70 e0       	ldi	r23, 0x00	; 0
 72e:	8c e0       	ldi	r24, 0x0C	; 12
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(13 , LOW);
 736:	60 e0       	ldi	r22, 0x00	; 0
 738:	70 e0       	ldi	r23, 0x00	; 0
 73a:	8d e0       	ldi	r24, 0x0D	; 13
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
 742:	08 95       	ret
	}
	else if (ch == '@'){
 744:	80 34       	cpi	r24, 0x40	; 64
 746:	51 f5       	brne	.+84     	; 0x79c <__EEPROM_REGION_LENGTH__+0x39c>
		digitalWrite(8 , HIGH);
 748:	61 e0       	ldi	r22, 0x01	; 1
 74a:	70 e0       	ldi	r23, 0x00	; 0
 74c:	88 e0       	ldi	r24, 0x08	; 8
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(9 , HIGH);
 754:	61 e0       	ldi	r22, 0x01	; 1
 756:	70 e0       	ldi	r23, 0x00	; 0
 758:	89 e0       	ldi	r24, 0x09	; 9
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(10 , HIGH);
 760:	61 e0       	ldi	r22, 0x01	; 1
 762:	70 e0       	ldi	r23, 0x00	; 0
 764:	8a e0       	ldi	r24, 0x0A	; 10
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(11 , HIGH);
 76c:	61 e0       	ldi	r22, 0x01	; 1
 76e:	70 e0       	ldi	r23, 0x00	; 0
 770:	8b e0       	ldi	r24, 0x0B	; 11
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(12 , HIGH);
 778:	61 e0       	ldi	r22, 0x01	; 1
 77a:	70 e0       	ldi	r23, 0x00	; 0
 77c:	8c e0       	ldi	r24, 0x0C	; 12
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(13 , HIGH);
 784:	61 e0       	ldi	r22, 0x01	; 1
 786:	70 e0       	ldi	r23, 0x00	; 0
 788:	8d e0       	ldi	r24, 0x0D	; 13
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		digitalWrite(SPECIALPORT , HIGH);
 790:	61 e0       	ldi	r22, 0x01	; 1
 792:	70 e0       	ldi	r23, 0x00	; 0
 794:	80 e1       	ldi	r24, 0x10	; 16
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
 79c:	08 95       	ret

0000079e <clear>:
	}
	return ;
}

void clear(){
	displayCharacter('@');
 79e:	80 e4       	ldi	r24, 0x40	; 64
 7a0:	0e 94 86 01 	call	0x30c	; 0x30c <displayCharacter>
 7a4:	08 95       	ret

000007a6 <display>:
}

void display(){
	// PC0 PC1 PC2 PC3 PC4 PC5 PC6 output
	// shine -> low , dark -> high
	displayCharacter(currentCharacter);
 7a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 7aa:	0e 94 86 01 	call	0x30c	; 0x30c <displayCharacter>
 7ae:	08 95       	ret

000007b0 <checkInput>:
}

void checkInput(){
 7b0:	cf 92       	push	r12
 7b2:	df 92       	push	r13
 7b4:	ef 92       	push	r14
 7b6:	ff 92       	push	r15
 7b8:	0f 93       	push	r16
 7ba:	1f 93       	push	r17
 7bc:	cf 93       	push	r28
 7be:	df 93       	push	r29
	int result = -1;
	for (int i=0;i<4;i++){
 7c0:	00 e0       	ldi	r16, 0x00	; 0
 7c2:	10 e0       	ldi	r17, 0x00	; 0
	// shine -> low , dark -> high
	displayCharacter(currentCharacter);
}

void checkInput(){
	int result = -1;
 7c4:	cc 24       	eor	r12, r12
 7c6:	ca 94       	dec	r12
 7c8:	dc 2c       	mov	r13, r12
	for (int i=0;i<4;i++){
 7ca:	2f c0       	rjmp	.+94     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
		digitalWrite(i+4 , HIGH);
 7cc:	78 01       	movw	r14, r16
 7ce:	24 e0       	ldi	r18, 0x04	; 4
 7d0:	e2 0e       	add	r14, r18
 7d2:	f1 1c       	adc	r15, r1
 7d4:	61 e0       	ldi	r22, 0x01	; 1
 7d6:	70 e0       	ldi	r23, 0x00	; 0
 7d8:	c7 01       	movw	r24, r14
 7da:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		for (int k=0;k<4;k++){
 7de:	c0 e0       	ldi	r28, 0x00	; 0
 7e0:	d0 e0       	ldi	r29, 0x00	; 0
 7e2:	19 c0       	rjmp	.+50     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
			if (digitalRead(k) == HIGH){
 7e4:	ce 01       	movw	r24, r28
 7e6:	0e 94 4c 01 	call	0x298	; 0x298 <digitalRead>
 7ea:	01 97       	sbiw	r24, 0x01	; 1
 7ec:	99 f4       	brne	.+38     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
				result = (i+1)*10+(k+1);
 7ee:	c8 01       	movw	r24, r16
 7f0:	01 96       	adiw	r24, 0x01	; 1
 7f2:	9c 01       	movw	r18, r24
 7f4:	22 0f       	add	r18, r18
 7f6:	33 1f       	adc	r19, r19
 7f8:	88 0f       	add	r24, r24
 7fa:	99 1f       	adc	r25, r25
 7fc:	88 0f       	add	r24, r24
 7fe:	99 1f       	adc	r25, r25
 800:	88 0f       	add	r24, r24
 802:	99 1f       	adc	r25, r25
 804:	82 0f       	add	r24, r18
 806:	93 1f       	adc	r25, r19
 808:	6e 01       	movw	r12, r28
 80a:	2f ef       	ldi	r18, 0xFF	; 255
 80c:	c2 1a       	sub	r12, r18
 80e:	d2 0a       	sbc	r13, r18
 810:	c8 0e       	add	r12, r24
 812:	d9 1e       	adc	r13, r25

void checkInput(){
	int result = -1;
	for (int i=0;i<4;i++){
		digitalWrite(i+4 , HIGH);
		for (int k=0;k<4;k++){
 814:	21 96       	adiw	r28, 0x01	; 1
 816:	c4 30       	cpi	r28, 0x04	; 4
 818:	d1 05       	cpc	r29, r1
 81a:	24 f3       	brlt	.-56     	; 0x7e4 <checkInput+0x34>
			if (digitalRead(k) == HIGH){
				result = (i+1)*10+(k+1);
			}
		}
		digitalWrite(i+4 , LOW);
 81c:	60 e0       	ldi	r22, 0x00	; 0
 81e:	70 e0       	ldi	r23, 0x00	; 0
 820:	c7 01       	movw	r24, r14
 822:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
	displayCharacter(currentCharacter);
}

void checkInput(){
	int result = -1;
	for (int i=0;i<4;i++){
 826:	0f 5f       	subi	r16, 0xFF	; 255
 828:	1f 4f       	sbci	r17, 0xFF	; 255
 82a:	04 30       	cpi	r16, 0x04	; 4
 82c:	11 05       	cpc	r17, r1
 82e:	74 f2       	brlt	.-100    	; 0x7cc <checkInput+0x1c>
				result = (i+1)*10+(k+1);
			}
		}
		digitalWrite(i+4 , LOW);
	}
	if (result == -1){
 830:	8f ef       	ldi	r24, 0xFF	; 255
 832:	c8 16       	cp	r12, r24
 834:	d8 06       	cpc	r13, r24
 836:	09 f4       	brne	.+2      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 838:	81 c0       	rjmp	.+258    	; 0x93c <__stack+0x3d>
		return ;
	}
	else {
		clear();
 83a:	0e 94 cf 03 	call	0x79e	; 0x79e <clear>
		if (result == 11){
 83e:	2b e0       	ldi	r18, 0x0B	; 11
 840:	c2 16       	cp	r12, r18
 842:	d1 04       	cpc	r13, r1
 844:	21 f4       	brne	.+8      	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
			currentCharacter = '7';
 846:	87 e3       	ldi	r24, 0x37	; 55
 848:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 84c:	77 c0       	rjmp	.+238    	; 0x93c <__stack+0x3d>
		}
		else if (result == 12){
 84e:	8c e0       	ldi	r24, 0x0C	; 12
 850:	c8 16       	cp	r12, r24
 852:	d1 04       	cpc	r13, r1
 854:	21 f4       	brne	.+8      	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
			currentCharacter = '8';
 856:	88 e3       	ldi	r24, 0x38	; 56
 858:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 85c:	6f c0       	rjmp	.+222    	; 0x93c <__stack+0x3d>
		}
		else if (result == 13){
 85e:	2d e0       	ldi	r18, 0x0D	; 13
 860:	c2 16       	cp	r12, r18
 862:	d1 04       	cpc	r13, r1
 864:	21 f4       	brne	.+8      	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
			currentCharacter = '9';
 866:	89 e3       	ldi	r24, 0x39	; 57
 868:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 86c:	67 c0       	rjmp	.+206    	; 0x93c <__stack+0x3d>
		}
		else if (result == 14){
 86e:	8e e0       	ldi	r24, 0x0E	; 14
 870:	c8 16       	cp	r12, r24
 872:	d1 04       	cpc	r13, r1
 874:	21 f4       	brne	.+8      	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
			currentCharacter = 'C';
 876:	83 e4       	ldi	r24, 0x43	; 67
 878:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 87c:	5f c0       	rjmp	.+190    	; 0x93c <__stack+0x3d>
		}
		else if (result == 21){
 87e:	25 e1       	ldi	r18, 0x15	; 21
 880:	c2 16       	cp	r12, r18
 882:	d1 04       	cpc	r13, r1
 884:	21 f4       	brne	.+8      	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
			currentCharacter = '4';
 886:	84 e3       	ldi	r24, 0x34	; 52
 888:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 88c:	57 c0       	rjmp	.+174    	; 0x93c <__stack+0x3d>
		}
		else if (result == 22){
 88e:	86 e1       	ldi	r24, 0x16	; 22
 890:	c8 16       	cp	r12, r24
 892:	d1 04       	cpc	r13, r1
 894:	21 f4       	brne	.+8      	; 0x89e <__DATA_REGION_LENGTH__+0x9e>
			currentCharacter = '5';
 896:	85 e3       	ldi	r24, 0x35	; 53
 898:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 89c:	4f c0       	rjmp	.+158    	; 0x93c <__stack+0x3d>
		}
		else if (result == 23){
 89e:	27 e1       	ldi	r18, 0x17	; 23
 8a0:	c2 16       	cp	r12, r18
 8a2:	d1 04       	cpc	r13, r1
 8a4:	21 f4       	brne	.+8      	; 0x8ae <__DATA_REGION_LENGTH__+0xae>
			currentCharacter = '6';
 8a6:	86 e3       	ldi	r24, 0x36	; 54
 8a8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 8ac:	47 c0       	rjmp	.+142    	; 0x93c <__stack+0x3d>
		}
		else if (result == 24){
 8ae:	88 e1       	ldi	r24, 0x18	; 24
 8b0:	c8 16       	cp	r12, r24
 8b2:	d1 04       	cpc	r13, r1
 8b4:	21 f4       	brne	.+8      	; 0x8be <__DATA_REGION_LENGTH__+0xbe>
			currentCharacter = 'D';
 8b6:	84 e4       	ldi	r24, 0x44	; 68
 8b8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 8bc:	3f c0       	rjmp	.+126    	; 0x93c <__stack+0x3d>
		}
		else if (result == 31){
 8be:	2f e1       	ldi	r18, 0x1F	; 31
 8c0:	c2 16       	cp	r12, r18
 8c2:	d1 04       	cpc	r13, r1
 8c4:	21 f4       	brne	.+8      	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
			currentCharacter = '1';
 8c6:	81 e3       	ldi	r24, 0x31	; 49
 8c8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 8cc:	37 c0       	rjmp	.+110    	; 0x93c <__stack+0x3d>
		}
		else if (result == 32){
 8ce:	80 e2       	ldi	r24, 0x20	; 32
 8d0:	c8 16       	cp	r12, r24
 8d2:	d1 04       	cpc	r13, r1
 8d4:	21 f4       	brne	.+8      	; 0x8de <__DATA_REGION_LENGTH__+0xde>
			currentCharacter = '2';
 8d6:	82 e3       	ldi	r24, 0x32	; 50
 8d8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 8dc:	2f c0       	rjmp	.+94     	; 0x93c <__stack+0x3d>
		}
		else if (result == 33){
 8de:	21 e2       	ldi	r18, 0x21	; 33
 8e0:	c2 16       	cp	r12, r18
 8e2:	d1 04       	cpc	r13, r1
 8e4:	21 f4       	brne	.+8      	; 0x8ee <__DATA_REGION_LENGTH__+0xee>
			currentCharacter = '3';
 8e6:	83 e3       	ldi	r24, 0x33	; 51
 8e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 8ec:	27 c0       	rjmp	.+78     	; 0x93c <__stack+0x3d>
		}
		else if (result == 34){
 8ee:	82 e2       	ldi	r24, 0x22	; 34
 8f0:	c8 16       	cp	r12, r24
 8f2:	d1 04       	cpc	r13, r1
 8f4:	21 f4       	brne	.+8      	; 0x8fe <__DATA_REGION_LENGTH__+0xfe>
			currentCharacter = 'E';
 8f6:	85 e4       	ldi	r24, 0x45	; 69
 8f8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 8fc:	1f c0       	rjmp	.+62     	; 0x93c <__stack+0x3d>
		}
		else if (result == 41){
 8fe:	29 e2       	ldi	r18, 0x29	; 41
 900:	c2 16       	cp	r12, r18
 902:	d1 04       	cpc	r13, r1
 904:	21 f4       	brne	.+8      	; 0x90e <__stack+0xf>
			currentCharacter = '0';
 906:	80 e3       	ldi	r24, 0x30	; 48
 908:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 90c:	17 c0       	rjmp	.+46     	; 0x93c <__stack+0x3d>
		}
		else if (result == 42){
 90e:	8a e2       	ldi	r24, 0x2A	; 42
 910:	c8 16       	cp	r12, r24
 912:	d1 04       	cpc	r13, r1
 914:	21 f4       	brne	.+8      	; 0x91e <__stack+0x1f>
			currentCharacter = 'A';
 916:	81 e4       	ldi	r24, 0x41	; 65
 918:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 91c:	0f c0       	rjmp	.+30     	; 0x93c <__stack+0x3d>
		}
		else if (result == 43){
 91e:	2b e2       	ldi	r18, 0x2B	; 43
 920:	c2 16       	cp	r12, r18
 922:	d1 04       	cpc	r13, r1
 924:	21 f4       	brne	.+8      	; 0x92e <__stack+0x2f>
			currentCharacter = 'B';
 926:	82 e4       	ldi	r24, 0x42	; 66
 928:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 92c:	07 c0       	rjmp	.+14     	; 0x93c <__stack+0x3d>
		}
		else if (result == 44){
 92e:	8c e2       	ldi	r24, 0x2C	; 44
 930:	c8 16       	cp	r12, r24
 932:	d1 04       	cpc	r13, r1
 934:	19 f4       	brne	.+6      	; 0x93c <__stack+0x3d>
			currentCharacter = 'F';
 936:	86 e4       	ldi	r24, 0x46	; 70
 938:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		}
		
	}
	
}
 93c:	df 91       	pop	r29
 93e:	cf 91       	pop	r28
 940:	1f 91       	pop	r17
 942:	0f 91       	pop	r16
 944:	ff 90       	pop	r15
 946:	ef 90       	pop	r14
 948:	df 90       	pop	r13
 94a:	cf 90       	pop	r12
 94c:	08 95       	ret

0000094e <main>:

int main(void)
{
	pinMode(0 , INPUT);
 94e:	60 e0       	ldi	r22, 0x00	; 0
 950:	70 e0       	ldi	r23, 0x00	; 0
 952:	80 e0       	ldi	r24, 0x00	; 0
 954:	90 e0       	ldi	r25, 0x00	; 0
 956:	0e 94 c5 00 	call	0x18a	; 0x18a <pinMode>
	pinMode(1 , INPUT);
 95a:	60 e0       	ldi	r22, 0x00	; 0
 95c:	70 e0       	ldi	r23, 0x00	; 0
 95e:	81 e0       	ldi	r24, 0x01	; 1
 960:	90 e0       	ldi	r25, 0x00	; 0
 962:	0e 94 c5 00 	call	0x18a	; 0x18a <pinMode>
	pinMode(2 , INPUT);
 966:	60 e0       	ldi	r22, 0x00	; 0
 968:	70 e0       	ldi	r23, 0x00	; 0
 96a:	82 e0       	ldi	r24, 0x02	; 2
 96c:	90 e0       	ldi	r25, 0x00	; 0
 96e:	0e 94 c5 00 	call	0x18a	; 0x18a <pinMode>
	pinMode(3 , INPUT);
 972:	60 e0       	ldi	r22, 0x00	; 0
 974:	70 e0       	ldi	r23, 0x00	; 0
 976:	83 e0       	ldi	r24, 0x03	; 3
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	0e 94 c5 00 	call	0x18a	; 0x18a <pinMode>
	pinMode(4 , OUTPUT);
 97e:	61 e0       	ldi	r22, 0x01	; 1
 980:	70 e0       	ldi	r23, 0x00	; 0
 982:	84 e0       	ldi	r24, 0x04	; 4
 984:	90 e0       	ldi	r25, 0x00	; 0
 986:	0e 94 c5 00 	call	0x18a	; 0x18a <pinMode>
	pinMode(5 , OUTPUT);
 98a:	61 e0       	ldi	r22, 0x01	; 1
 98c:	70 e0       	ldi	r23, 0x00	; 0
 98e:	85 e0       	ldi	r24, 0x05	; 5
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	0e 94 c5 00 	call	0x18a	; 0x18a <pinMode>
	pinMode(6 , OUTPUT);
 996:	61 e0       	ldi	r22, 0x01	; 1
 998:	70 e0       	ldi	r23, 0x00	; 0
 99a:	86 e0       	ldi	r24, 0x06	; 6
 99c:	90 e0       	ldi	r25, 0x00	; 0
 99e:	0e 94 c5 00 	call	0x18a	; 0x18a <pinMode>
	pinMode(7 , OUTPUT);
 9a2:	61 e0       	ldi	r22, 0x01	; 1
 9a4:	70 e0       	ldi	r23, 0x00	; 0
 9a6:	87 e0       	ldi	r24, 0x07	; 7
 9a8:	90 e0       	ldi	r25, 0x00	; 0
 9aa:	0e 94 c5 00 	call	0x18a	; 0x18a <pinMode>
	pinMode(8 , OUTPUT);
 9ae:	61 e0       	ldi	r22, 0x01	; 1
 9b0:	70 e0       	ldi	r23, 0x00	; 0
 9b2:	88 e0       	ldi	r24, 0x08	; 8
 9b4:	90 e0       	ldi	r25, 0x00	; 0
 9b6:	0e 94 c5 00 	call	0x18a	; 0x18a <pinMode>
	pinMode(9 , OUTPUT);
 9ba:	61 e0       	ldi	r22, 0x01	; 1
 9bc:	70 e0       	ldi	r23, 0x00	; 0
 9be:	89 e0       	ldi	r24, 0x09	; 9
 9c0:	90 e0       	ldi	r25, 0x00	; 0
 9c2:	0e 94 c5 00 	call	0x18a	; 0x18a <pinMode>
	pinMode(10 , OUTPUT);
 9c6:	61 e0       	ldi	r22, 0x01	; 1
 9c8:	70 e0       	ldi	r23, 0x00	; 0
 9ca:	8a e0       	ldi	r24, 0x0A	; 10
 9cc:	90 e0       	ldi	r25, 0x00	; 0
 9ce:	0e 94 c5 00 	call	0x18a	; 0x18a <pinMode>
	pinMode(11 , OUTPUT);
 9d2:	61 e0       	ldi	r22, 0x01	; 1
 9d4:	70 e0       	ldi	r23, 0x00	; 0
 9d6:	8b e0       	ldi	r24, 0x0B	; 11
 9d8:	90 e0       	ldi	r25, 0x00	; 0
 9da:	0e 94 c5 00 	call	0x18a	; 0x18a <pinMode>
	pinMode(12 , OUTPUT);
 9de:	61 e0       	ldi	r22, 0x01	; 1
 9e0:	70 e0       	ldi	r23, 0x00	; 0
 9e2:	8c e0       	ldi	r24, 0x0C	; 12
 9e4:	90 e0       	ldi	r25, 0x00	; 0
 9e6:	0e 94 c5 00 	call	0x18a	; 0x18a <pinMode>
	pinMode(13 , OUTPUT);
 9ea:	61 e0       	ldi	r22, 0x01	; 1
 9ec:	70 e0       	ldi	r23, 0x00	; 0
 9ee:	8d e0       	ldi	r24, 0x0D	; 13
 9f0:	90 e0       	ldi	r25, 0x00	; 0
 9f2:	0e 94 c5 00 	call	0x18a	; 0x18a <pinMode>
	pinMode(SPECIALPORT , OUTPUT);
 9f6:	61 e0       	ldi	r22, 0x01	; 1
 9f8:	70 e0       	ldi	r23, 0x00	; 0
 9fa:	80 e1       	ldi	r24, 0x10	; 16
 9fc:	90 e0       	ldi	r25, 0x00	; 0
 9fe:	0e 94 c5 00 	call	0x18a	; 0x18a <pinMode>
	for (int i=8;i<=14;i++){
 a02:	c8 e0       	ldi	r28, 0x08	; 8
 a04:	d0 e0       	ldi	r29, 0x00	; 0
 a06:	06 c0       	rjmp	.+12     	; 0xa14 <main+0xc6>
		digitalWrite(i , LOW);
 a08:	60 e0       	ldi	r22, 0x00	; 0
 a0a:	70 e0       	ldi	r23, 0x00	; 0
 a0c:	ce 01       	movw	r24, r28
 a0e:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
	pinMode(10 , OUTPUT);
	pinMode(11 , OUTPUT);
	pinMode(12 , OUTPUT);
	pinMode(13 , OUTPUT);
	pinMode(SPECIALPORT , OUTPUT);
	for (int i=8;i<=14;i++){
 a12:	21 96       	adiw	r28, 0x01	; 1
 a14:	cf 30       	cpi	r28, 0x0F	; 15
 a16:	d1 05       	cpc	r29, r1
 a18:	bc f3       	brlt	.-18     	; 0xa08 <main+0xba>
		digitalWrite(i , LOW);
	}
	digitalWrite(SPECIALPORT , LOW);
 a1a:	60 e0       	ldi	r22, 0x00	; 0
 a1c:	70 e0       	ldi	r23, 0x00	; 0
 a1e:	80 e1       	ldi	r24, 0x10	; 16
 a20:	90 e0       	ldi	r25, 0x00	; 0
 a22:	0e 94 4b 00 	call	0x96	; 0x96 <digitalWrite>
		clear();
		displayCharacter('F');
		_delay_ms(1000);
		clear();
		*/
		checkInput();
 a26:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <checkInput>
		display();
 a2a:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <display>
 a2e:	fb cf       	rjmp	.-10     	; 0xa26 <main+0xd8>

00000a30 <_exit>:
 a30:	f8 94       	cli

00000a32 <__stop_program>:
 a32:	ff cf       	rjmp	.-2      	; 0xa32 <__stop_program>
