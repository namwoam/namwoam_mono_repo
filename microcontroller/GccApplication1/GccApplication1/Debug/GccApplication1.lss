
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000087a  0000090e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000087a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800106  00800106  00000914  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000914  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000944  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000984  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012ec  00000000  00000000  00000a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c0  00000000  00000000  00001cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000078b  00000000  00000000  000025b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  00002d44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a8  00000000  00000000  00002e84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009cf  00000000  00000000  0000332c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00003cfb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e7       	ldi	r30, 0x7A	; 122
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 30       	cpi	r26, 0x08	; 8
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 0c 03 	call	0x618	; 0x618 <main>
  9e:	0c 94 3b 04 	jmp	0x876	; 0x876 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <digitalWrite>:


void digitalWrite(int pin , int n){
	// n=0 LOW
	// n=1 HIGH
	if (n==0){
  a6:	61 15       	cp	r22, r1
  a8:	71 05       	cpc	r23, r1
  aa:	e1 f5       	brne	.+120    	; 0x124 <digitalWrite+0x7e>
		if  (pin >= 0 && pin <= 7){
  ac:	88 30       	cpi	r24, 0x08	; 8
  ae:	91 05       	cpc	r25, r1
  b0:	70 f4       	brcc	.+28     	; 0xce <digitalWrite+0x28>
			PORTD = PORTD & ~(1<<pin);
  b2:	4b b1       	in	r20, 0x0b	; 11
  b4:	21 e0       	ldi	r18, 0x01	; 1
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	b9 01       	movw	r22, r18
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <digitalWrite+0x1a>
  bc:	66 0f       	add	r22, r22
  be:	77 1f       	adc	r23, r23
  c0:	8a 95       	dec	r24
  c2:	e2 f7       	brpl	.-8      	; 0xbc <digitalWrite+0x16>
  c4:	cb 01       	movw	r24, r22
  c6:	80 95       	com	r24
  c8:	84 23       	and	r24, r20
  ca:	8b b9       	out	0x0b, r24	; 11
  cc:	08 95       	ret
		}
		else if (pin >= 8 && pin <= 14 ){
  ce:	9c 01       	movw	r18, r24
  d0:	28 50       	subi	r18, 0x08	; 8
  d2:	31 09       	sbc	r19, r1
  d4:	27 30       	cpi	r18, 0x07	; 7
  d6:	31 05       	cpc	r19, r1
  d8:	78 f4       	brcc	.+30     	; 0xf8 <digitalWrite+0x52>
			PORTC = PORTC & ~(1<<(pin-8));
  da:	48 b1       	in	r20, 0x08	; 8
  dc:	c9 01       	movw	r24, r18
  de:	21 e0       	ldi	r18, 0x01	; 1
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	b9 01       	movw	r22, r18
  e4:	02 c0       	rjmp	.+4      	; 0xea <digitalWrite+0x44>
  e6:	66 0f       	add	r22, r22
  e8:	77 1f       	adc	r23, r23
  ea:	8a 95       	dec	r24
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <digitalWrite+0x40>
  ee:	cb 01       	movw	r24, r22
  f0:	80 95       	com	r24
  f2:	84 23       	and	r24, r20
  f4:	88 b9       	out	0x08, r24	; 8
  f6:	08 95       	ret
		}
		else if (pin >=15 && pin <= 22 ){
  f8:	9c 01       	movw	r18, r24
  fa:	2f 50       	subi	r18, 0x0F	; 15
  fc:	31 09       	sbc	r19, r1
  fe:	28 30       	cpi	r18, 0x08	; 8
 100:	31 05       	cpc	r19, r1
 102:	08 f0       	brcs	.+2      	; 0x106 <digitalWrite+0x60>
 104:	49 c0       	rjmp	.+146    	; 0x198 <digitalWrite+0xf2>
			PORTB = PORTB & ~(1<<(pin-15));
 106:	45 b1       	in	r20, 0x05	; 5
 108:	c9 01       	movw	r24, r18
 10a:	21 e0       	ldi	r18, 0x01	; 1
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	b9 01       	movw	r22, r18
 110:	02 c0       	rjmp	.+4      	; 0x116 <digitalWrite+0x70>
 112:	66 0f       	add	r22, r22
 114:	77 1f       	adc	r23, r23
 116:	8a 95       	dec	r24
 118:	e2 f7       	brpl	.-8      	; 0x112 <digitalWrite+0x6c>
 11a:	cb 01       	movw	r24, r22
 11c:	80 95       	com	r24
 11e:	84 23       	and	r24, r20
 120:	85 b9       	out	0x05, r24	; 5
 122:	08 95       	ret
		}
	}
	else if ( n == 1){
 124:	61 30       	cpi	r22, 0x01	; 1
 126:	71 05       	cpc	r23, r1
 128:	b9 f5       	brne	.+110    	; 0x198 <digitalWrite+0xf2>
		if (pin >=0 && pin <= 7 ){
 12a:	88 30       	cpi	r24, 0x08	; 8
 12c:	91 05       	cpc	r25, r1
 12e:	68 f4       	brcc	.+26     	; 0x14a <digitalWrite+0xa4>
			PORTD = PORTD | (1<<pin);
 130:	4b b1       	in	r20, 0x0b	; 11
 132:	21 e0       	ldi	r18, 0x01	; 1
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	b9 01       	movw	r22, r18
 138:	02 c0       	rjmp	.+4      	; 0x13e <digitalWrite+0x98>
 13a:	66 0f       	add	r22, r22
 13c:	77 1f       	adc	r23, r23
 13e:	8a 95       	dec	r24
 140:	e2 f7       	brpl	.-8      	; 0x13a <digitalWrite+0x94>
 142:	cb 01       	movw	r24, r22
 144:	84 2b       	or	r24, r20
 146:	8b b9       	out	0x0b, r24	; 11
 148:	08 95       	ret
		}
		else if (pin >=8 && pin <= 14 ){
 14a:	9c 01       	movw	r18, r24
 14c:	28 50       	subi	r18, 0x08	; 8
 14e:	31 09       	sbc	r19, r1
 150:	27 30       	cpi	r18, 0x07	; 7
 152:	31 05       	cpc	r19, r1
 154:	70 f4       	brcc	.+28     	; 0x172 <digitalWrite+0xcc>
			PORTC = PORTC | (1<<(pin - 8));
 156:	48 b1       	in	r20, 0x08	; 8
 158:	c9 01       	movw	r24, r18
 15a:	21 e0       	ldi	r18, 0x01	; 1
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	b9 01       	movw	r22, r18
 160:	02 c0       	rjmp	.+4      	; 0x166 <digitalWrite+0xc0>
 162:	66 0f       	add	r22, r22
 164:	77 1f       	adc	r23, r23
 166:	8a 95       	dec	r24
 168:	e2 f7       	brpl	.-8      	; 0x162 <digitalWrite+0xbc>
 16a:	cb 01       	movw	r24, r22
 16c:	84 2b       	or	r24, r20
 16e:	88 b9       	out	0x08, r24	; 8
 170:	08 95       	ret
		}
		else if (pin >=15 && pin <= 22 ){
 172:	9c 01       	movw	r18, r24
 174:	2f 50       	subi	r18, 0x0F	; 15
 176:	31 09       	sbc	r19, r1
 178:	28 30       	cpi	r18, 0x08	; 8
 17a:	31 05       	cpc	r19, r1
 17c:	68 f4       	brcc	.+26     	; 0x198 <digitalWrite+0xf2>
			PORTB = PORTB | (1<<(pin - 15));
 17e:	45 b1       	in	r20, 0x05	; 5
 180:	c9 01       	movw	r24, r18
 182:	21 e0       	ldi	r18, 0x01	; 1
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	b9 01       	movw	r22, r18
 188:	02 c0       	rjmp	.+4      	; 0x18e <digitalWrite+0xe8>
 18a:	66 0f       	add	r22, r22
 18c:	77 1f       	adc	r23, r23
 18e:	8a 95       	dec	r24
 190:	e2 f7       	brpl	.-8      	; 0x18a <digitalWrite+0xe4>
 192:	cb 01       	movw	r24, r22
 194:	84 2b       	or	r24, r20
 196:	85 b9       	out	0x05, r24	; 5
 198:	08 95       	ret

0000019a <pinMode>:
}

void pinMode(int pin , int n){
	// n=0 INPUT
	// n=1 OUTPUT
	if (n==0){
 19a:	61 15       	cp	r22, r1
 19c:	71 05       	cpc	r23, r1
 19e:	09 f0       	breq	.+2      	; 0x1a2 <pinMode+0x8>
 1a0:	48 c0       	rjmp	.+144    	; 0x232 <pinMode+0x98>
		if  (pin >= 0 && pin <= 7){
 1a2:	88 30       	cpi	r24, 0x08	; 8
 1a4:	91 05       	cpc	r25, r1
 1a6:	90 f4       	brcc	.+36     	; 0x1cc <pinMode+0x32>
			DDRD = DDRD & ~(1<<pin);
 1a8:	4a b1       	in	r20, 0x0a	; 10
 1aa:	21 e0       	ldi	r18, 0x01	; 1
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	b9 01       	movw	r22, r18
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <pinMode+0x1c>
 1b2:	66 0f       	add	r22, r22
 1b4:	77 1f       	adc	r23, r23
 1b6:	8a 95       	dec	r24
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <pinMode+0x18>
 1ba:	cb 01       	movw	r24, r22
 1bc:	96 2f       	mov	r25, r22
 1be:	90 95       	com	r25
 1c0:	94 23       	and	r25, r20
 1c2:	9a b9       	out	0x0a, r25	; 10
			PORTD = PORTD | (1<<pin);
 1c4:	9b b1       	in	r25, 0x0b	; 11
 1c6:	89 2b       	or	r24, r25
 1c8:	8b b9       	out	0x0b, r24	; 11
 1ca:	08 95       	ret
		}
		else if (pin >= 8 && pin <= 14 ){
 1cc:	9c 01       	movw	r18, r24
 1ce:	28 50       	subi	r18, 0x08	; 8
 1d0:	31 09       	sbc	r19, r1
 1d2:	27 30       	cpi	r18, 0x07	; 7
 1d4:	31 05       	cpc	r19, r1
 1d6:	98 f4       	brcc	.+38     	; 0x1fe <pinMode+0x64>
			DDRC = DDRC & ~(1<<(pin-8));
 1d8:	47 b1       	in	r20, 0x07	; 7
 1da:	c9 01       	movw	r24, r18
 1dc:	21 e0       	ldi	r18, 0x01	; 1
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	b9 01       	movw	r22, r18
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <pinMode+0x4e>
 1e4:	66 0f       	add	r22, r22
 1e6:	77 1f       	adc	r23, r23
 1e8:	8a 95       	dec	r24
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <pinMode+0x4a>
 1ec:	cb 01       	movw	r24, r22
 1ee:	96 2f       	mov	r25, r22
 1f0:	90 95       	com	r25
 1f2:	94 23       	and	r25, r20
 1f4:	97 b9       	out	0x07, r25	; 7
			PORTC = PORTC | (1<<(pin-8));
 1f6:	98 b1       	in	r25, 0x08	; 8
 1f8:	89 2b       	or	r24, r25
 1fa:	88 b9       	out	0x08, r24	; 8
 1fc:	08 95       	ret
		}
		else if (pin >=15 && pin <= 22){
 1fe:	9c 01       	movw	r18, r24
 200:	2f 50       	subi	r18, 0x0F	; 15
 202:	31 09       	sbc	r19, r1
 204:	28 30       	cpi	r18, 0x08	; 8
 206:	31 05       	cpc	r19, r1
 208:	08 f0       	brcs	.+2      	; 0x20c <pinMode+0x72>
 20a:	4d c0       	rjmp	.+154    	; 0x2a6 <pinMode+0x10c>
			DDRB = DDRB & ~(1<<(pin-15));
 20c:	44 b1       	in	r20, 0x04	; 4
 20e:	c9 01       	movw	r24, r18
 210:	21 e0       	ldi	r18, 0x01	; 1
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	b9 01       	movw	r22, r18
 216:	02 c0       	rjmp	.+4      	; 0x21c <pinMode+0x82>
 218:	66 0f       	add	r22, r22
 21a:	77 1f       	adc	r23, r23
 21c:	8a 95       	dec	r24
 21e:	e2 f7       	brpl	.-8      	; 0x218 <pinMode+0x7e>
 220:	cb 01       	movw	r24, r22
 222:	96 2f       	mov	r25, r22
 224:	90 95       	com	r25
 226:	94 23       	and	r25, r20
 228:	94 b9       	out	0x04, r25	; 4
			PORTB = PORTB | (1<<(pin-15));
 22a:	95 b1       	in	r25, 0x05	; 5
 22c:	89 2b       	or	r24, r25
 22e:	85 b9       	out	0x05, r24	; 5
 230:	08 95       	ret
		}
	}
	else if ( n == 1){
 232:	61 30       	cpi	r22, 0x01	; 1
 234:	71 05       	cpc	r23, r1
 236:	b9 f5       	brne	.+110    	; 0x2a6 <pinMode+0x10c>
		if (pin >=0 && pin <= 7 ){
 238:	88 30       	cpi	r24, 0x08	; 8
 23a:	91 05       	cpc	r25, r1
 23c:	68 f4       	brcc	.+26     	; 0x258 <pinMode+0xbe>
			DDRD = DDRD | (1<<pin);
 23e:	4a b1       	in	r20, 0x0a	; 10
 240:	21 e0       	ldi	r18, 0x01	; 1
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	b9 01       	movw	r22, r18
 246:	02 c0       	rjmp	.+4      	; 0x24c <pinMode+0xb2>
 248:	66 0f       	add	r22, r22
 24a:	77 1f       	adc	r23, r23
 24c:	8a 95       	dec	r24
 24e:	e2 f7       	brpl	.-8      	; 0x248 <pinMode+0xae>
 250:	cb 01       	movw	r24, r22
 252:	84 2b       	or	r24, r20
 254:	8a b9       	out	0x0a, r24	; 10
 256:	08 95       	ret
		}
		else if (pin >=8 && pin <= 14 ){
 258:	9c 01       	movw	r18, r24
 25a:	28 50       	subi	r18, 0x08	; 8
 25c:	31 09       	sbc	r19, r1
 25e:	27 30       	cpi	r18, 0x07	; 7
 260:	31 05       	cpc	r19, r1
 262:	70 f4       	brcc	.+28     	; 0x280 <pinMode+0xe6>
			DDRC = DDRC | (1<<(pin - 8));
 264:	47 b1       	in	r20, 0x07	; 7
 266:	c9 01       	movw	r24, r18
 268:	21 e0       	ldi	r18, 0x01	; 1
 26a:	30 e0       	ldi	r19, 0x00	; 0
 26c:	b9 01       	movw	r22, r18
 26e:	02 c0       	rjmp	.+4      	; 0x274 <pinMode+0xda>
 270:	66 0f       	add	r22, r22
 272:	77 1f       	adc	r23, r23
 274:	8a 95       	dec	r24
 276:	e2 f7       	brpl	.-8      	; 0x270 <pinMode+0xd6>
 278:	cb 01       	movw	r24, r22
 27a:	84 2b       	or	r24, r20
 27c:	87 b9       	out	0x07, r24	; 7
 27e:	08 95       	ret
		}
		else if (pin >=15 && pin <= 22){
 280:	9c 01       	movw	r18, r24
 282:	2f 50       	subi	r18, 0x0F	; 15
 284:	31 09       	sbc	r19, r1
 286:	28 30       	cpi	r18, 0x08	; 8
 288:	31 05       	cpc	r19, r1
 28a:	68 f4       	brcc	.+26     	; 0x2a6 <pinMode+0x10c>
			DDRB = DDRB | (1<<(pin - 15));
 28c:	44 b1       	in	r20, 0x04	; 4
 28e:	c9 01       	movw	r24, r18
 290:	21 e0       	ldi	r18, 0x01	; 1
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	b9 01       	movw	r22, r18
 296:	02 c0       	rjmp	.+4      	; 0x29c <pinMode+0x102>
 298:	66 0f       	add	r22, r22
 29a:	77 1f       	adc	r23, r23
 29c:	8a 95       	dec	r24
 29e:	e2 f7       	brpl	.-8      	; 0x298 <pinMode+0xfe>
 2a0:	cb 01       	movw	r24, r22
 2a2:	84 2b       	or	r24, r20
 2a4:	84 b9       	out	0x04, r24	; 4
 2a6:	08 95       	ret

000002a8 <digitalRead>:
		}
	}
	return ;
}

int digitalRead(int pin){
 2a8:	ac 01       	movw	r20, r24
	int signal = 0;
	// return 0 if LOW , 1 if HIGH
	if (pin >=0 && pin <=7){
 2aa:	88 30       	cpi	r24, 0x08	; 8
 2ac:	91 05       	cpc	r25, r1
 2ae:	58 f4       	brcc	.+22     	; 0x2c6 <digitalRead+0x1e>
		signal = ((PIND >> (pin)) & 1);
 2b0:	29 b1       	in	r18, 0x09	; 9
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	c9 01       	movw	r24, r18
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <digitalRead+0x14>
 2b8:	95 95       	asr	r25
 2ba:	87 95       	ror	r24
 2bc:	4a 95       	dec	r20
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <digitalRead+0x10>
 2c0:	81 70       	andi	r24, 0x01	; 1
 2c2:	99 27       	eor	r25, r25
 2c4:	23 c0       	rjmp	.+70     	; 0x30c <digitalRead+0x64>
	}
	else if (pin >= 8 && pin <= 14){
 2c6:	08 97       	sbiw	r24, 0x08	; 8
 2c8:	07 97       	sbiw	r24, 0x07	; 7
 2ca:	68 f4       	brcc	.+26     	; 0x2e6 <digitalRead+0x3e>
		signal = ((PINC >> (pin -8 )) & 1);
 2cc:	96 b1       	in	r25, 0x06	; 6
 2ce:	48 50       	subi	r20, 0x08	; 8
 2d0:	51 09       	sbc	r21, r1
 2d2:	89 2f       	mov	r24, r25
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <digitalRead+0x34>
 2d8:	95 95       	asr	r25
 2da:	87 95       	ror	r24
 2dc:	4a 95       	dec	r20
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <digitalRead+0x30>
 2e0:	81 70       	andi	r24, 0x01	; 1
 2e2:	99 27       	eor	r25, r25
 2e4:	13 c0       	rjmp	.+38     	; 0x30c <digitalRead+0x64>
	}
	else if (pin >=15 && pin <= 22){
 2e6:	ca 01       	movw	r24, r20
 2e8:	0f 97       	sbiw	r24, 0x0f	; 15
 2ea:	08 97       	sbiw	r24, 0x08	; 8
 2ec:	68 f4       	brcc	.+26     	; 0x308 <digitalRead+0x60>
		signal = ((PINB >> (pin -15 )) & 1);
 2ee:	93 b1       	in	r25, 0x03	; 3
 2f0:	4f 50       	subi	r20, 0x0F	; 15
 2f2:	51 09       	sbc	r21, r1
 2f4:	89 2f       	mov	r24, r25
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <digitalRead+0x56>
 2fa:	95 95       	asr	r25
 2fc:	87 95       	ror	r24
 2fe:	4a 95       	dec	r20
 300:	e2 f7       	brpl	.-8      	; 0x2fa <digitalRead+0x52>
 302:	81 70       	andi	r24, 0x01	; 1
 304:	99 27       	eor	r25, r25
 306:	02 c0       	rjmp	.+4      	; 0x30c <digitalRead+0x64>
	}
	return ;
}

int digitalRead(int pin){
	int signal = 0;
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	90 e0       	ldi	r25, 0x00	; 0
		signal = ((PINC >> (pin -8 )) & 1);
	}
	else if (pin >=15 && pin <= 22){
		signal = ((PINB >> (pin -15 )) & 1);
	}
	if (signal == 1){
 30c:	01 97       	sbiw	r24, 0x01	; 1
 30e:	19 f4       	brne	.+6      	; 0x316 <digitalRead+0x6e>
		return 1;
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	08 95       	ret
	}
	else {
		return 0;
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 31a:	08 95       	ret

0000031c <analogWrite>:

void analogWrite(int pin , int val){
	// only support OC0A/B OC2A/B
	val %= 256;
 31c:	70 78       	andi	r23, 0x80	; 128
 31e:	77 23       	and	r23, r23
 320:	2c f4       	brge	.+10     	; 0x32c <analogWrite+0x10>
 322:	61 50       	subi	r22, 0x01	; 1
 324:	71 09       	sbc	r23, r1
 326:	7f 6f       	ori	r23, 0xFF	; 255
 328:	6f 5f       	subi	r22, 0xFF	; 255
 32a:	7f 4f       	sbci	r23, 0xFF	; 255
	if (pin == pinD5 || pin == pinD6){
 32c:	9c 01       	movw	r18, r24
 32e:	25 50       	subi	r18, 0x05	; 5
 330:	31 09       	sbc	r19, r1
 332:	22 30       	cpi	r18, 0x02	; 2
 334:	31 05       	cpc	r19, r1
 336:	68 f4       	brcc	.+26     	; 0x352 <analogWrite+0x36>
		TCCR0A=0b10100011;
 338:	23 ea       	ldi	r18, 0xA3	; 163
 33a:	24 bd       	out	0x24, r18	; 36
		TCCR0B=0b00000001;
 33c:	21 e0       	ldi	r18, 0x01	; 1
 33e:	25 bd       	out	0x25, r18	; 37
		if (pin == pinD5){
 340:	85 30       	cpi	r24, 0x05	; 5
 342:	91 05       	cpc	r25, r1
 344:	11 f4       	brne	.+4      	; 0x34a <analogWrite+0x2e>
			OCR0B = val;
 346:	68 bd       	out	0x28, r22	; 40
 348:	08 95       	ret
		}
		else if (pin == pinD6) {
 34a:	06 97       	sbiw	r24, 0x06	; 6
 34c:	c1 f4       	brne	.+48     	; 0x37e <analogWrite+0x62>
			OCR0A = val;
 34e:	67 bd       	out	0x27, r22	; 39
 350:	08 95       	ret
		}
	}
	else if (pin == pinD3 || pin == pinB3){
 352:	83 30       	cpi	r24, 0x03	; 3
 354:	91 05       	cpc	r25, r1
 356:	19 f0       	breq	.+6      	; 0x35e <analogWrite+0x42>
 358:	82 31       	cpi	r24, 0x12	; 18
 35a:	91 05       	cpc	r25, r1
 35c:	81 f4       	brne	.+32     	; 0x37e <analogWrite+0x62>
		TCCR2A=0b10100011;
 35e:	23 ea       	ldi	r18, 0xA3	; 163
 360:	20 93 b0 00 	sts	0x00B0, r18	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
		TCCR2B=0b00000001;
 364:	21 e0       	ldi	r18, 0x01	; 1
 366:	20 93 b1 00 	sts	0x00B1, r18	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
		if (pin == pinD3){
 36a:	83 30       	cpi	r24, 0x03	; 3
 36c:	91 05       	cpc	r25, r1
 36e:	19 f4       	brne	.+6      	; 0x376 <analogWrite+0x5a>
			OCR2B = val;
 370:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 374:	08 95       	ret
		}
		else if (pin == pinB3) {
 376:	42 97       	sbiw	r24, 0x12	; 18
 378:	11 f4       	brne	.+4      	; 0x37e <analogWrite+0x62>
			OCR2A = val;
 37a:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 37e:	08 95       	ret

00000380 <readDistance>:

int readDistance()
{
	int adcHigh,adcLow;
	int voltage;
	ADCSRA|=(1<<ADIF); // clear ADIF
 380:	ea e7       	ldi	r30, 0x7A	; 122
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	80 81       	ld	r24, Z
 386:	80 61       	ori	r24, 0x10	; 16
 388:	80 83       	st	Z, r24
	ADCSRA|=(1<<ADSC); // start ADC
 38a:	80 81       	ld	r24, Z
 38c:	80 64       	ori	r24, 0x40	; 64
 38e:	80 83       	st	Z, r24
	while((ADCSRA&(1<<ADIF))==0); // wait for ADC done
 390:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 394:	84 ff       	sbrs	r24, 4
 396:	fc cf       	rjmp	.-8      	; 0x390 <readDistance+0x10>
	adcLow=ADCL;
 398:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
	adcHigh=ADCH;
 39c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 3a0:	90 e0       	ldi	r25, 0x00	; 0
	voltage=adcHigh*256+adcLow;
 3a2:	98 2f       	mov	r25, r24
 3a4:	88 27       	eor	r24, r24
	return voltage;
}
 3a6:	82 0f       	add	r24, r18
 3a8:	91 1d       	adc	r25, r1
 3aa:	08 95       	ret

000003ac <setupSerial>:

void setupSerial(){
	unsigned int BaudR=9600;
	unsigned int ubrr=(F_CPU/(BaudR*16UL))-1;
	UBRR0H=(unsigned char)(ubrr>>8);
 3ac:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L=(unsigned char)ubrr;
 3b0:	83 e3       	ldi	r24, 0x33	; 51
 3b2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B=(1<<TXEN0);
 3b6:	88 e0       	ldi	r24, 0x08	; 8
 3b8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C=(1<<UCSZ01)|(1<<UCSZ00);
 3bc:	86 e0       	ldi	r24, 0x06	; 6
 3be:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 3c2:	08 95       	ret

000003c4 <printString>:
}

void printString(char* StringPtr){
 3c4:	fc 01       	movw	r30, r24
	while(*StringPtr != 0x00){
 3c6:	07 c0       	rjmp	.+14     	; 0x3d6 <printString+0x12>
		while(!(UCSR0A& (1<<UDRE0)));
 3c8:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 3cc:	95 ff       	sbrs	r25, 5
 3ce:	fc cf       	rjmp	.-8      	; 0x3c8 <printString+0x4>
		UDR0=*StringPtr;
 3d0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		StringPtr++;
 3d4:	31 96       	adiw	r30, 0x01	; 1
	UCSR0B=(1<<TXEN0);
	UCSR0C=(1<<UCSZ01)|(1<<UCSZ00);
}

void printString(char* StringPtr){
	while(*StringPtr != 0x00){
 3d6:	80 81       	ld	r24, Z
 3d8:	81 11       	cpse	r24, r1
 3da:	f6 cf       	rjmp	.-20     	; 0x3c8 <printString+0x4>
		while(!(UCSR0A& (1<<UDRE0)));
		UDR0=*StringPtr;
		StringPtr++;
	}
}
 3dc:	08 95       	ret

000003de <__vector_13>:

ISR(TIMER1_OVF_vect)
{
 3de:	1f 92       	push	r1
 3e0:	0f 92       	push	r0
 3e2:	0f b6       	in	r0, 0x3f	; 63
 3e4:	0f 92       	push	r0
 3e6:	11 24       	eor	r1, r1
 3e8:	8f 93       	push	r24
 3ea:	9f 93       	push	r25
	TimerOverflow ++; // toggle PC5
 3ec:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 3f0:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 3f4:	01 96       	adiw	r24, 0x01	; 1
 3f6:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
 3fa:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
}
 3fe:	9f 91       	pop	r25
 400:	8f 91       	pop	r24
 402:	0f 90       	pop	r0
 404:	0f be       	out	0x3f, r0	; 63
 406:	0f 90       	pop	r0
 408:	1f 90       	pop	r1
 40a:	18 95       	reti

0000040c <setup>:




void setup(){
 40c:	0f 93       	push	r16
 40e:	1f 93       	push	r17
 410:	cf 93       	push	r28
 412:	df 93       	push	r29
	pinMode(motorLeftA , OUTPUT);
 414:	61 e0       	ldi	r22, 0x01	; 1
 416:	70 e0       	ldi	r23, 0x00	; 0
 418:	86 e0       	ldi	r24, 0x06	; 6
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	0e 94 cd 00 	call	0x19a	; 0x19a <pinMode>
	pinMode(motorLeftB , OUTPUT);
 420:	61 e0       	ldi	r22, 0x01	; 1
 422:	70 e0       	ldi	r23, 0x00	; 0
 424:	85 e0       	ldi	r24, 0x05	; 5
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	0e 94 cd 00 	call	0x19a	; 0x19a <pinMode>
	pinMode(motorRightA , OUTPUT);
 42c:	61 e0       	ldi	r22, 0x01	; 1
 42e:	70 e0       	ldi	r23, 0x00	; 0
 430:	82 e1       	ldi	r24, 0x12	; 18
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	0e 94 cd 00 	call	0x19a	; 0x19a <pinMode>
	pinMode(motorRightB , OUTPUT);
 438:	61 e0       	ldi	r22, 0x01	; 1
 43a:	70 e0       	ldi	r23, 0x00	; 0
 43c:	83 e0       	ldi	r24, 0x03	; 3
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	0e 94 cd 00 	call	0x19a	; 0x19a <pinMode>
	pinMode(pinDMS ,  INPUT);
 444:	60 e0       	ldi	r22, 0x00	; 0
 446:	70 e0       	ldi	r23, 0x00	; 0
 448:	88 e0       	ldi	r24, 0x08	; 8
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	0e 94 cd 00 	call	0x19a	; 0x19a <pinMode>
	pinMode(rightIR , INPUT);
 450:	60 e0       	ldi	r22, 0x00	; 0
 452:	70 e0       	ldi	r23, 0x00	; 0
 454:	8c e0       	ldi	r24, 0x0C	; 12
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	0e 94 cd 00 	call	0x19a	; 0x19a <pinMode>
	pinMode(leftIR , INPUT);
 45c:	60 e0       	ldi	r22, 0x00	; 0
 45e:	70 e0       	ldi	r23, 0x00	; 0
 460:	8d e0       	ldi	r24, 0x0D	; 13
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	0e 94 cd 00 	call	0x19a	; 0x19a <pinMode>
	for (int i=0;i<ledCount ;i++){
 468:	00 e0       	ldi	r16, 0x00	; 0
 46a:	10 e0       	ldi	r17, 0x00	; 0
 46c:	13 c0       	rjmp	.+38     	; 0x494 <setup+0x88>
		pinMode(pinLED[i] , OUTPUT);
 46e:	e8 01       	movw	r28, r16
 470:	cc 0f       	add	r28, r28
 472:	dd 1f       	adc	r29, r29
 474:	c0 50       	subi	r28, 0x00	; 0
 476:	df 4f       	sbci	r29, 0xFF	; 255
 478:	61 e0       	ldi	r22, 0x01	; 1
 47a:	70 e0       	ldi	r23, 0x00	; 0
 47c:	88 81       	ld	r24, Y
 47e:	99 81       	ldd	r25, Y+1	; 0x01
 480:	0e 94 cd 00 	call	0x19a	; 0x19a <pinMode>
		digitalWrite(pinLED[i] , HIGH);
 484:	61 e0       	ldi	r22, 0x01	; 1
 486:	70 e0       	ldi	r23, 0x00	; 0
 488:	88 81       	ld	r24, Y
 48a:	99 81       	ldd	r25, Y+1	; 0x01
 48c:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWrite>
	pinMode(motorRightA , OUTPUT);
	pinMode(motorRightB , OUTPUT);
	pinMode(pinDMS ,  INPUT);
	pinMode(rightIR , INPUT);
	pinMode(leftIR , INPUT);
	for (int i=0;i<ledCount ;i++){
 490:	0f 5f       	subi	r16, 0xFF	; 255
 492:	1f 4f       	sbci	r17, 0xFF	; 255
 494:	03 30       	cpi	r16, 0x03	; 3
 496:	11 05       	cpc	r17, r1
 498:	54 f3       	brlt	.-44     	; 0x46e <setup+0x62>
		pinMode(pinLED[i] , OUTPUT);
		digitalWrite(pinLED[i] , HIGH);
	}
	pinMode(pinBlink , OUTPUT);
 49a:	61 e0       	ldi	r22, 0x01	; 1
 49c:	70 e0       	ldi	r23, 0x00	; 0
 49e:	80 e1       	ldi	r24, 0x10	; 16
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	0e 94 cd 00 	call	0x19a	; 0x19a <pinMode>
	digitalWrite(pinBlink , HIGH);
 4a6:	61 e0       	ldi	r22, 0x01	; 1
 4a8:	70 e0       	ldi	r23, 0x00	; 0
 4aa:	80 e1       	ldi	r24, 0x10	; 16
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWrite>
	pinMode(pinReady , OUTPUT);
 4b2:	61 e0       	ldi	r22, 0x01	; 1
 4b4:	70 e0       	ldi	r23, 0x00	; 0
 4b6:	85 e1       	ldi	r24, 0x15	; 21
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	0e 94 cd 00 	call	0x19a	; 0x19a <pinMode>
	digitalWrite(pinReady , HIGH);
 4be:	61 e0       	ldi	r22, 0x01	; 1
 4c0:	70 e0       	ldi	r23, 0x00	; 0
 4c2:	85 e1       	ldi	r24, 0x15	; 21
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWrite>
	setupSerial();
 4ca:	0e 94 d6 01 	call	0x3ac	; 0x3ac <setupSerial>
	sei();
 4ce:	78 94       	sei
	TIMSK1 = (1<<TOIE1);; // enable timer1 overflow interrupt and input
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	TCCR1A = 0;
 4d6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	ADCSRA=0b10000111; // enable + prescaler
 4da:	ea e7       	ldi	r30, 0x7A	; 122
 4dc:	f0 e0       	ldi	r31, 0x00	; 0
 4de:	87 e8       	ldi	r24, 0x87	; 135
 4e0:	80 83       	st	Z, r24
	ADMUX=0b11000000; // ref volt + channel
 4e2:	80 ec       	ldi	r24, 0xC0	; 192
 4e4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA |= (1<<ADEN);
 4e8:	80 81       	ld	r24, Z
 4ea:	80 68       	ori	r24, 0x80	; 128
 4ec:	80 83       	st	Z, r24
}
 4ee:	df 91       	pop	r29
 4f0:	cf 91       	pop	r28
 4f2:	1f 91       	pop	r17
 4f4:	0f 91       	pop	r16
 4f6:	08 95       	ret

000004f8 <stop>:

void stop(){
	analogWrite(motorRightA , 0);
 4f8:	60 e0       	ldi	r22, 0x00	; 0
 4fa:	70 e0       	ldi	r23, 0x00	; 0
 4fc:	82 e1       	ldi	r24, 0x12	; 18
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	0e 94 8e 01 	call	0x31c	; 0x31c <analogWrite>
	analogWrite(motorRightB , 0);
 504:	60 e0       	ldi	r22, 0x00	; 0
 506:	70 e0       	ldi	r23, 0x00	; 0
 508:	83 e0       	ldi	r24, 0x03	; 3
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	0e 94 8e 01 	call	0x31c	; 0x31c <analogWrite>
	analogWrite(motorLeftA , 0);
 510:	60 e0       	ldi	r22, 0x00	; 0
 512:	70 e0       	ldi	r23, 0x00	; 0
 514:	86 e0       	ldi	r24, 0x06	; 6
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	0e 94 8e 01 	call	0x31c	; 0x31c <analogWrite>
	analogWrite(motorLeftB , 0);
 51c:	60 e0       	ldi	r22, 0x00	; 0
 51e:	70 e0       	ldi	r23, 0x00	; 0
 520:	85 e0       	ldi	r24, 0x05	; 5
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	0e 94 8e 01 	call	0x31c	; 0x31c <analogWrite>
 528:	08 95       	ret

0000052a <turnRight>:
}

void turnRight(){
	analogWrite(motorRightA , 0);
 52a:	60 e0       	ldi	r22, 0x00	; 0
 52c:	70 e0       	ldi	r23, 0x00	; 0
 52e:	82 e1       	ldi	r24, 0x12	; 18
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	0e 94 8e 01 	call	0x31c	; 0x31c <analogWrite>
	analogWrite(motorRightB , motorRightSpeed);
 536:	68 ec       	ldi	r22, 0xC8	; 200
 538:	70 e0       	ldi	r23, 0x00	; 0
 53a:	83 e0       	ldi	r24, 0x03	; 3
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	0e 94 8e 01 	call	0x31c	; 0x31c <analogWrite>
	analogWrite(motorLeftA , motorLeftSpeed);
 542:	68 ec       	ldi	r22, 0xC8	; 200
 544:	70 e0       	ldi	r23, 0x00	; 0
 546:	86 e0       	ldi	r24, 0x06	; 6
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	0e 94 8e 01 	call	0x31c	; 0x31c <analogWrite>
	analogWrite(motorLeftB , 0);
 54e:	60 e0       	ldi	r22, 0x00	; 0
 550:	70 e0       	ldi	r23, 0x00	; 0
 552:	85 e0       	ldi	r24, 0x05	; 5
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	0e 94 8e 01 	call	0x31c	; 0x31c <analogWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 55a:	2f ef       	ldi	r18, 0xFF	; 255
 55c:	85 ed       	ldi	r24, 0xD5	; 213
 55e:	96 e0       	ldi	r25, 0x06	; 6
 560:	21 50       	subi	r18, 0x01	; 1
 562:	80 40       	sbci	r24, 0x00	; 0
 564:	90 40       	sbci	r25, 0x00	; 0
 566:	e1 f7       	brne	.-8      	; 0x560 <turnRight+0x36>
 568:	00 c0       	rjmp	.+0      	; 0x56a <turnRight+0x40>
 56a:	00 00       	nop
	_delay_ms(280);
	stop();
 56c:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <stop>
 570:	08 95       	ret

00000572 <turnLeft>:
}

void turnLeft(){
	analogWrite(motorRightA , motorRightSpeed);
 572:	68 ec       	ldi	r22, 0xC8	; 200
 574:	70 e0       	ldi	r23, 0x00	; 0
 576:	82 e1       	ldi	r24, 0x12	; 18
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	0e 94 8e 01 	call	0x31c	; 0x31c <analogWrite>
	analogWrite(motorRightB , 0);
 57e:	60 e0       	ldi	r22, 0x00	; 0
 580:	70 e0       	ldi	r23, 0x00	; 0
 582:	83 e0       	ldi	r24, 0x03	; 3
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	0e 94 8e 01 	call	0x31c	; 0x31c <analogWrite>
	analogWrite(motorLeftA , 0);
 58a:	60 e0       	ldi	r22, 0x00	; 0
 58c:	70 e0       	ldi	r23, 0x00	; 0
 58e:	86 e0       	ldi	r24, 0x06	; 6
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	0e 94 8e 01 	call	0x31c	; 0x31c <analogWrite>
	analogWrite(motorLeftB , motorLeftSpeed);
 596:	68 ec       	ldi	r22, 0xC8	; 200
 598:	70 e0       	ldi	r23, 0x00	; 0
 59a:	85 e0       	ldi	r24, 0x05	; 5
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	0e 94 8e 01 	call	0x31c	; 0x31c <analogWrite>
 5a2:	2f ef       	ldi	r18, 0xFF	; 255
 5a4:	85 ed       	ldi	r24, 0xD5	; 213
 5a6:	96 e0       	ldi	r25, 0x06	; 6
 5a8:	21 50       	subi	r18, 0x01	; 1
 5aa:	80 40       	sbci	r24, 0x00	; 0
 5ac:	90 40       	sbci	r25, 0x00	; 0
 5ae:	e1 f7       	brne	.-8      	; 0x5a8 <turnLeft+0x36>
 5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <turnLeft+0x40>
 5b2:	00 00       	nop
	_delay_ms(280);
	stop();
 5b4:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <stop>
 5b8:	08 95       	ret

000005ba <blink>:
}

void blink(int n){
 5ba:	0f 93       	push	r16
 5bc:	1f 93       	push	r17
 5be:	cf 93       	push	r28
 5c0:	df 93       	push	r29
 5c2:	8c 01       	movw	r16, r24
	for (int i=0;i<n;i++){
 5c4:	c0 e0       	ldi	r28, 0x00	; 0
 5c6:	d0 e0       	ldi	r29, 0x00	; 0
 5c8:	1f c0       	rjmp	.+62     	; 0x608 <blink+0x4e>
		digitalWrite(pinBlink , LOW);
 5ca:	60 e0       	ldi	r22, 0x00	; 0
 5cc:	70 e0       	ldi	r23, 0x00	; 0
 5ce:	80 e1       	ldi	r24, 0x10	; 16
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWrite>
 5d6:	2f e7       	ldi	r18, 0x7F	; 127
 5d8:	88 e3       	ldi	r24, 0x38	; 56
 5da:	91 e0       	ldi	r25, 0x01	; 1
 5dc:	21 50       	subi	r18, 0x01	; 1
 5de:	80 40       	sbci	r24, 0x00	; 0
 5e0:	90 40       	sbci	r25, 0x00	; 0
 5e2:	e1 f7       	brne	.-8      	; 0x5dc <blink+0x22>
 5e4:	00 c0       	rjmp	.+0      	; 0x5e6 <blink+0x2c>
 5e6:	00 00       	nop
		_delay_ms(50);
		digitalWrite(pinBlink , HIGH);
 5e8:	61 e0       	ldi	r22, 0x01	; 1
 5ea:	70 e0       	ldi	r23, 0x00	; 0
 5ec:	80 e1       	ldi	r24, 0x10	; 16
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWrite>
 5f4:	2f e7       	ldi	r18, 0x7F	; 127
 5f6:	88 e3       	ldi	r24, 0x38	; 56
 5f8:	91 e0       	ldi	r25, 0x01	; 1
 5fa:	21 50       	subi	r18, 0x01	; 1
 5fc:	80 40       	sbci	r24, 0x00	; 0
 5fe:	90 40       	sbci	r25, 0x00	; 0
 600:	e1 f7       	brne	.-8      	; 0x5fa <blink+0x40>
 602:	00 c0       	rjmp	.+0      	; 0x604 <blink+0x4a>
 604:	00 00       	nop
	_delay_ms(280);
	stop();
}

void blink(int n){
	for (int i=0;i<n;i++){
 606:	21 96       	adiw	r28, 0x01	; 1
 608:	c0 17       	cp	r28, r16
 60a:	d1 07       	cpc	r29, r17
 60c:	f4 f2       	brlt	.-68     	; 0x5ca <blink+0x10>
		digitalWrite(pinBlink , LOW);
		_delay_ms(50);
		digitalWrite(pinBlink , HIGH);
		_delay_ms(50);
	}
}
 60e:	df 91       	pop	r29
 610:	cf 91       	pop	r28
 612:	1f 91       	pop	r17
 614:	0f 91       	pop	r16
 616:	08 95       	ret

00000618 <main>:


int main(void)
{
 618:	cf 93       	push	r28
 61a:	df 93       	push	r29
 61c:	cd b7       	in	r28, 0x3d	; 61
 61e:	de b7       	in	r29, 0x3e	; 62
 620:	64 97       	sbiw	r28, 0x14	; 20
 622:	0f b6       	in	r0, 0x3f	; 63
 624:	f8 94       	cli
 626:	de bf       	out	0x3e, r29	; 62
 628:	0f be       	out	0x3f, r0	; 63
 62a:	cd bf       	out	0x3d, r28	; 61
	setup();
 62c:	0e 94 06 02 	call	0x40c	; 0x40c <setup>
	/* Replace with your application code */
	while (1)
	{
		digitalWrite(pinReady , LOW);
 630:	60 e0       	ldi	r22, 0x00	; 0
 632:	70 e0       	ldi	r23, 0x00	; 0
 634:	85 e1       	ldi	r24, 0x15	; 21
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWrite>
 63c:	2f e7       	ldi	r18, 0x7F	; 127
 63e:	88 e3       	ldi	r24, 0x38	; 56
 640:	91 e0       	ldi	r25, 0x01	; 1
 642:	21 50       	subi	r18, 0x01	; 1
 644:	80 40       	sbci	r24, 0x00	; 0
 646:	90 40       	sbci	r25, 0x00	; 0
 648:	e1 f7       	brne	.-8      	; 0x642 <main+0x2a>
 64a:	00 c0       	rjmp	.+0      	; 0x64c <main+0x34>
 64c:	00 00       	nop
		_delay_ms(50);
		digitalWrite(pinReady , HIGH);
 64e:	61 e0       	ldi	r22, 0x01	; 1
 650:	70 e0       	ldi	r23, 0x00	; 0
 652:	85 e1       	ldi	r24, 0x15	; 21
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWrite>
 65a:	2f e7       	ldi	r18, 0x7F	; 127
 65c:	88 e3       	ldi	r24, 0x38	; 56
 65e:	91 e0       	ldi	r25, 0x01	; 1
 660:	21 50       	subi	r18, 0x01	; 1
 662:	80 40       	sbci	r24, 0x00	; 0
 664:	90 40       	sbci	r25, 0x00	; 0
 666:	e1 f7       	brne	.-8      	; 0x660 <main+0x48>
 668:	00 c0       	rjmp	.+0      	; 0x66a <main+0x52>
 66a:	00 00       	nop
		_delay_ms(50);
		char str[20];
		int dmsVoltage = readDistance();
 66c:	0e 94 c0 01 	call	0x380	; 0x380 <readDistance>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 670:	4a e0       	ldi	r20, 0x0A	; 10
 672:	8e 01       	movw	r16, r28
 674:	0f 5f       	subi	r16, 0xFF	; 255
 676:	1f 4f       	sbci	r17, 0xFF	; 255
 678:	b8 01       	movw	r22, r16
 67a:	0e 94 06 04 	call	0x80c	; 0x80c <__itoa_ncheck>
		itoa( dmsVoltage , str , 10);
		strcat(str , "\n");
 67e:	f8 01       	movw	r30, r16
 680:	01 90       	ld	r0, Z+
 682:	00 20       	and	r0, r0
 684:	e9 f7       	brne	.-6      	; 0x680 <main+0x68>
 686:	31 97       	sbiw	r30, 0x01	; 1
 688:	8a e0       	ldi	r24, 0x0A	; 10
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	91 83       	std	Z+1, r25	; 0x01
 68e:	80 83       	st	Z, r24
		printString(str);
 690:	c8 01       	movw	r24, r16
 692:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <printString>
		if (readDistance() > 90){
 696:	0e 94 c0 01 	call	0x380	; 0x380 <readDistance>
 69a:	8b 35       	cpi	r24, 0x5B	; 91
 69c:	91 05       	cpc	r25, r1
 69e:	4c f0       	brlt	.+18     	; 0x6b2 <main+0x9a>
			digitalWrite(pinLED[1] , LOW);
 6a0:	60 e0       	ldi	r22, 0x00	; 0
 6a2:	70 e0       	ldi	r23, 0x00	; 0
 6a4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
 6a8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
 6ac:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWrite>
 6b0:	08 c0       	rjmp	.+16     	; 0x6c2 <main+0xaa>
		}
		else{
			digitalWrite(pinLED[1] , HIGH);
 6b2:	61 e0       	ldi	r22, 0x01	; 1
 6b4:	70 e0       	ldi	r23, 0x00	; 0
 6b6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
 6ba:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
 6be:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWrite>
		}
		if (digitalRead(rightIR) == LOW){
 6c2:	8c e0       	ldi	r24, 0x0C	; 12
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	0e 94 54 01 	call	0x2a8	; 0x2a8 <digitalRead>
 6ca:	89 2b       	or	r24, r25
 6cc:	49 f4       	brne	.+18     	; 0x6e0 <main+0xc8>
			digitalWrite(pinLED[2] , LOW);
 6ce:	60 e0       	ldi	r22, 0x00	; 0
 6d0:	70 e0       	ldi	r23, 0x00	; 0
 6d2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_start+0x4>
 6d6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_start+0x5>
 6da:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWrite>
 6de:	08 c0       	rjmp	.+16     	; 0x6f0 <main+0xd8>
		}
		else{
			digitalWrite(pinLED[2] , HIGH);
 6e0:	61 e0       	ldi	r22, 0x01	; 1
 6e2:	70 e0       	ldi	r23, 0x00	; 0
 6e4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_start+0x4>
 6e8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_start+0x5>
 6ec:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWrite>
		}
		if (digitalRead(leftIR) == LOW){
 6f0:	8d e0       	ldi	r24, 0x0D	; 13
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	0e 94 54 01 	call	0x2a8	; 0x2a8 <digitalRead>
 6f8:	89 2b       	or	r24, r25
 6fa:	49 f4       	brne	.+18     	; 0x70e <main+0xf6>
			digitalWrite(pinLED[0] , LOW);
 6fc:	60 e0       	ldi	r22, 0x00	; 0
 6fe:	70 e0       	ldi	r23, 0x00	; 0
 700:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 704:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 708:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWrite>
 70c:	08 c0       	rjmp	.+16     	; 0x71e <main+0x106>
		}
		else{
			digitalWrite(pinLED[0] , HIGH);
 70e:	61 e0       	ldi	r22, 0x01	; 1
 710:	70 e0       	ldi	r23, 0x00	; 0
 712:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 716:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 71a:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWrite>
		}
		
		if(readDistance() < 90 && digitalRead(rightIR) == LOW ){
 71e:	0e 94 c0 01 	call	0x380	; 0x380 <readDistance>
 722:	8a 35       	cpi	r24, 0x5A	; 90
 724:	91 05       	cpc	r25, r1
 726:	fc f4       	brge	.+62     	; 0x766 <main+0x14e>
 728:	8c e0       	ldi	r24, 0x0C	; 12
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	0e 94 54 01 	call	0x2a8	; 0x2a8 <digitalRead>
 730:	89 2b       	or	r24, r25
 732:	c9 f4       	brne	.+50     	; 0x766 <main+0x14e>
			// foward
			analogWrite(motorLeftA , motorLeftSpeed);
 734:	68 ec       	ldi	r22, 0xC8	; 200
 736:	70 e0       	ldi	r23, 0x00	; 0
 738:	86 e0       	ldi	r24, 0x06	; 6
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	0e 94 8e 01 	call	0x31c	; 0x31c <analogWrite>
			analogWrite(motorLeftB , 0);
 740:	60 e0       	ldi	r22, 0x00	; 0
 742:	70 e0       	ldi	r23, 0x00	; 0
 744:	85 e0       	ldi	r24, 0x05	; 5
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	0e 94 8e 01 	call	0x31c	; 0x31c <analogWrite>
			analogWrite(motorRightA , motorRightSpeed);
 74c:	68 ec       	ldi	r22, 0xC8	; 200
 74e:	70 e0       	ldi	r23, 0x00	; 0
 750:	82 e1       	ldi	r24, 0x12	; 18
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	0e 94 8e 01 	call	0x31c	; 0x31c <analogWrite>
			analogWrite(motorRightB , 0);
 758:	60 e0       	ldi	r22, 0x00	; 0
 75a:	70 e0       	ldi	r23, 0x00	; 0
 75c:	83 e0       	ldi	r24, 0x03	; 3
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	0e 94 8e 01 	call	0x31c	; 0x31c <analogWrite>
 764:	65 cf       	rjmp	.-310    	; 0x630 <main+0x18>
		}
		else if (readDistance() < 90 && digitalRead(rightIR) == HIGH){
 766:	0e 94 c0 01 	call	0x380	; 0x380 <readDistance>
 76a:	8a 35       	cpi	r24, 0x5A	; 90
 76c:	91 05       	cpc	r25, r1
 76e:	b4 f4       	brge	.+44     	; 0x79c <main+0x184>
 770:	8c e0       	ldi	r24, 0x0C	; 12
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	0e 94 54 01 	call	0x2a8	; 0x2a8 <digitalRead>
 778:	01 97       	sbiw	r24, 0x01	; 1
 77a:	81 f4       	brne	.+32     	; 0x79c <main+0x184>
			blink(1);
 77c:	81 e0       	ldi	r24, 0x01	; 1
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	0e 94 dd 02 	call	0x5ba	; 0x5ba <blink>
 784:	2f ef       	ldi	r18, 0xFF	; 255
 786:	84 e3       	ldi	r24, 0x34	; 52
 788:	9c e0       	ldi	r25, 0x0C	; 12
 78a:	21 50       	subi	r18, 0x01	; 1
 78c:	80 40       	sbci	r24, 0x00	; 0
 78e:	90 40       	sbci	r25, 0x00	; 0
 790:	e1 f7       	brne	.-8      	; 0x78a <main+0x172>
 792:	00 c0       	rjmp	.+0      	; 0x794 <main+0x17c>
 794:	00 00       	nop
			_delay_ms(500);
			turnRight();
 796:	0e 94 95 02 	call	0x52a	; 0x52a <turnRight>
 79a:	4a cf       	rjmp	.-364    	; 0x630 <main+0x18>
		}
		else if (readDistance()> 90 && digitalRead(leftIR) == LOW){
 79c:	0e 94 c0 01 	call	0x380	; 0x380 <readDistance>
 7a0:	8b 35       	cpi	r24, 0x5B	; 91
 7a2:	91 05       	cpc	r25, r1
 7a4:	b4 f0       	brlt	.+44     	; 0x7d2 <main+0x1ba>
 7a6:	8d e0       	ldi	r24, 0x0D	; 13
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	0e 94 54 01 	call	0x2a8	; 0x2a8 <digitalRead>
 7ae:	89 2b       	or	r24, r25
 7b0:	81 f4       	brne	.+32     	; 0x7d2 <main+0x1ba>
			blink(2);
 7b2:	82 e0       	ldi	r24, 0x02	; 2
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	0e 94 dd 02 	call	0x5ba	; 0x5ba <blink>
 7ba:	2f ef       	ldi	r18, 0xFF	; 255
 7bc:	84 e3       	ldi	r24, 0x34	; 52
 7be:	9c e0       	ldi	r25, 0x0C	; 12
 7c0:	21 50       	subi	r18, 0x01	; 1
 7c2:	80 40       	sbci	r24, 0x00	; 0
 7c4:	90 40       	sbci	r25, 0x00	; 0
 7c6:	e1 f7       	brne	.-8      	; 0x7c0 <main+0x1a8>
 7c8:	00 c0       	rjmp	.+0      	; 0x7ca <main+0x1b2>
 7ca:	00 00       	nop
			_delay_ms(500);
			turnLeft();
 7cc:	0e 94 b9 02 	call	0x572	; 0x572 <turnLeft>
 7d0:	2f cf       	rjmp	.-418    	; 0x630 <main+0x18>
		}
		else if (readDistance() > 90 && digitalRead(leftIR) == HIGH ){
 7d2:	0e 94 c0 01 	call	0x380	; 0x380 <readDistance>
 7d6:	8b 35       	cpi	r24, 0x5B	; 91
 7d8:	91 05       	cpc	r25, r1
 7da:	0c f4       	brge	.+2      	; 0x7de <main+0x1c6>
 7dc:	29 cf       	rjmp	.-430    	; 0x630 <main+0x18>
 7de:	8d e0       	ldi	r24, 0x0D	; 13
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	0e 94 54 01 	call	0x2a8	; 0x2a8 <digitalRead>
 7e6:	01 97       	sbiw	r24, 0x01	; 1
 7e8:	09 f0       	breq	.+2      	; 0x7ec <main+0x1d4>
 7ea:	22 cf       	rjmp	.-444    	; 0x630 <main+0x18>
			blink(3);
 7ec:	83 e0       	ldi	r24, 0x03	; 3
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	0e 94 dd 02 	call	0x5ba	; 0x5ba <blink>
 7f4:	2f ef       	ldi	r18, 0xFF	; 255
 7f6:	84 e3       	ldi	r24, 0x34	; 52
 7f8:	9c e0       	ldi	r25, 0x0C	; 12
 7fa:	21 50       	subi	r18, 0x01	; 1
 7fc:	80 40       	sbci	r24, 0x00	; 0
 7fe:	90 40       	sbci	r25, 0x00	; 0
 800:	e1 f7       	brne	.-8      	; 0x7fa <main+0x1e2>
 802:	00 c0       	rjmp	.+0      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 804:	00 00       	nop
			_delay_ms(500);
			turnLeft();
 806:	0e 94 b9 02 	call	0x572	; 0x572 <turnLeft>
		}
	}
 80a:	12 cf       	rjmp	.-476    	; 0x630 <main+0x18>

0000080c <__itoa_ncheck>:
 80c:	bb 27       	eor	r27, r27
 80e:	4a 30       	cpi	r20, 0x0A	; 10
 810:	31 f4       	brne	.+12     	; 0x81e <__itoa_ncheck+0x12>
 812:	99 23       	and	r25, r25
 814:	22 f4       	brpl	.+8      	; 0x81e <__itoa_ncheck+0x12>
 816:	bd e2       	ldi	r27, 0x2D	; 45
 818:	90 95       	com	r25
 81a:	81 95       	neg	r24
 81c:	9f 4f       	sbci	r25, 0xFF	; 255
 81e:	0c 94 12 04 	jmp	0x824	; 0x824 <__utoa_common>

00000822 <__utoa_ncheck>:
 822:	bb 27       	eor	r27, r27

00000824 <__utoa_common>:
 824:	fb 01       	movw	r30, r22
 826:	55 27       	eor	r21, r21
 828:	aa 27       	eor	r26, r26
 82a:	88 0f       	add	r24, r24
 82c:	99 1f       	adc	r25, r25
 82e:	aa 1f       	adc	r26, r26
 830:	a4 17       	cp	r26, r20
 832:	10 f0       	brcs	.+4      	; 0x838 <__utoa_common+0x14>
 834:	a4 1b       	sub	r26, r20
 836:	83 95       	inc	r24
 838:	50 51       	subi	r21, 0x10	; 16
 83a:	b9 f7       	brne	.-18     	; 0x82a <__utoa_common+0x6>
 83c:	a0 5d       	subi	r26, 0xD0	; 208
 83e:	aa 33       	cpi	r26, 0x3A	; 58
 840:	08 f0       	brcs	.+2      	; 0x844 <__utoa_common+0x20>
 842:	a9 5d       	subi	r26, 0xD9	; 217
 844:	a1 93       	st	Z+, r26
 846:	00 97       	sbiw	r24, 0x00	; 0
 848:	79 f7       	brne	.-34     	; 0x828 <__utoa_common+0x4>
 84a:	b1 11       	cpse	r27, r1
 84c:	b1 93       	st	Z+, r27
 84e:	11 92       	st	Z+, r1
 850:	cb 01       	movw	r24, r22
 852:	0c 94 2b 04 	jmp	0x856	; 0x856 <strrev>

00000856 <strrev>:
 856:	dc 01       	movw	r26, r24
 858:	fc 01       	movw	r30, r24
 85a:	67 2f       	mov	r22, r23
 85c:	71 91       	ld	r23, Z+
 85e:	77 23       	and	r23, r23
 860:	e1 f7       	brne	.-8      	; 0x85a <strrev+0x4>
 862:	32 97       	sbiw	r30, 0x02	; 2
 864:	04 c0       	rjmp	.+8      	; 0x86e <strrev+0x18>
 866:	7c 91       	ld	r23, X
 868:	6d 93       	st	X+, r22
 86a:	70 83       	st	Z, r23
 86c:	62 91       	ld	r22, -Z
 86e:	ae 17       	cp	r26, r30
 870:	bf 07       	cpc	r27, r31
 872:	c8 f3       	brcs	.-14     	; 0x866 <strrev+0x10>
 874:	08 95       	ret

00000876 <_exit>:
 876:	f8 94       	cli

00000878 <__stop_program>:
 878:	ff cf       	rjmp	.-2      	; 0x878 <__stop_program>
